
Veliki_nucleo_konacno.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c80  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08006e18  08006e18  00016e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f8  080073f8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080073f8  080073f8  000173f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007400  08007400  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007400  08007400  00017400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000088  08007490  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08007490  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d29  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c83  00000000  00000000  00028de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000618  00000000  00000000  0002aa68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000510  00000000  00000000  0002b080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002965  00000000  00000000  0002b590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000083ea  00000000  00000000  0002def5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008139b  00000000  00000000  000362df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b767a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c5c  00000000  00000000  000b76f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006e00 	.word	0x08006e00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	08006e00 	.word	0x08006e00

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b972 	b.w	8000e9c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4688      	mov	r8, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14b      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4615      	mov	r5, r2
 8000be2:	d967      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0720 	rsb	r7, r2, #32
 8000bee:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	ea47 0803 	orr.w	r8, r7, r3
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c08:	fa1f fc85 	uxth.w	ip, r5
 8000c0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	fb07 f10c 	mul.w	r1, r7, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c22:	f080 811b 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8118 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c2c:	3f02      	subs	r7, #2
 8000c2e:	442b      	add	r3, r5
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	442c      	add	r4, r5
 8000c5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	2700      	movs	r7, #0
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xbe>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80eb 	beq.w	8000e56 <__udivmoddi4+0x286>
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9c6 0100 	strd	r0, r1, [r6]
 8000c86:	4638      	mov	r0, r7
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f783 	clz	r7, r3
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d147      	bne.n	8000d26 <__udivmoddi4+0x156>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd0>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000cae:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xe8>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc2:	1b49      	subs	r1, r1, r5
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	fa1f f885 	uxth.w	r8, r5
 8000ccc:	2701      	movs	r7, #1
 8000cce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4299      	cmp	r1, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1a59      	subs	r1, r3, r1
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x14c>
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x14a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80b6 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e79f      	b.n	8000c66 <__udivmoddi4+0x96>
 8000d26:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2a:	40bb      	lsls	r3, r7
 8000d2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d34:	fa01 f407 	lsl.w	r4, r1, r7
 8000d38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d44:	4325      	orrs	r5, r4
 8000d46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d50:	fa1f fa8e 	uxth.w	sl, lr
 8000d54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d58:	fb09 f40a 	mul.w	r4, r9, sl
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d62:	fa00 f107 	lsl.w	r1, r0, r7
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1e 0303 	adds.w	r3, lr, r3
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d70:	f080 8087 	bcs.w	8000e82 <__udivmoddi4+0x2b2>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f240 8084 	bls.w	8000e82 <__udivmoddi4+0x2b2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4473      	add	r3, lr
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	b2ad      	uxth	r5, r5
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d94:	45a2      	cmp	sl, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1e 0404 	adds.w	r4, lr, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da0:	d26b      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d969      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4474      	add	r4, lr
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c2      	mov	sl, r8
 8000dba:	464b      	mov	r3, r9
 8000dbc:	d354      	bcc.n	8000e68 <__udivmoddi4+0x298>
 8000dbe:	d051      	beq.n	8000e64 <__udivmoddi4+0x294>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2c8>
 8000dc4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dcc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd0:	40fd      	lsrs	r5, r7
 8000dd2:	40fc      	lsrs	r4, r7
 8000dd4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f703 	lsr.w	r7, r0, r3
 8000de8:	4095      	lsls	r5, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dfe:	fa1f f885 	uxth.w	r8, r5
 8000e02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb07 f308 	mul.w	r3, r7, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x256>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e1c:	d22f      	bcs.n	8000e7e <__udivmoddi4+0x2ae>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d92d      	bls.n	8000e7e <__udivmoddi4+0x2ae>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	b281      	uxth	r1, r0
 8000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb00 f308 	mul.w	r3, r0, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x27e>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e44:	d217      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d915      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1ac9      	subs	r1, r1, r3
 8000e50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e54:	e73b      	b.n	8000cce <__udivmoddi4+0xfe>
 8000e56:	4637      	mov	r7, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e709      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	e6e7      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e64:	4541      	cmp	r1, r8
 8000e66:	d2ab      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e70:	3801      	subs	r0, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	e7a4      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e76:	4660      	mov	r0, ip
 8000e78:	e7e9      	b.n	8000e4e <__udivmoddi4+0x27e>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	e795      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e7e:	4667      	mov	r7, ip
 8000e80:	e7d1      	b.n	8000e26 <__udivmoddi4+0x256>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e77c      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	442c      	add	r4, r5
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0x14c>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	442b      	add	r3, r5
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e94:	4638      	mov	r0, r7
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xda>
 8000e98:	4637      	mov	r7, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa0>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <maxxoni_init>:

static void pwm_tim2_init(void);
static void pwm_tim5_init(void);
static void mode_init(void);

void maxxoni_init() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	pwm_tim2_init();
 8000ea4:	f000 f92e 	bl	8001104 <pwm_tim2_init>
	pwm_tim5_init();
 8000ea8:	f000 fa06 	bl	80012b8 <pwm_tim5_init>
	mode_init();
 8000eac:	f000 f802 	bl	8000eb4 <mode_init>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <mode_init>:
static void mode_init(void) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
	// M1
	const uint8_t m1_mode_pin1 = 4;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	71fb      	strb	r3, [r7, #7]
	const uint8_t m1_mode_pin2 = 15;
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	71bb      	strb	r3, [r7, #6]
	GPIOA->MODER &= ~(0b11 << 2 * m1_mode_pin1);
 8000ec2:	4b8f      	ldr	r3, [pc, #572]	; (8001100 <mode_init+0x24c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	79fa      	ldrb	r2, [r7, #7]
 8000ec8:	0052      	lsls	r2, r2, #1
 8000eca:	2103      	movs	r1, #3
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	43d2      	mvns	r2, r2
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4a8a      	ldr	r2, [pc, #552]	; (8001100 <mode_init+0x24c>)
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << 2 * m1_mode_pin1);
 8000eda:	4b89      	ldr	r3, [pc, #548]	; (8001100 <mode_init+0x24c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4a85      	ldr	r2, [pc, #532]	; (8001100 <mode_init+0x24c>)
 8000eec:	430b      	orrs	r3, r1
 8000eee:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER &= ~(0b1 << m1_mode_pin1);
 8000ef0:	4b83      	ldr	r3, [pc, #524]	; (8001100 <mode_init+0x24c>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	43d2      	mvns	r2, r2
 8000efe:	4611      	mov	r1, r2
 8000f00:	4a7f      	ldr	r2, [pc, #508]	; (8001100 <mode_init+0x24c>)
 8000f02:	400b      	ands	r3, r1
 8000f04:	6053      	str	r3, [r2, #4]

	GPIOA->OSPEEDR &= ~(0b11 << 2 * m1_mode_pin1);
 8000f06:	4b7e      	ldr	r3, [pc, #504]	; (8001100 <mode_init+0x24c>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	79fa      	ldrb	r2, [r7, #7]
 8000f0c:	0052      	lsls	r2, r2, #1
 8000f0e:	2103      	movs	r1, #3
 8000f10:	fa01 f202 	lsl.w	r2, r1, r2
 8000f14:	43d2      	mvns	r2, r2
 8000f16:	4611      	mov	r1, r2
 8000f18:	4a79      	ldr	r2, [pc, #484]	; (8001100 <mode_init+0x24c>)
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0b11 << 2 * m1_mode_pin1);
 8000f1e:	4b78      	ldr	r3, [pc, #480]	; (8001100 <mode_init+0x24c>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	79fa      	ldrb	r2, [r7, #7]
 8000f24:	0052      	lsls	r2, r2, #1
 8000f26:	2103      	movs	r1, #3
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4a74      	ldr	r2, [pc, #464]	; (8001100 <mode_init+0x24c>)
 8000f30:	430b      	orrs	r3, r1
 8000f32:	6093      	str	r3, [r2, #8]

	GPIOA->PUPDR &= ~(0b11 << 2 * m1_mode_pin1);
 8000f34:	4b72      	ldr	r3, [pc, #456]	; (8001100 <mode_init+0x24c>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	79fa      	ldrb	r2, [r7, #7]
 8000f3a:	0052      	lsls	r2, r2, #1
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	43d2      	mvns	r2, r2
 8000f44:	4611      	mov	r1, r2
 8000f46:	4a6e      	ldr	r2, [pc, #440]	; (8001100 <mode_init+0x24c>)
 8000f48:	400b      	ands	r3, r1
 8000f4a:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * m1_mode_pin2);
 8000f4c:	4b6c      	ldr	r3, [pc, #432]	; (8001100 <mode_init+0x24c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	79ba      	ldrb	r2, [r7, #6]
 8000f52:	0052      	lsls	r2, r2, #1
 8000f54:	2103      	movs	r1, #3
 8000f56:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5a:	43d2      	mvns	r2, r2
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4a68      	ldr	r2, [pc, #416]	; (8001100 <mode_init+0x24c>)
 8000f60:	400b      	ands	r3, r1
 8000f62:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << 2 * m1_mode_pin2);
 8000f64:	4b66      	ldr	r3, [pc, #408]	; (8001100 <mode_init+0x24c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	79ba      	ldrb	r2, [r7, #6]
 8000f6a:	0052      	lsls	r2, r2, #1
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	4611      	mov	r1, r2
 8000f74:	4a62      	ldr	r2, [pc, #392]	; (8001100 <mode_init+0x24c>)
 8000f76:	430b      	orrs	r3, r1
 8000f78:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER &= ~(0b1 << m1_mode_pin2);
 8000f7a:	4b61      	ldr	r3, [pc, #388]	; (8001100 <mode_init+0x24c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	79ba      	ldrb	r2, [r7, #6]
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f202 	lsl.w	r2, r1, r2
 8000f86:	43d2      	mvns	r2, r2
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4a5d      	ldr	r2, [pc, #372]	; (8001100 <mode_init+0x24c>)
 8000f8c:	400b      	ands	r3, r1
 8000f8e:	6053      	str	r3, [r2, #4]

	GPIOA->OSPEEDR &= ~(0b11 << 2 * m1_mode_pin2);
 8000f90:	4b5b      	ldr	r3, [pc, #364]	; (8001100 <mode_init+0x24c>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	79ba      	ldrb	r2, [r7, #6]
 8000f96:	0052      	lsls	r2, r2, #1
 8000f98:	2103      	movs	r1, #3
 8000f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9e:	43d2      	mvns	r2, r2
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4a57      	ldr	r2, [pc, #348]	; (8001100 <mode_init+0x24c>)
 8000fa4:	400b      	ands	r3, r1
 8000fa6:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0b11 << 2 * m1_mode_pin2);
 8000fa8:	4b55      	ldr	r3, [pc, #340]	; (8001100 <mode_init+0x24c>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	79ba      	ldrb	r2, [r7, #6]
 8000fae:	0052      	lsls	r2, r2, #1
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4a51      	ldr	r2, [pc, #324]	; (8001100 <mode_init+0x24c>)
 8000fba:	430b      	orrs	r3, r1
 8000fbc:	6093      	str	r3, [r2, #8]

	GPIOA->PUPDR &= ~(0b11 << 2 * m1_mode_pin2);
 8000fbe:	4b50      	ldr	r3, [pc, #320]	; (8001100 <mode_init+0x24c>)
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	79ba      	ldrb	r2, [r7, #6]
 8000fc4:	0052      	lsls	r2, r2, #1
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	43d2      	mvns	r2, r2
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4a4b      	ldr	r2, [pc, #300]	; (8001100 <mode_init+0x24c>)
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	60d3      	str	r3, [r2, #12]

	// M2
	const uint8_t m2_mode_pin1 = 11;
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	717b      	strb	r3, [r7, #5]
	const uint8_t m2_mode_pin2 = 12;
 8000fda:	230c      	movs	r3, #12
 8000fdc:	713b      	strb	r3, [r7, #4]
	GPIOA->MODER &= ~(0b11 << 2 * m2_mode_pin1);
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <mode_init+0x24c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	797a      	ldrb	r2, [r7, #5]
 8000fe4:	0052      	lsls	r2, r2, #1
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	43d2      	mvns	r2, r2
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4a43      	ldr	r2, [pc, #268]	; (8001100 <mode_init+0x24c>)
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << 2 * m2_mode_pin1);
 8000ff6:	4b42      	ldr	r3, [pc, #264]	; (8001100 <mode_init+0x24c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	797a      	ldrb	r2, [r7, #5]
 8000ffc:	0052      	lsls	r2, r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	4611      	mov	r1, r2
 8001006:	4a3e      	ldr	r2, [pc, #248]	; (8001100 <mode_init+0x24c>)
 8001008:	430b      	orrs	r3, r1
 800100a:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER &= ~(0b1 << m2_mode_pin1);
 800100c:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <mode_init+0x24c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	797a      	ldrb	r2, [r7, #5]
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	43d2      	mvns	r2, r2
 800101a:	4611      	mov	r1, r2
 800101c:	4a38      	ldr	r2, [pc, #224]	; (8001100 <mode_init+0x24c>)
 800101e:	400b      	ands	r3, r1
 8001020:	6053      	str	r3, [r2, #4]

	GPIOA->OSPEEDR &= ~(0b11 << 2 * m2_mode_pin1);
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <mode_init+0x24c>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	797a      	ldrb	r2, [r7, #5]
 8001028:	0052      	lsls	r2, r2, #1
 800102a:	2103      	movs	r1, #3
 800102c:	fa01 f202 	lsl.w	r2, r1, r2
 8001030:	43d2      	mvns	r2, r2
 8001032:	4611      	mov	r1, r2
 8001034:	4a32      	ldr	r2, [pc, #200]	; (8001100 <mode_init+0x24c>)
 8001036:	400b      	ands	r3, r1
 8001038:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0b11 << 2 * m2_mode_pin1);
 800103a:	4b31      	ldr	r3, [pc, #196]	; (8001100 <mode_init+0x24c>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	797a      	ldrb	r2, [r7, #5]
 8001040:	0052      	lsls	r2, r2, #1
 8001042:	2103      	movs	r1, #3
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	4611      	mov	r1, r2
 800104a:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <mode_init+0x24c>)
 800104c:	430b      	orrs	r3, r1
 800104e:	6093      	str	r3, [r2, #8]

	GPIOA->PUPDR &= ~(0b11 << 2 * m2_mode_pin1);
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <mode_init+0x24c>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	797a      	ldrb	r2, [r7, #5]
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	2103      	movs	r1, #3
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	43d2      	mvns	r2, r2
 8001060:	4611      	mov	r1, r2
 8001062:	4a27      	ldr	r2, [pc, #156]	; (8001100 <mode_init+0x24c>)
 8001064:	400b      	ands	r3, r1
 8001066:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 2 * m2_mode_pin2);
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <mode_init+0x24c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	793a      	ldrb	r2, [r7, #4]
 800106e:	0052      	lsls	r2, r2, #1
 8001070:	2103      	movs	r1, #3
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	43d2      	mvns	r2, r2
 8001078:	4611      	mov	r1, r2
 800107a:	4a21      	ldr	r2, [pc, #132]	; (8001100 <mode_init+0x24c>)
 800107c:	400b      	ands	r3, r1
 800107e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << 2 * m2_mode_pin2);
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <mode_init+0x24c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	793a      	ldrb	r2, [r7, #4]
 8001086:	0052      	lsls	r2, r2, #1
 8001088:	2101      	movs	r1, #1
 800108a:	fa01 f202 	lsl.w	r2, r1, r2
 800108e:	4611      	mov	r1, r2
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <mode_init+0x24c>)
 8001092:	430b      	orrs	r3, r1
 8001094:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER &= ~(0b1 << m2_mode_pin2);
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <mode_init+0x24c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	793a      	ldrb	r2, [r7, #4]
 800109c:	2101      	movs	r1, #1
 800109e:	fa01 f202 	lsl.w	r2, r1, r2
 80010a2:	43d2      	mvns	r2, r2
 80010a4:	4611      	mov	r1, r2
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <mode_init+0x24c>)
 80010a8:	400b      	ands	r3, r1
 80010aa:	6053      	str	r3, [r2, #4]

	GPIOA->OSPEEDR &= ~(0b11 << 2 * m2_mode_pin2);
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <mode_init+0x24c>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	793a      	ldrb	r2, [r7, #4]
 80010b2:	0052      	lsls	r2, r2, #1
 80010b4:	2103      	movs	r1, #3
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	43d2      	mvns	r2, r2
 80010bc:	4611      	mov	r1, r2
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <mode_init+0x24c>)
 80010c0:	400b      	ands	r3, r1
 80010c2:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0b11 << 2 * m2_mode_pin2);
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <mode_init+0x24c>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	793a      	ldrb	r2, [r7, #4]
 80010ca:	0052      	lsls	r2, r2, #1
 80010cc:	2103      	movs	r1, #3
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	4611      	mov	r1, r2
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <mode_init+0x24c>)
 80010d6:	430b      	orrs	r3, r1
 80010d8:	6093      	str	r3, [r2, #8]

	GPIOA->PUPDR &= ~(0b11 << 2 * m2_mode_pin2);
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <mode_init+0x24c>)
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	793a      	ldrb	r2, [r7, #4]
 80010e0:	0052      	lsls	r2, r2, #1
 80010e2:	2103      	movs	r1, #3
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	43d2      	mvns	r2, r2
 80010ea:	4611      	mov	r1, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <mode_init+0x24c>)
 80010ee:	400b      	ands	r3, r1
 80010f0:	60d3      	str	r3, [r2, #12]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40020000 	.word	0x40020000

08001104 <pwm_tim2_init>:
static void pwm_tim2_init(void) {
 8001104:	b490      	push	{r4, r7}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

	const uint8_t pinA = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]

	RCC->AHB1ENR |= (0b1 << 0); //Port A EN
 800110e:	4b68      	ldr	r3, [pc, #416]	; (80012b0 <pwm_tim2_init+0x1ac>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a67      	ldr	r2, [pc, #412]	; (80012b0 <pwm_tim2_init+0x1ac>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= (0b1 << 0); //TIM2EN
 800111a:	4b65      	ldr	r3, [pc, #404]	; (80012b0 <pwm_tim2_init+0x1ac>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a64      	ldr	r2, [pc, #400]	; (80012b0 <pwm_tim2_init+0x1ac>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOA->MODER &= ~(0b11 << 2 * pinA);
 8001126:	4b63      	ldr	r3, [pc, #396]	; (80012b4 <pwm_tim2_init+0x1b0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	0052      	lsls	r2, r2, #1
 800112e:	2103      	movs	r1, #3
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	43d2      	mvns	r2, r2
 8001136:	4611      	mov	r1, r2
 8001138:	4a5e      	ldr	r2, [pc, #376]	; (80012b4 <pwm_tim2_init+0x1b0>)
 800113a:	400b      	ands	r3, r1
 800113c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b10 << 2 * pinA);
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <pwm_tim2_init+0x1b0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	0052      	lsls	r2, r2, #1
 8001146:	2102      	movs	r1, #2
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	4611      	mov	r1, r2
 800114e:	4a59      	ldr	r2, [pc, #356]	; (80012b4 <pwm_tim2_init+0x1b0>)
 8001150:	430b      	orrs	r3, r1
 8001152:	6013      	str	r3, [r2, #0]

	//Alt funkcija
	const uint8_t alt_funkcija = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	71bb      	strb	r3, [r7, #6]

	GPIOA->AFR[pinA / 8] &= ~(0b1111 << (pinA % 8) * 4);
 8001158:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <pwm_tim2_init+0x1b0>)
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	3308      	adds	r3, #8
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	f002 0207 	and.w	r2, r2, #7
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	210f      	movs	r1, #15
 8001170:	fa01 f202 	lsl.w	r2, r1, r2
 8001174:	43d2      	mvns	r2, r2
 8001176:	4614      	mov	r4, r2
 8001178:	494e      	ldr	r1, [pc, #312]	; (80012b4 <pwm_tim2_init+0x1b0>)
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	08d2      	lsrs	r2, r2, #3
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	4610      	mov	r0, r2
 8001182:	ea03 0204 	and.w	r2, r3, r4
 8001186:	f100 0308 	add.w	r3, r0, #8
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOA->AFR[pinA / 8] |= (alt_funkcija << (pinA % 8) * 4);
 800118e:	4a49      	ldr	r2, [pc, #292]	; (80012b4 <pwm_tim2_init+0x1b0>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3308      	adds	r3, #8
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	79b9      	ldrb	r1, [r7, #6]
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	f002 0207 	and.w	r2, r2, #7
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	fa01 f202 	lsl.w	r2, r1, r2
 80011aa:	4614      	mov	r4, r2
 80011ac:	4941      	ldr	r1, [pc, #260]	; (80012b4 <pwm_tim2_init+0x1b0>)
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	08d2      	lsrs	r2, r2, #3
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	4610      	mov	r0, r2
 80011b6:	ea43 0204 	orr.w	r2, r3, r4
 80011ba:	f100 0308 	add.w	r3, r0, #8
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Pitati Cilaga kako se odredjuje ovo!
	TIM2->PSC = 0;
 80011c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 4000 - 1;
 80011ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ce:	f640 729f 	movw	r2, #3999	; 0xf9f
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CCMR1 &= ~(0b111 << 12);
 80011d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80011e2:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (0b110 << 12);
 80011e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ee:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80011f2:	6193      	str	r3, [r2, #24]

	TIM2->CCMR1 |= (0b1 << 11);
 80011f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001202:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &= ~(0b11 << 8); // CC2S
 8001204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001212:	6193      	str	r3, [r2, #24]

	TIM2->CR1 |= (0b1 << 7); //auto-reload
 8001214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001222:	6013      	str	r3, [r2, #0]

	TIM2->CCER |= (0b1 << 4); // enebale ch 2
 8001224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	6213      	str	r3, [r2, #32]

	TIM2->CR1 &= ~(0b1 << 2);
 8001234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123e:	f023 0304 	bic.w	r3, r3, #4
 8001242:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(0b1 << 1);
 8001244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124e:	f023 0302 	bic.w	r3, r3, #2
 8001252:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= (0b1 << 0); //Reset brojaca
 8001254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6153      	str	r3, [r2, #20]

	while (!(TIM2->SR & (0b1 << 0))) {
 8001264:	e000      	b.n	8001268 <pwm_tim2_init+0x164>
		__NOP();
 8001266:	bf00      	nop
	while (!(TIM2->SR & (0b1 << 0))) {
 8001268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f7      	beq.n	8001266 <pwm_tim2_init+0x162>
	}
	TIM2->SR &= ~(0b1 << 0); //Cistimo statusni registar
 8001276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001280:	f023 0301 	bic.w	r3, r3, #1
 8001284:	6113      	str	r3, [r2, #16]

	TIM2->CR1 |= (0b1 << 2);
 8001286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= (0b1 << 0);
 8001296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6013      	str	r3, [r2, #0]
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc90      	pop	{r4, r7}
 80012ae:	4770      	bx	lr
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <pwm_tim5_init>:

static void pwm_tim5_init(void) {
 80012b8:	b490      	push	{r4, r7}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

	const uint8_t pinA = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	71fb      	strb	r3, [r7, #7]

	RCC->AHB1ENR |= (0b1 << 0); //Port A EN
 80012c2:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <pwm_tim5_init+0x178>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a5a      	ldr	r2, [pc, #360]	; (8001430 <pwm_tim5_init+0x178>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= (0b1 << 3); //TIM5EN
 80012ce:	4b58      	ldr	r3, [pc, #352]	; (8001430 <pwm_tim5_init+0x178>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a57      	ldr	r2, [pc, #348]	; (8001430 <pwm_tim5_init+0x178>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOA->MODER &= ~(0b11 << 2 * pinA);
 80012da:	4b56      	ldr	r3, [pc, #344]	; (8001434 <pwm_tim5_init+0x17c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	0052      	lsls	r2, r2, #1
 80012e2:	2103      	movs	r1, #3
 80012e4:	fa01 f202 	lsl.w	r2, r1, r2
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	4611      	mov	r1, r2
 80012ec:	4a51      	ldr	r2, [pc, #324]	; (8001434 <pwm_tim5_init+0x17c>)
 80012ee:	400b      	ands	r3, r1
 80012f0:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b10 << 2 * pinA);
 80012f2:	4b50      	ldr	r3, [pc, #320]	; (8001434 <pwm_tim5_init+0x17c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	79fa      	ldrb	r2, [r7, #7]
 80012f8:	0052      	lsls	r2, r2, #1
 80012fa:	2102      	movs	r1, #2
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	4611      	mov	r1, r2
 8001302:	4a4c      	ldr	r2, [pc, #304]	; (8001434 <pwm_tim5_init+0x17c>)
 8001304:	430b      	orrs	r3, r1
 8001306:	6013      	str	r3, [r2, #0]

	//Alt funkcija
	const uint8_t alt_funkcija = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	71bb      	strb	r3, [r7, #6]

	GPIOA->AFR[pinA / 8] &= ~(0b1111 << (pinA % 8) * 4);
 800130c:	4a49      	ldr	r2, [pc, #292]	; (8001434 <pwm_tim5_init+0x17c>)
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	3308      	adds	r3, #8
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	f002 0207 	and.w	r2, r2, #7
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	210f      	movs	r1, #15
 8001324:	fa01 f202 	lsl.w	r2, r1, r2
 8001328:	43d2      	mvns	r2, r2
 800132a:	4614      	mov	r4, r2
 800132c:	4941      	ldr	r1, [pc, #260]	; (8001434 <pwm_tim5_init+0x17c>)
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	08d2      	lsrs	r2, r2, #3
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	4610      	mov	r0, r2
 8001336:	ea03 0204 	and.w	r2, r3, r4
 800133a:	f100 0308 	add.w	r3, r0, #8
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOA->AFR[pinA / 8] |= (alt_funkcija << (pinA % 8) * 4);
 8001342:	4a3c      	ldr	r2, [pc, #240]	; (8001434 <pwm_tim5_init+0x17c>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	3308      	adds	r3, #8
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	79b9      	ldrb	r1, [r7, #6]
 8001352:	79fa      	ldrb	r2, [r7, #7]
 8001354:	f002 0207 	and.w	r2, r2, #7
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	fa01 f202 	lsl.w	r2, r1, r2
 800135e:	4614      	mov	r4, r2
 8001360:	4934      	ldr	r1, [pc, #208]	; (8001434 <pwm_tim5_init+0x17c>)
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	08d2      	lsrs	r2, r2, #3
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	4610      	mov	r0, r2
 800136a:	ea43 0204 	orr.w	r2, r3, r4
 800136e:	f100 0308 	add.w	r3, r0, #8
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Pitati Cilaga kako se odredjuje ovo!
	TIM5->PSC = 0;
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <pwm_tim5_init+0x180>)
 8001378:	2200      	movs	r2, #0
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 4000 - 1;
 800137c:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <pwm_tim5_init+0x180>)
 800137e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM5->CCMR1 &= ~(0b111 << 4);
 8001384:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <pwm_tim5_init+0x180>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a2b      	ldr	r2, [pc, #172]	; (8001438 <pwm_tim5_init+0x180>)
 800138a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800138e:	6193      	str	r3, [r2, #24]
	TIM5->CCMR1 |= (0b110 << 4);
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <pwm_tim5_init+0x180>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a28      	ldr	r2, [pc, #160]	; (8001438 <pwm_tim5_init+0x180>)
 8001396:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800139a:	6193      	str	r3, [r2, #24]

	TIM5->CCMR1 |= (0b1 << 3);
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <pwm_tim5_init+0x180>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a25      	ldr	r2, [pc, #148]	; (8001438 <pwm_tim5_init+0x180>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
	TIM5->CCMR1 &= ~(0b11 << 0); // CC1S
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <pwm_tim5_init+0x180>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a22      	ldr	r2, [pc, #136]	; (8001438 <pwm_tim5_init+0x180>)
 80013ae:	f023 0303 	bic.w	r3, r3, #3
 80013b2:	6193      	str	r3, [r2, #24]

	TIM5->CR1 |= (0b1 << 7); //auto-reload
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <pwm_tim5_init+0x180>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <pwm_tim5_init+0x180>)
 80013ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013be:	6013      	str	r3, [r2, #0]

	TIM5->CCER |= (0b1 << 0); // enebale ch 2
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <pwm_tim5_init+0x180>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <pwm_tim5_init+0x180>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6213      	str	r3, [r2, #32]

	TIM5->CR1 &= ~(0b1 << 2);
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <pwm_tim5_init+0x180>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <pwm_tim5_init+0x180>)
 80013d2:	f023 0304 	bic.w	r3, r3, #4
 80013d6:	6013      	str	r3, [r2, #0]
	TIM5->CR1 &= ~(0b1 << 1);
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <pwm_tim5_init+0x180>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a16      	ldr	r2, [pc, #88]	; (8001438 <pwm_tim5_init+0x180>)
 80013de:	f023 0302 	bic.w	r3, r3, #2
 80013e2:	6013      	str	r3, [r2, #0]

	TIM5->EGR |= (0b1 << 0); //Reset brojaca
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <pwm_tim5_init+0x180>)
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	4a13      	ldr	r2, [pc, #76]	; (8001438 <pwm_tim5_init+0x180>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6153      	str	r3, [r2, #20]

	while (!(TIM5->SR & (0b1 << 0))) {
 80013f0:	e000      	b.n	80013f4 <pwm_tim5_init+0x13c>
		__NOP();
 80013f2:	bf00      	nop
	while (!(TIM5->SR & (0b1 << 0))) {
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <pwm_tim5_init+0x180>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f8      	beq.n	80013f2 <pwm_tim5_init+0x13a>
	}
	TIM5->SR &= ~(0b1 << 0); //Cistimo statusni registar
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <pwm_tim5_init+0x180>)
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <pwm_tim5_init+0x180>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	6113      	str	r3, [r2, #16]

	TIM5->CR1 |= (0b1 << 2);
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <pwm_tim5_init+0x180>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <pwm_tim5_init+0x180>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6013      	str	r3, [r2, #0]
	TIM5->CR1 |= (0b1 << 0);
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <pwm_tim5_init+0x180>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <pwm_tim5_init+0x180>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bc90      	pop	{r4, r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000
 8001438:	40000c00 	.word	0x40000c00

0800143c <okretanje_m1>:

void okretanje_m1(float procenat) {
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	ed87 0a01 	vstr	s0, [r7, #4]
	//100 : (4000-1) = procenat : faktor_ispune
	TIM2->CCR2 = (uint16_t) (((4000 - 1) * procenat) / 100);
 8001446:	edd7 7a01 	vldr	s15, [r7, #4]
 800144a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001478 <okretanje_m1+0x3c>
 800144e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001452:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800147c <okretanje_m1+0x40>
 8001456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800145e:	ee17 3a90 	vmov	r3, s15
 8001462:	b29a      	uxth	r2, r3
 8001464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001468:	639a      	str	r2, [r3, #56]	; 0x38
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	4579f000 	.word	0x4579f000
 800147c:	42c80000 	.word	0x42c80000

08001480 <okretanje_m2>:

void okretanje_m2(float procenat) {
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	ed87 0a01 	vstr	s0, [r7, #4]
	//100 : (4000-1) = procenat : faktor_ispune
	TIM5->CCR1 = (uint16_t) (((4000 - 1) * procenat) / 100);
 800148a:	edd7 7a01 	vldr	s15, [r7, #4]
 800148e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80014b8 <okretanje_m2+0x38>
 8001492:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001496:	eddf 6a09 	vldr	s13, [pc, #36]	; 80014bc <okretanje_m2+0x3c>
 800149a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a2:	ee17 3a90 	vmov	r3, s15
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <okretanje_m2+0x40>)
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	4579f000 	.word	0x4579f000
 80014bc:	42c80000 	.word	0x42c80000
 80014c0:	40000c00 	.word	0x40000c00

080014c4 <motor1_smer>:

void motor1_smer(bool smer) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	if (smer) {
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00c      	beq.n	80014ee <motor1_smer+0x2a>
		GPIOA->ODR &= ~(0b1 << 4);
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <motor1_smer+0x50>)
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <motor1_smer+0x50>)
 80014da:	f023 0310 	bic.w	r3, r3, #16
 80014de:	6153      	str	r3, [r2, #20]
		GPIOA->ODR |= (0b1 << 15);
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <motor1_smer+0x50>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <motor1_smer+0x50>)
 80014e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ea:	6153      	str	r3, [r2, #20]
	} else {
		GPIOA->ODR |= (0b1 << 4);
		GPIOA->ODR &= ~(0b1 << 15);
	}
}
 80014ec:	e00b      	b.n	8001506 <motor1_smer+0x42>
		GPIOA->ODR |= (0b1 << 4);
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <motor1_smer+0x50>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <motor1_smer+0x50>)
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(0b1 << 15);
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <motor1_smer+0x50>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <motor1_smer+0x50>)
 8001500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001504:	6153      	str	r3, [r2, #20]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40020000 	.word	0x40020000

08001518 <motor2_smer>:

void motor2_smer(bool smer) {
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
	if (smer) {
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00c      	beq.n	8001542 <motor2_smer+0x2a>
		GPIOA->ODR &= ~(0b1 << 11);
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <motor2_smer+0x50>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <motor2_smer+0x50>)
 800152e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001532:	6153      	str	r3, [r2, #20]
		GPIOA->ODR |= (0b1 << 12);
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <motor2_smer+0x50>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <motor2_smer+0x50>)
 800153a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800153e:	6153      	str	r3, [r2, #20]
	} else {
		GPIOA->ODR |= (0b1 << 11);
		GPIOA->ODR &= ~(0b1 << 12);
	}
}
 8001540:	e00b      	b.n	800155a <motor2_smer+0x42>
		GPIOA->ODR |= (0b1 << 11);
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <motor2_smer+0x50>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <motor2_smer+0x50>)
 8001548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800154c:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(0b1 << 12);
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <motor2_smer+0x50>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <motor2_smer+0x50>)
 8001554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001558:	6153      	str	r3, [r2, #20]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40020000 	.word	0x40020000
 800156c:	00000000 	.word	0x00000000

08001570 <odometrija_init>:
int16_t vd_inc;
int16_t vl_inc;

void
odometrija_init (void)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
  omega = 0.0f;
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <odometrija_init+0xa0>)
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
  lin_brzina = 0.0f;
 800157e:	4b25      	ldr	r3, [pc, #148]	; (8001614 <odometrija_init+0xa4>)
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
  distance = 0.0f;
 8001586:	4b24      	ldr	r3, [pc, #144]	; (8001618 <odometrija_init+0xa8>)
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
  teta = 0.0f;
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <odometrija_init+0xac>)
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
  d = 369.0f; // mm
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <odometrija_init+0xb0>)
 8001598:	4a22      	ldr	r2, [pc, #136]	; (8001624 <odometrija_init+0xb4>)
 800159a:	601a      	str	r2, [r3, #0]
  precnik_ot = 60.95f; // mm
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <odometrija_init+0xb8>)
 800159e:	4a23      	ldr	r2, [pc, #140]	; (800162c <odometrija_init+0xbc>)
 80015a0:	601a      	str	r2, [r3, #0]
  float obim_ot = precnik_ot * M_PI;
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <odometrija_init+0xb8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff7a 	bl	80004a0 <__aeabi_f2d>
 80015ac:	a316      	add	r3, pc, #88	; (adr r3, 8001608 <odometrija_init+0x98>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7fe ffcd 	bl	8000550 <__aeabi_dmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	460c      	mov	r4, r1
 80015ba:	4618      	mov	r0, r3
 80015bc:	4621      	mov	r1, r4
 80015be:	f7ff fa9f 	bl	8000b00 <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	60fb      	str	r3, [r7, #12]
  float N = 1000 / obim_ot;
 80015c6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001630 <odometrija_init+0xc0>
 80015ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80015ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d2:	edc7 7a02 	vstr	s15, [r7, #8]
  float n = N * 2048 * 4;
 80015d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80015da:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001634 <odometrija_init+0xc4>
 80015de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	edc7 7a01 	vstr	s15, [r7, #4]
  inc2mm = 1000 / n;
 80015ee:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001630 <odometrija_init+0xc0>
 80015f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80015f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <odometrija_init+0xc8>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bd90      	pop	{r4, r7, pc}
 8001608:	54442d18 	.word	0x54442d18
 800160c:	400921fb 	.word	0x400921fb
 8001610:	20000158 	.word	0x20000158
 8001614:	20000150 	.word	0x20000150
 8001618:	20000148 	.word	0x20000148
 800161c:	2000015c 	.word	0x2000015c
 8001620:	200000a4 	.word	0x200000a4
 8001624:	43b88000 	.word	0x43b88000
 8001628:	200000a8 	.word	0x200000a8
 800162c:	4273cccd 	.word	0x4273cccd
 8001630:	447a0000 	.word	0x447a0000
 8001634:	45000000 	.word	0x45000000
 8001638:	200000ac 	.word	0x200000ac

0800163c <odometrija_stanje>:

void
odometrija_stanje (void)
{
 800163c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001640:	af00      	add	r7, sp, #0
  vd_inc = enkoder_brzina();
 8001642:	f001 fdc3 	bl	80031cc <enkoder_brzina>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <odometrija_stanje+0x184>)
 800164c:	801a      	strh	r2, [r3, #0]
  vl_inc = enkoder_brzina2();
 800164e:	f001 fecf 	bl	80033f0 <enkoder_brzina2>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <odometrija_stanje+0x188>)
 8001658:	801a      	strh	r2, [r3, #0]

  omega = (float)(vd_inc - vl_inc) / d;
 800165a:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <odometrija_stanje+0x184>)
 800165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001660:	461a      	mov	r2, r3
 8001662:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <odometrija_stanje+0x188>)
 8001664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001672:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <odometrija_stanje+0x18c>)
 8001674:	ed93 7a00 	vldr	s14, [r3]
 8001678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <odometrija_stanje+0x190>)
 800167e:	edc3 7a00 	vstr	s15, [r3]
  lin_brzina = (float)(vd_inc + vl_inc) / 2.0;
 8001682:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <odometrija_stanje+0x184>)
 8001684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001688:	461a      	mov	r2, r3
 800168a:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <odometrija_stanje+0x188>)
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	4413      	add	r3, r2
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800169e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <odometrija_stanje+0x194>)
 80016a4:	edc3 7a00 	vstr	s15, [r3]

  lin_brzina *= inc2mm;
 80016a8:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <odometrija_stanje+0x194>)
 80016aa:	ed93 7a00 	vldr	s14, [r3]
 80016ae:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <odometrija_stanje+0x198>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b8:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <odometrija_stanje+0x194>)
 80016ba:	edc3 7a00 	vstr	s15, [r3]
  omega *= inc2mm;
 80016be:	4b43      	ldr	r3, [pc, #268]	; (80017cc <odometrija_stanje+0x190>)
 80016c0:	ed93 7a00 	vldr	s14, [r3]
 80016c4:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <odometrija_stanje+0x198>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <odometrija_stanje+0x190>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]

  distance += lin_brzina;
 80016d4:	4b40      	ldr	r3, [pc, #256]	; (80017d8 <odometrija_stanje+0x19c>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <odometrija_stanje+0x194>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	4b3c      	ldr	r3, [pc, #240]	; (80017d8 <odometrija_stanje+0x19c>)
 80016e6:	edc3 7a00 	vstr	s15, [r3]

  teta += omega;
 80016ea:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <odometrija_stanje+0x1a0>)
 80016ec:	ed93 7a00 	vldr	s14, [r3]
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <odometrija_stanje+0x190>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fa:	4b38      	ldr	r3, [pc, #224]	; (80017dc <odometrija_stanje+0x1a0>)
 80016fc:	edc3 7a00 	vstr	s15, [r3]
  x += lin_brzina * cos(teta);
 8001700:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <odometrija_stanje+0x1a4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fecb 	bl	80004a0 <__aeabi_f2d>
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <odometrija_stanje+0x194>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fec4 	bl	80004a0 <__aeabi_f2d>
 8001718:	4680      	mov	r8, r0
 800171a:	4689      	mov	r9, r1
 800171c:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <odometrija_stanje+0x1a0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe febd 	bl	80004a0 <__aeabi_f2d>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	ec43 2b10 	vmov	d0, r2, r3
 800172e:	f003 faf3 	bl	8004d18 <cos>
 8001732:	ec53 2b10 	vmov	r2, r3, d0
 8001736:	4640      	mov	r0, r8
 8001738:	4649      	mov	r1, r9
 800173a:	f7fe ff09 	bl	8000550 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fd4d 	bl	80001e4 <__adddf3>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	f7ff f9d5 	bl	8000b00 <__aeabi_d2f>
 8001756:	4602      	mov	r2, r0
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <odometrija_stanje+0x1a4>)
 800175a:	601a      	str	r2, [r3, #0]
  y += lin_brzina * sin(teta);
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <odometrija_stanje+0x1a8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fe9d 	bl	80004a0 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <odometrija_stanje+0x194>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe96 	bl	80004a0 <__aeabi_f2d>
 8001774:	4680      	mov	r8, r0
 8001776:	4689      	mov	r9, r1
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <odometrija_stanje+0x1a0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fe8f 	bl	80004a0 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	ec43 2b10 	vmov	d0, r2, r3
 800178a:	f003 fb09 	bl	8004da0 <sin>
 800178e:	ec53 2b10 	vmov	r2, r3, d0
 8001792:	4640      	mov	r0, r8
 8001794:	4649      	mov	r1, r9
 8001796:	f7fe fedb 	bl	8000550 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4620      	mov	r0, r4
 80017a0:	4629      	mov	r1, r5
 80017a2:	f7fe fd1f 	bl	80001e4 <__adddf3>
 80017a6:	4603      	mov	r3, r0
 80017a8:	460c      	mov	r4, r1
 80017aa:	4618      	mov	r0, r3
 80017ac:	4621      	mov	r1, r4
 80017ae:	f7ff f9a7 	bl	8000b00 <__aeabi_d2f>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <odometrija_stanje+0x1a8>)
 80017b6:	601a      	str	r2, [r3, #0]
}
 80017b8:	bf00      	nop
 80017ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017be:	bf00      	nop
 80017c0:	2000014e 	.word	0x2000014e
 80017c4:	2000014c 	.word	0x2000014c
 80017c8:	200000a4 	.word	0x200000a4
 80017cc:	20000158 	.word	0x20000158
 80017d0:	20000150 	.word	0x20000150
 80017d4:	200000ac 	.word	0x200000ac
 80017d8:	20000148 	.word	0x20000148
 80017dc:	2000015c 	.word	0x2000015c
 80017e0:	20000144 	.word	0x20000144
 80017e4:	20000154 	.word	0x20000154

080017e8 <pid_init>:
volatile float x_d;
volatile float y_d;
volatile float t_ce;

void pid_init(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

	teta_min=0.0178;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <pid_init+0x50>)
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <pid_init+0x54>)
 80017f0:	601a      	str	r2, [r3, #0]


	Kp_teta = 40; //51
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <pid_init+0x58>)
 80017f4:	4a13      	ldr	r2, [pc, #76]	; (8001844 <pid_init+0x5c>)
 80017f6:	601a      	str	r2, [r3, #0]
	Ki_teta = 0.14; //0.15
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <pid_init+0x60>)
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <pid_init+0x64>)
 80017fc:	601a      	str	r2, [r3, #0]
	Kd_teta = 40000;  //40000
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <pid_init+0x68>)
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <pid_init+0x6c>)
 8001802:	601a      	str	r2, [r3, #0]

	Kpd = 110; //	17
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <pid_init+0x70>)
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <pid_init+0x74>)
 8001808:	601a      	str	r2, [r3, #0]
	Kid = 0.13; //	0.15
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <pid_init+0x78>)
 800180c:	4a15      	ldr	r2, [pc, #84]	; (8001864 <pid_init+0x7c>)
 800180e:	601a      	str	r2, [r3, #0]
	Kdd = 130000; //   110000
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <pid_init+0x80>)
 8001812:	4a16      	ldr	r2, [pc, #88]	; (800186c <pid_init+0x84>)
 8001814:	601a      	str	r2, [r3, #0]

	d_ei_max = 100;
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <pid_init+0x88>)
 8001818:	4a16      	ldr	r2, [pc, #88]	; (8001874 <pid_init+0x8c>)
 800181a:	601a      	str	r2, [r3, #0]
	d_ei_min = -100;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <pid_init+0x90>)
 800181e:	4a17      	ldr	r2, [pc, #92]	; (800187c <pid_init+0x94>)
 8001820:	601a      	str	r2, [r3, #0]


	teta_ei_max = 130;
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <pid_init+0x98>)
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <pid_init+0x9c>)
 8001826:	601a      	str	r2, [r3, #0]
	teta_ei_min = -130;
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <pid_init+0xa0>)
 800182a:	4a18      	ldr	r2, [pc, #96]	; (800188c <pid_init+0xa4>)
 800182c:	601a      	str	r2, [r3, #0]
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	20000170 	.word	0x20000170
 800183c:	3c91d14e 	.word	0x3c91d14e
 8001840:	200000c0 	.word	0x200000c0
 8001844:	42200000 	.word	0x42200000
 8001848:	200000c4 	.word	0x200000c4
 800184c:	3e0f5c29 	.word	0x3e0f5c29
 8001850:	200000c8 	.word	0x200000c8
 8001854:	471c4000 	.word	0x471c4000
 8001858:	200000b4 	.word	0x200000b4
 800185c:	42dc0000 	.word	0x42dc0000
 8001860:	200000b8 	.word	0x200000b8
 8001864:	3e051eb8 	.word	0x3e051eb8
 8001868:	200000bc 	.word	0x200000bc
 800186c:	47fde800 	.word	0x47fde800
 8001870:	200000e4 	.word	0x200000e4
 8001874:	42c80000 	.word	0x42c80000
 8001878:	200000e8 	.word	0x200000e8
 800187c:	c2c80000 	.word	0xc2c80000
 8001880:	200000dc 	.word	0x200000dc
 8001884:	43020000 	.word	0x43020000
 8001888:	200000e0 	.word	0x200000e0
 800188c:	c3020000 	.word	0xc3020000

08001890 <regulacija>:
//		okretanje_m1(0);
//		okretanje_m2(0);
//	}
}

void regulacija(void) {
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	ed2d 8b02 	vpush	{d8}
 8001896:	af00      	add	r7, sp, #0
	x_d = 450;
 8001898:	4b87      	ldr	r3, [pc, #540]	; (8001ab8 <regulacija+0x228>)
 800189a:	4a88      	ldr	r2, [pc, #544]	; (8001abc <regulacija+0x22c>)
 800189c:	601a      	str	r2, [r3, #0]
	y_d = 0;
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <regulacija+0x230>)
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
	if (faza == 0) {          /////////////////////////faza0
 80018a6:	4b87      	ldr	r3, [pc, #540]	; (8001ac4 <regulacija+0x234>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 81bf 	bne.w	8001c2e <regulacija+0x39e>

		x_e = x_d - (float)x;  //greska x, zadato - trenutno
 80018b0:	4b81      	ldr	r3, [pc, #516]	; (8001ab8 <regulacija+0x228>)
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	4b84      	ldr	r3, [pc, #528]	; (8001ac8 <regulacija+0x238>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	4b82      	ldr	r3, [pc, #520]	; (8001acc <regulacija+0x23c>)
 80018c2:	edc3 7a00 	vstr	s15, [r3]
		y_e = y_d - (float)y;
 80018c6:	4b7e      	ldr	r3, [pc, #504]	; (8001ac0 <regulacija+0x230>)
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	4b80      	ldr	r3, [pc, #512]	; (8001ad0 <regulacija+0x240>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d6:	4b7f      	ldr	r3, [pc, #508]	; (8001ad4 <regulacija+0x244>)
 80018d8:	edc3 7a00 	vstr	s15, [r3]

		x_el = x_e*cosf((float)teta) + y_e*sinf((float)teta);
 80018dc:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <regulacija+0x248>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	f003 faa3 	bl	8004e30 <cosf>
 80018ea:	eeb0 7a40 	vmov.f32	s14, s0
 80018ee:	4b77      	ldr	r3, [pc, #476]	; (8001acc <regulacija+0x23c>)
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80018f8:	4b77      	ldr	r3, [pc, #476]	; (8001ad8 <regulacija+0x248>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001902:	f003 fad5 	bl	8004eb0 <sinf>
 8001906:	eeb0 7a40 	vmov.f32	s14, s0
 800190a:	4b72      	ldr	r3, [pc, #456]	; (8001ad4 <regulacija+0x244>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001918:	4b70      	ldr	r3, [pc, #448]	; (8001adc <regulacija+0x24c>)
 800191a:	edc3 7a00 	vstr	s15, [r3]
		y_el = y_e*cosf((float)teta) - x_e*sinf((float)teta);
 800191e:	4b6e      	ldr	r3, [pc, #440]	; (8001ad8 <regulacija+0x248>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	eeb0 0a67 	vmov.f32	s0, s15
 8001928:	f003 fa82 	bl	8004e30 <cosf>
 800192c:	eeb0 7a40 	vmov.f32	s14, s0
 8001930:	4b68      	ldr	r3, [pc, #416]	; (8001ad4 <regulacija+0x244>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee27 8a27 	vmul.f32	s16, s14, s15
 800193a:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <regulacija+0x248>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	eeb0 0a67 	vmov.f32	s0, s15
 8001944:	f003 fab4 	bl	8004eb0 <sinf>
 8001948:	eeb0 7a40 	vmov.f32	s14, s0
 800194c:	4b5f      	ldr	r3, [pc, #380]	; (8001acc <regulacija+0x23c>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001956:	ee78 7a67 	vsub.f32	s15, s16, s15
 800195a:	4b61      	ldr	r3, [pc, #388]	; (8001ae0 <regulacija+0x250>)
 800195c:	edc3 7a00 	vstr	s15, [r3]

		if (smer == 1){
 8001960:	4b60      	ldr	r3, [pc, #384]	; (8001ae4 <regulacija+0x254>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d111      	bne.n	800198c <regulacija+0xfc>
			t_ce = atan2f(y_el, x_el);
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <regulacija+0x250>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <regulacija+0x24c>)
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	eef0 0a47 	vmov.f32	s1, s14
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	f003 fb34 	bl	8004fe8 <atan2f>
 8001980:	eef0 7a40 	vmov.f32	s15, s0
 8001984:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <regulacija+0x258>)
 8001986:	edc3 7a00 	vstr	s15, [r3]
 800198a:	e018      	b.n	80019be <regulacija+0x12e>
		} else if (smer == 2){
 800198c:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <regulacija+0x254>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d114      	bne.n	80019be <regulacija+0x12e>
			t_ce = atan2f(-y_el, -x_el);
 8001994:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <regulacija+0x250>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	eeb1 7a67 	vneg.f32	s14, s15
 800199e:	4b4f      	ldr	r3, [pc, #316]	; (8001adc <regulacija+0x24c>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	eef1 7a67 	vneg.f32	s15, s15
 80019a8:	eef0 0a67 	vmov.f32	s1, s15
 80019ac:	eeb0 0a47 	vmov.f32	s0, s14
 80019b0:	f003 fb1a 	bl	8004fe8 <atan2f>
 80019b4:	eef0 7a40 	vmov.f32	s15, s0
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <regulacija+0x258>)
 80019ba:	edc3 7a00 	vstr	s15, [r3]
		}

		if (t_ce < -M_PI)
 80019be:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <regulacija+0x258>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fd6c 	bl	80004a0 <__aeabi_f2d>
 80019c8:	a335      	add	r3, pc, #212	; (adr r3, 8001aa0 <regulacija+0x210>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f7ff f831 	bl	8000a34 <__aeabi_dcmplt>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d012      	beq.n	80019fe <regulacija+0x16e>
			t_ce += 2 * M_PI;
 80019d8:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <regulacija+0x258>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fd5f 	bl	80004a0 <__aeabi_f2d>
 80019e2:	a331      	add	r3, pc, #196	; (adr r3, 8001aa8 <regulacija+0x218>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fbfc 	bl	80001e4 <__adddf3>
 80019ec:	4603      	mov	r3, r0
 80019ee:	460c      	mov	r4, r1
 80019f0:	4618      	mov	r0, r3
 80019f2:	4621      	mov	r1, r4
 80019f4:	f7ff f884 	bl	8000b00 <__aeabi_d2f>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <regulacija+0x258>)
 80019fc:	601a      	str	r2, [r3, #0]
		if (t_ce > M_PI)
 80019fe:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <regulacija+0x258>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fd4c 	bl	80004a0 <__aeabi_f2d>
 8001a08:	a329      	add	r3, pc, #164	; (adr r3, 8001ab0 <regulacija+0x220>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7ff f82f 	bl	8000a70 <__aeabi_dcmpgt>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <regulacija+0x1ae>
			t_ce -= 2 * M_PI;
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <regulacija+0x258>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fd3f 	bl	80004a0 <__aeabi_f2d>
 8001a22:	a321      	add	r3, pc, #132	; (adr r3, 8001aa8 <regulacija+0x218>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7fe fbda 	bl	80001e0 <__aeabi_dsub>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	460c      	mov	r4, r1
 8001a30:	4618      	mov	r0, r3
 8001a32:	4621      	mov	r1, r4
 8001a34:	f7ff f864 	bl	8000b00 <__aeabi_d2f>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <regulacija+0x258>)
 8001a3c:	601a      	str	r2, [r3, #0]

		teta_e = t_ce; // te pi/2 pi/4
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <regulacija+0x258>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2a      	ldr	r2, [pc, #168]	; (8001aec <regulacija+0x25c>)
 8001a44:	6013      	str	r3, [r2, #0]

		teta_ei += teta_e;
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <regulacija+0x25c>)
 8001a48:	ed93 7a00 	vldr	s14, [r3]
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <regulacija+0x260>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <regulacija+0x260>)
 8001a58:	edc3 7a00 	vstr	s15, [r3]
		teta_de = teta_e - teta_de_p; //tde pi/2 -pi/4
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <regulacija+0x25c>)
 8001a5e:	ed93 7a00 	vldr	s14, [r3]
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <regulacija+0x264>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <regulacija+0x268>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]
		teta_de_p = teta_e;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <regulacija+0x25c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <regulacija+0x264>)
 8001a78:	6013      	str	r3, [r2, #0]

		if (teta_ei > teta_ei_max) {
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <regulacija+0x260>)
 8001a7c:	ed93 7a00 	vldr	s14, [r3]
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <regulacija+0x26c>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	dd37      	ble.n	8001b00 <regulacija+0x270>
			teta_ei = teta_ei_max;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <regulacija+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <regulacija+0x260>)
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e041      	b.n	8001b1e <regulacija+0x28e>
 8001a9a:	bf00      	nop
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	54442d18 	.word	0x54442d18
 8001aa4:	c00921fb 	.word	0xc00921fb
 8001aa8:	54442d18 	.word	0x54442d18
 8001aac:	401921fb 	.word	0x401921fb
 8001ab0:	54442d18 	.word	0x54442d18
 8001ab4:	400921fb 	.word	0x400921fb
 8001ab8:	2000018c 	.word	0x2000018c
 8001abc:	43e10000 	.word	0x43e10000
 8001ac0:	20000184 	.word	0x20000184
 8001ac4:	200000ec 	.word	0x200000ec
 8001ac8:	20000144 	.word	0x20000144
 8001acc:	200000f0 	.word	0x200000f0
 8001ad0:	20000154 	.word	0x20000154
 8001ad4:	200000fc 	.word	0x200000fc
 8001ad8:	2000015c 	.word	0x2000015c
 8001adc:	200000f4 	.word	0x200000f4
 8001ae0:	200000f8 	.word	0x200000f8
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000188 	.word	0x20000188
 8001aec:	20000160 	.word	0x20000160
 8001af0:	20000174 	.word	0x20000174
 8001af4:	2000017c 	.word	0x2000017c
 8001af8:	20000168 	.word	0x20000168
 8001afc:	200000dc 	.word	0x200000dc
		} else if (teta_ei < teta_ei_min) {
 8001b00:	4b87      	ldr	r3, [pc, #540]	; (8001d20 <regulacija+0x490>)
 8001b02:	ed93 7a00 	vldr	s14, [r3]
 8001b06:	4b87      	ldr	r3, [pc, #540]	; (8001d24 <regulacija+0x494>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	d503      	bpl.n	8001b1e <regulacija+0x28e>
			teta_ei = teta_ei_min;
 8001b16:	4b83      	ldr	r3, [pc, #524]	; (8001d24 <regulacija+0x494>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a81      	ldr	r2, [pc, #516]	; (8001d20 <regulacija+0x490>)
 8001b1c:	6013      	str	r3, [r2, #0]
		}

		Vdr = +(Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <regulacija+0x498>)
 8001b20:	ed93 7a00 	vldr	s14, [r3]
 8001b24:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <regulacija+0x49c>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2e:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <regulacija+0x4a0>)
 8001b30:	edd3 6a00 	vldr	s13, [r3]
 8001b34:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <regulacija+0x490>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b42:	4b7c      	ldr	r3, [pc, #496]	; (8001d34 <regulacija+0x4a4>)
 8001b44:	edd3 6a00 	vldr	s13, [r3]
 8001b48:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <regulacija+0x4a8>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	4b79      	ldr	r3, [pc, #484]	; (8001d3c <regulacija+0x4ac>)
 8001b58:	edc3 7a00 	vstr	s15, [r3]
		Vdl = -(Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 8001b5c:	4b72      	ldr	r3, [pc, #456]	; (8001d28 <regulacija+0x498>)
 8001b5e:	ed93 7a00 	vldr	s14, [r3]
 8001b62:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <regulacija+0x49c>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <regulacija+0x4a0>)
 8001b6e:	edd3 6a00 	vldr	s13, [r3]
 8001b72:	4b6b      	ldr	r3, [pc, #428]	; (8001d20 <regulacija+0x490>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b80:	4b6c      	ldr	r3, [pc, #432]	; (8001d34 <regulacija+0x4a4>)
 8001b82:	edd3 6a00 	vldr	s13, [r3]
 8001b86:	4b6c      	ldr	r3, [pc, #432]	; (8001d38 <regulacija+0x4a8>)
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b94:	eef1 7a67 	vneg.f32	s15, s15
 8001b98:	4b69      	ldr	r3, [pc, #420]	; (8001d40 <regulacija+0x4b0>)
 8001b9a:	edc3 7a00 	vstr	s15, [r3]

		//prosledi_pwm(Vdr, Vdl, Vr, Vl);
		acc = 0.5;
 8001b9e:	4b69      	ldr	r3, [pc, #420]	; (8001d44 <regulacija+0x4b4>)
 8001ba0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001ba4:	601a      	str	r2, [r3, #0]

		if (fabs(teta_e) < M_PI/20)
 8001ba6:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <regulacija+0x49c>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	eef0 7ae7 	vabs.f32	s15, s15
 8001bb0:	ee17 0a90 	vmov	r0, s15
 8001bb4:	f7fe fc74 	bl	80004a0 <__aeabi_f2d>
 8001bb8:	a357      	add	r3, pc, #348	; (adr r3, 8001d18 <regulacija+0x488>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe ff39 	bl	8000a34 <__aeabi_dcmplt>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <regulacija+0x340>
			acc = 1;
 8001bc8:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <regulacija+0x4b4>)
 8001bca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bce:	601a      	str	r2, [r3, #0]

		if (fabs(teta_e) < teta_min) {
 8001bd0:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <regulacija+0x49c>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	eeb0 7ae7 	vabs.f32	s14, s15
 8001bda:	4b5b      	ldr	r3, [pc, #364]	; (8001d48 <regulacija+0x4b8>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	f140 864c 	bpl.w	8002884 <regulacija+0xff4>
			acc = 1;
 8001bec:	4b55      	ldr	r3, [pc, #340]	; (8001d44 <regulacija+0x4b4>)
 8001bee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bf2:	601a      	str	r2, [r3, #0]
			//medju_stanje();
			faza = 1;
 8001bf4:	4b55      	ldr	r3, [pc, #340]	; (8001d4c <regulacija+0x4bc>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
			teta_ei = 0;
 8001bfa:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <regulacija+0x490>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
			d_ei = 0;
 8001c02:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <regulacija+0x4c0>)
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
			teta_de = 0;
 8001c0a:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <regulacija+0x4a8>)
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
			d_de = 0;
 8001c12:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <regulacija+0x4c4>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
			teta_de_p = teta_de;
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <regulacija+0x4a8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a4e      	ldr	r2, [pc, #312]	; (8001d58 <regulacija+0x4c8>)
 8001c20:	6013      	str	r3, [r2, #0]
			d_de_p = d_de;
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <regulacija+0x4c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a4d      	ldr	r2, [pc, #308]	; (8001d5c <regulacija+0x4cc>)
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	f000 be2b 	b.w	8002884 <regulacija+0xff4>
		}

	} else if (faza == 1) { ///////////////////////////faza1////////////////////////////////////////////////////////////////////////////
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <regulacija+0x4bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f040 83d4 	bne.w	80023e0 <regulacija+0xb50>
		x_e = x_d - x;
 8001c38:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <regulacija+0x4d0>)
 8001c3a:	ed93 7a00 	vldr	s14, [r3]
 8001c3e:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <regulacija+0x4d4>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <regulacija+0x4d8>)
 8001c4a:	edc3 7a00 	vstr	s15, [r3]
		y_e = y_d - y;
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <regulacija+0x4dc>)
 8001c50:	ed93 7a00 	vldr	s14, [r3]
 8001c54:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <regulacija+0x4e0>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5e:	4b45      	ldr	r3, [pc, #276]	; (8001d74 <regulacija+0x4e4>)
 8001c60:	edc3 7a00 	vstr	s15, [r3]

		x_el = x_e*cosf(teta) + y_e*sinf(teta);
 8001c64:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <regulacija+0x4e8>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	f003 f8df 	bl	8004e30 <cosf>
 8001c72:	eeb0 7a40 	vmov.f32	s14, s0
 8001c76:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <regulacija+0x4d8>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <regulacija+0x4e8>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8a:	f003 f911 	bl	8004eb0 <sinf>
 8001c8e:	eeb0 7a40 	vmov.f32	s14, s0
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <regulacija+0x4e4>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <regulacija+0x4ec>)
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
		y_el = -x_e*sinf(teta) + y_e*cosf(teta);
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <regulacija+0x4d8>)
 8001ca8:	edd3 7a00 	vldr	s15, [r3]
 8001cac:	eeb1 8a67 	vneg.f32	s16, s15
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <regulacija+0x4e8>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cba:	f003 f8f9 	bl	8004eb0 <sinf>
 8001cbe:	eef0 7a40 	vmov.f32	s15, s0
 8001cc2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <regulacija+0x4e8>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd0:	f003 f8ae 	bl	8004e30 <cosf>
 8001cd4:	eeb0 7a40 	vmov.f32	s14, s0
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <regulacija+0x4e4>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <regulacija+0x4f0>)
 8001ce8:	edc3 7a00 	vstr	s15, [r3]

		if (smer == 1){
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <regulacija+0x4f4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d14b      	bne.n	8001d8c <regulacija+0x4fc>
			t_ce = atan2f(y_el, x_el);
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <regulacija+0x4f0>)
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <regulacija+0x4ec>)
 8001cfc:	ed93 7a00 	vldr	s14, [r3]
 8001d00:	eef0 0a47 	vmov.f32	s1, s14
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	f003 f96e 	bl	8004fe8 <atan2f>
 8001d0c:	eef0 7a40 	vmov.f32	s15, s0
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <regulacija+0x4f8>)
 8001d12:	edc3 7a00 	vstr	s15, [r3]
 8001d16:	e052      	b.n	8001dbe <regulacija+0x52e>
 8001d18:	769cf0e0 	.word	0x769cf0e0
 8001d1c:	3fc41b2f 	.word	0x3fc41b2f
 8001d20:	20000174 	.word	0x20000174
 8001d24:	200000e0 	.word	0x200000e0
 8001d28:	200000c0 	.word	0x200000c0
 8001d2c:	20000160 	.word	0x20000160
 8001d30:	200000c4 	.word	0x200000c4
 8001d34:	200000c8 	.word	0x200000c8
 8001d38:	20000168 	.word	0x20000168
 8001d3c:	200000d4 	.word	0x200000d4
 8001d40:	200000cc 	.word	0x200000cc
 8001d44:	2000000c 	.word	0x2000000c
 8001d48:	20000170 	.word	0x20000170
 8001d4c:	200000ec 	.word	0x200000ec
 8001d50:	20000180 	.word	0x20000180
 8001d54:	2000016c 	.word	0x2000016c
 8001d58:	2000017c 	.word	0x2000017c
 8001d5c:	20000178 	.word	0x20000178
 8001d60:	2000018c 	.word	0x2000018c
 8001d64:	20000144 	.word	0x20000144
 8001d68:	200000f0 	.word	0x200000f0
 8001d6c:	20000184 	.word	0x20000184
 8001d70:	20000154 	.word	0x20000154
 8001d74:	200000fc 	.word	0x200000fc
 8001d78:	2000015c 	.word	0x2000015c
 8001d7c:	200000f4 	.word	0x200000f4
 8001d80:	200000f8 	.word	0x200000f8
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000188 	.word	0x20000188
		} else if (smer == 2){
 8001d8c:	4bbe      	ldr	r3, [pc, #760]	; (8002088 <regulacija+0x7f8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d114      	bne.n	8001dbe <regulacija+0x52e>
			t_ce = atan2f(-y_el, -x_el);
 8001d94:	4bbd      	ldr	r3, [pc, #756]	; (800208c <regulacija+0x7fc>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	eeb1 7a67 	vneg.f32	s14, s15
 8001d9e:	4bbc      	ldr	r3, [pc, #752]	; (8002090 <regulacija+0x800>)
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	eef1 7a67 	vneg.f32	s15, s15
 8001da8:	eef0 0a67 	vmov.f32	s1, s15
 8001dac:	eeb0 0a47 	vmov.f32	s0, s14
 8001db0:	f003 f91a 	bl	8004fe8 <atan2f>
 8001db4:	eef0 7a40 	vmov.f32	s15, s0
 8001db8:	4bb6      	ldr	r3, [pc, #728]	; (8002094 <regulacija+0x804>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
		}

		if (t_ce < -M_PI)
 8001dbe:	4bb5      	ldr	r3, [pc, #724]	; (8002094 <regulacija+0x804>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fb6c 	bl	80004a0 <__aeabi_f2d>
 8001dc8:	a3a7      	add	r3, pc, #668	; (adr r3, 8002068 <regulacija+0x7d8>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fe31 	bl	8000a34 <__aeabi_dcmplt>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d012      	beq.n	8001dfe <regulacija+0x56e>
			t_ce += 2 * M_PI;
 8001dd8:	4bae      	ldr	r3, [pc, #696]	; (8002094 <regulacija+0x804>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fb5f 	bl	80004a0 <__aeabi_f2d>
 8001de2:	a3a3      	add	r3, pc, #652	; (adr r3, 8002070 <regulacija+0x7e0>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	f7fe f9fc 	bl	80001e4 <__adddf3>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7fe fe84 	bl	8000b00 <__aeabi_d2f>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4ba6      	ldr	r3, [pc, #664]	; (8002094 <regulacija+0x804>)
 8001dfc:	601a      	str	r2, [r3, #0]
		if (t_ce > M_PI)
 8001dfe:	4ba5      	ldr	r3, [pc, #660]	; (8002094 <regulacija+0x804>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fb4c 	bl	80004a0 <__aeabi_f2d>
 8001e08:	a39b      	add	r3, pc, #620	; (adr r3, 8002078 <regulacija+0x7e8>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fe2f 	bl	8000a70 <__aeabi_dcmpgt>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <regulacija+0x5ae>
			t_ce -= 2 * M_PI;
 8001e18:	4b9e      	ldr	r3, [pc, #632]	; (8002094 <regulacija+0x804>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb3f 	bl	80004a0 <__aeabi_f2d>
 8001e22:	a393      	add	r3, pc, #588	; (adr r3, 8002070 <regulacija+0x7e0>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe f9da 	bl	80001e0 <__aeabi_dsub>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7fe fe64 	bl	8000b00 <__aeabi_d2f>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b96      	ldr	r3, [pc, #600]	; (8002094 <regulacija+0x804>)
 8001e3c:	601a      	str	r2, [r3, #0]

		if(smer == 1){
 8001e3e:	4b92      	ldr	r3, [pc, #584]	; (8002088 <regulacija+0x7f8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d12c      	bne.n	8001ea0 <regulacija+0x610>
			d_e = sqrt(x_el * x_el + y_el * y_el) / 1000; //u metrima
 8001e46:	4b92      	ldr	r3, [pc, #584]	; (8002090 <regulacija+0x800>)
 8001e48:	ed93 7a00 	vldr	s14, [r3]
 8001e4c:	4b90      	ldr	r3, [pc, #576]	; (8002090 <regulacija+0x800>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e56:	4b8d      	ldr	r3, [pc, #564]	; (800208c <regulacija+0x7fc>)
 8001e58:	edd3 6a00 	vldr	s13, [r3]
 8001e5c:	4b8b      	ldr	r3, [pc, #556]	; (800208c <regulacija+0x7fc>)
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6a:	ee17 0a90 	vmov	r0, s15
 8001e6e:	f7fe fb17 	bl	80004a0 <__aeabi_f2d>
 8001e72:	4603      	mov	r3, r0
 8001e74:	460c      	mov	r4, r1
 8001e76:	ec44 3b10 	vmov	d0, r3, r4
 8001e7a:	f003 f85b 	bl	8004f34 <sqrt>
 8001e7e:	ec51 0b10 	vmov	r0, r1, d0
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4b84      	ldr	r3, [pc, #528]	; (8002098 <regulacija+0x808>)
 8001e88:	f7fe fc8c 	bl	80007a4 <__aeabi_ddiv>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	460c      	mov	r4, r1
 8001e90:	4618      	mov	r0, r3
 8001e92:	4621      	mov	r1, r4
 8001e94:	f7fe fe34 	bl	8000b00 <__aeabi_d2f>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b80      	ldr	r3, [pc, #512]	; (800209c <regulacija+0x80c>)
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e034      	b.n	8001f0a <regulacija+0x67a>
		} else if(smer == 2){
 8001ea0:	4b79      	ldr	r3, [pc, #484]	; (8002088 <regulacija+0x7f8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d130      	bne.n	8001f0a <regulacija+0x67a>
			d_e = -sqrt(x_el * x_el + y_el * y_el) / 1000;
 8001ea8:	4b79      	ldr	r3, [pc, #484]	; (8002090 <regulacija+0x800>)
 8001eaa:	ed93 7a00 	vldr	s14, [r3]
 8001eae:	4b78      	ldr	r3, [pc, #480]	; (8002090 <regulacija+0x800>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb8:	4b74      	ldr	r3, [pc, #464]	; (800208c <regulacija+0x7fc>)
 8001eba:	edd3 6a00 	vldr	s13, [r3]
 8001ebe:	4b73      	ldr	r3, [pc, #460]	; (800208c <regulacija+0x7fc>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ecc:	ee17 0a90 	vmov	r0, s15
 8001ed0:	f7fe fae6 	bl	80004a0 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	ec43 2b10 	vmov	d0, r2, r3
 8001edc:	f003 f82a 	bl	8004f34 <sqrt>
 8001ee0:	ec53 2b10 	vmov	r2, r3, d0
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <regulacija+0x808>)
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	f7fe fc56 	bl	80007a4 <__aeabi_ddiv>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	460c      	mov	r4, r1
 8001efc:	4618      	mov	r0, r3
 8001efe:	4621      	mov	r1, r4
 8001f00:	f7fe fdfe 	bl	8000b00 <__aeabi_d2f>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b65      	ldr	r3, [pc, #404]	; (800209c <regulacija+0x80c>)
 8001f08:	601a      	str	r2, [r3, #0]
		}

		if (fabs (t_ce) > (M_PI /2) )
 8001f0a:	4b62      	ldr	r3, [pc, #392]	; (8002094 <regulacija+0x804>)
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	eef0 7ae7 	vabs.f32	s15, s15
 8001f14:	ee17 0a90 	vmov	r0, s15
 8001f18:	f7fe fac2 	bl	80004a0 <__aeabi_f2d>
 8001f1c:	a358      	add	r3, pc, #352	; (adr r3, 8002080 <regulacija+0x7f0>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe fda5 	bl	8000a70 <__aeabi_dcmpgt>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d036      	beq.n	8001f9a <regulacija+0x70a>
		     // if ((theta_ce > ((M_PI/2) + teta)) || (theta_ce < (-(M_PI/2) + teta)))
			{
			      d_e *= -1;
 8001f2c:	4b5b      	ldr	r3, [pc, #364]	; (800209c <regulacija+0x80c>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	eef1 7a67 	vneg.f32	s15, s15
 8001f36:	4b59      	ldr	r3, [pc, #356]	; (800209c <regulacija+0x80c>)
 8001f38:	edc3 7a00 	vstr	s15, [r3]
			    if(t_ce>0)
 8001f3c:	4b55      	ldr	r3, [pc, #340]	; (8002094 <regulacija+0x804>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4a:	dd13      	ble.n	8001f74 <regulacija+0x6e4>
				t_ce -= M_PI;
 8001f4c:	4b51      	ldr	r3, [pc, #324]	; (8002094 <regulacija+0x804>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe faa5 	bl	80004a0 <__aeabi_f2d>
 8001f56:	a348      	add	r3, pc, #288	; (adr r3, 8002078 <regulacija+0x7e8>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe f940 	bl	80001e0 <__aeabi_dsub>
 8001f60:	4603      	mov	r3, r0
 8001f62:	460c      	mov	r4, r1
 8001f64:	4618      	mov	r0, r3
 8001f66:	4621      	mov	r1, r4
 8001f68:	f7fe fdca 	bl	8000b00 <__aeabi_d2f>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b49      	ldr	r3, [pc, #292]	; (8002094 <regulacija+0x804>)
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e012      	b.n	8001f9a <regulacija+0x70a>
			      else
				t_ce += M_PI;
 8001f74:	4b47      	ldr	r3, [pc, #284]	; (8002094 <regulacija+0x804>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fa91 	bl	80004a0 <__aeabi_f2d>
 8001f7e:	a33e      	add	r3, pc, #248	; (adr r3, 8002078 <regulacija+0x7e8>)
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	f7fe f92e 	bl	80001e4 <__adddf3>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	460c      	mov	r4, r1
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4621      	mov	r1, r4
 8001f90:	f7fe fdb6 	bl	8000b00 <__aeabi_d2f>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <regulacija+0x804>)
 8001f98:	601a      	str	r2, [r3, #0]
			 }

		teta_e = t_ce;
 8001f9a:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <regulacija+0x804>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <regulacija+0x810>)
 8001fa0:	6013      	str	r3, [r2, #0]
		teta_ei += teta_e;
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <regulacija+0x810>)
 8001fa4:	ed93 7a00 	vldr	s14, [r3]
 8001fa8:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <regulacija+0x814>)
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb2:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <regulacija+0x814>)
 8001fb4:	edc3 7a00 	vstr	s15, [r3]
		teta_de = teta_e - teta_de_p;				//tde pi/2 -pi/4
 8001fb8:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <regulacija+0x810>)
 8001fba:	ed93 7a00 	vldr	s14, [r3]
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <regulacija+0x818>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc8:	4b38      	ldr	r3, [pc, #224]	; (80020ac <regulacija+0x81c>)
 8001fca:	edc3 7a00 	vstr	s15, [r3]
		teta_de_p = teta_e;
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <regulacija+0x810>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a35      	ldr	r2, [pc, #212]	; (80020a8 <regulacija+0x818>)
 8001fd4:	6013      	str	r3, [r2, #0]

		d_ei += d_e;
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <regulacija+0x80c>)
 8001fd8:	ed93 7a00 	vldr	s14, [r3]
 8001fdc:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <regulacija+0x820>)
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe6:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <regulacija+0x820>)
 8001fe8:	edc3 7a00 	vstr	s15, [r3]
		d_de = d_e - d_de_p;				//tde pi/2 -pi/4
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <regulacija+0x80c>)
 8001fee:	ed93 7a00 	vldr	s14, [r3]
 8001ff2:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <regulacija+0x824>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <regulacija+0x828>)
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
		d_de_p = d_e;
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <regulacija+0x80c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <regulacija+0x824>)
 8002008:	6013      	str	r3, [r2, #0]

		if (d_ei > d_ei_max)
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <regulacija+0x820>)
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <regulacija+0x82c>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	dd03      	ble.n	8002028 <regulacija+0x798>
			d_ei = d_ei_max;
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <regulacija+0x82c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <regulacija+0x820>)
 8002026:	6013      	str	r3, [r2, #0]
		if (d_ei < d_ei_min)
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <regulacija+0x820>)
 800202a:	ed93 7a00 	vldr	s14, [r3]
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <regulacija+0x830>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	d503      	bpl.n	8002046 <regulacija+0x7b6>
			d_ei = d_ei_min;
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <regulacija+0x830>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <regulacija+0x820>)
 8002044:	6013      	str	r3, [r2, #0]

		if (teta_ei > teta_ei_max) {
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <regulacija+0x814>)
 8002048:	ed93 7a00 	vldr	s14, [r3]
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <regulacija+0x834>)
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	dd35      	ble.n	80020c8 <regulacija+0x838>
			teta_ei = teta_ei_max;
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <regulacija+0x834>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <regulacija+0x814>)
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e03f      	b.n	80020e6 <regulacija+0x856>
 8002066:	bf00      	nop
 8002068:	54442d18 	.word	0x54442d18
 800206c:	c00921fb 	.word	0xc00921fb
 8002070:	54442d18 	.word	0x54442d18
 8002074:	401921fb 	.word	0x401921fb
 8002078:	54442d18 	.word	0x54442d18
 800207c:	400921fb 	.word	0x400921fb
 8002080:	54442d18 	.word	0x54442d18
 8002084:	3ff921fb 	.word	0x3ff921fb
 8002088:	20000008 	.word	0x20000008
 800208c:	200000f8 	.word	0x200000f8
 8002090:	200000f4 	.word	0x200000f4
 8002094:	20000188 	.word	0x20000188
 8002098:	408f4000 	.word	0x408f4000
 800209c:	20000164 	.word	0x20000164
 80020a0:	20000160 	.word	0x20000160
 80020a4:	20000174 	.word	0x20000174
 80020a8:	2000017c 	.word	0x2000017c
 80020ac:	20000168 	.word	0x20000168
 80020b0:	20000180 	.word	0x20000180
 80020b4:	20000178 	.word	0x20000178
 80020b8:	2000016c 	.word	0x2000016c
 80020bc:	200000e4 	.word	0x200000e4
 80020c0:	200000e8 	.word	0x200000e8
 80020c4:	200000dc 	.word	0x200000dc
		} else if (teta_ei < teta_ei_min) {
 80020c8:	4bb1      	ldr	r3, [pc, #708]	; (8002390 <regulacija+0xb00>)
 80020ca:	ed93 7a00 	vldr	s14, [r3]
 80020ce:	4bb1      	ldr	r3, [pc, #708]	; (8002394 <regulacija+0xb04>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	d503      	bpl.n	80020e6 <regulacija+0x856>
			teta_ei = teta_ei_min;
 80020de:	4bad      	ldr	r3, [pc, #692]	; (8002394 <regulacija+0xb04>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4aab      	ldr	r2, [pc, #684]	; (8002390 <regulacija+0xb00>)
 80020e4:	6013      	str	r3, [r2, #0]
		}

		Vdr = +(Kpd * d_e + Kid * d_ei + Kdd * d_de);
 80020e6:	4bac      	ldr	r3, [pc, #688]	; (8002398 <regulacija+0xb08>)
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	4bab      	ldr	r3, [pc, #684]	; (800239c <regulacija+0xb0c>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f6:	4baa      	ldr	r3, [pc, #680]	; (80023a0 <regulacija+0xb10>)
 80020f8:	edd3 6a00 	vldr	s13, [r3]
 80020fc:	4ba9      	ldr	r3, [pc, #676]	; (80023a4 <regulacija+0xb14>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002106:	ee37 7a27 	vadd.f32	s14, s14, s15
 800210a:	4ba7      	ldr	r3, [pc, #668]	; (80023a8 <regulacija+0xb18>)
 800210c:	edd3 6a00 	vldr	s13, [r3]
 8002110:	4ba6      	ldr	r3, [pc, #664]	; (80023ac <regulacija+0xb1c>)
 8002112:	edd3 7a00 	vldr	s15, [r3]
 8002116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211e:	4ba4      	ldr	r3, [pc, #656]	; (80023b0 <regulacija+0xb20>)
 8002120:	edc3 7a00 	vstr	s15, [r3]
		Vdl = +(Kpd * d_e + Kid * d_ei + Kdd * d_de);
 8002124:	4b9c      	ldr	r3, [pc, #624]	; (8002398 <regulacija+0xb08>)
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	4b9c      	ldr	r3, [pc, #624]	; (800239c <regulacija+0xb0c>)
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002134:	4b9a      	ldr	r3, [pc, #616]	; (80023a0 <regulacija+0xb10>)
 8002136:	edd3 6a00 	vldr	s13, [r3]
 800213a:	4b9a      	ldr	r3, [pc, #616]	; (80023a4 <regulacija+0xb14>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002144:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002148:	4b97      	ldr	r3, [pc, #604]	; (80023a8 <regulacija+0xb18>)
 800214a:	edd3 6a00 	vldr	s13, [r3]
 800214e:	4b97      	ldr	r3, [pc, #604]	; (80023ac <regulacija+0xb1c>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215c:	4b95      	ldr	r3, [pc, #596]	; (80023b4 <regulacija+0xb24>)
 800215e:	edc3 7a00 	vstr	s15, [r3]

		acc = 0.5;
 8002162:	4b95      	ldr	r3, [pc, #596]	; (80023b8 <regulacija+0xb28>)
 8002164:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002168:	601a      	str	r2, [r3, #0]

		if (fabs (d_e) < 0.1)
 800216a:	4b8c      	ldr	r3, [pc, #560]	; (800239c <regulacija+0xb0c>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	eef0 7ae7 	vabs.f32	s15, s15
 8002174:	ee17 0a90 	vmov	r0, s15
 8002178:	f7fe f992 	bl	80004a0 <__aeabi_f2d>
 800217c:	a382      	add	r3, pc, #520	; (adr r3, 8002388 <regulacija+0xaf8>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe fc57 	bl	8000a34 <__aeabi_dcmplt>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <regulacija+0x904>
			acc = 1;
 800218c:	4b8a      	ldr	r3, [pc, #552]	; (80023b8 <regulacija+0xb28>)
 800218e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002192:	601a      	str	r2, [r3, #0]
		//prosledi_pwm(Vdr, Vdl, Vr, Vl);
		if (fabs (d_e) > 0.1)
 8002194:	4b81      	ldr	r3, [pc, #516]	; (800239c <regulacija+0xb0c>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	eef0 7ae7 	vabs.f32	s15, s15
 800219e:	ee17 0a90 	vmov	r0, s15
 80021a2:	f7fe f97d 	bl	80004a0 <__aeabi_f2d>
 80021a6:	a378      	add	r3, pc, #480	; (adr r3, 8002388 <regulacija+0xaf8>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe fc60 	bl	8000a70 <__aeabi_dcmpgt>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d048      	beq.n	8002248 <regulacija+0x9b8>
			{
			  // uticaj orijentacije na regulciju
			  Vdl -= 1 * (Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 80021b6:	4b81      	ldr	r3, [pc, #516]	; (80023bc <regulacija+0xb2c>)
 80021b8:	ed93 7a00 	vldr	s14, [r3]
 80021bc:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <regulacija+0xb30>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021c6:	4b7f      	ldr	r3, [pc, #508]	; (80023c4 <regulacija+0xb34>)
 80021c8:	edd3 6a00 	vldr	s13, [r3]
 80021cc:	4b70      	ldr	r3, [pc, #448]	; (8002390 <regulacija+0xb00>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021da:	4b7b      	ldr	r3, [pc, #492]	; (80023c8 <regulacija+0xb38>)
 80021dc:	edd3 6a00 	vldr	s13, [r3]
 80021e0:	4b7a      	ldr	r3, [pc, #488]	; (80023cc <regulacija+0xb3c>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ee:	4b71      	ldr	r3, [pc, #452]	; (80023b4 <regulacija+0xb24>)
 80021f0:	ed93 7a00 	vldr	s14, [r3]
 80021f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f8:	4b6e      	ldr	r3, [pc, #440]	; (80023b4 <regulacija+0xb24>)
 80021fa:	edc3 7a00 	vstr	s15, [r3]
			  Vdr += 1 * (Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 80021fe:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <regulacija+0xb2c>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	4b6e      	ldr	r3, [pc, #440]	; (80023c0 <regulacija+0xb30>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220e:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <regulacija+0xb34>)
 8002210:	edd3 6a00 	vldr	s13, [r3]
 8002214:	4b5e      	ldr	r3, [pc, #376]	; (8002390 <regulacija+0xb00>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002222:	4b69      	ldr	r3, [pc, #420]	; (80023c8 <regulacija+0xb38>)
 8002224:	edd3 6a00 	vldr	s13, [r3]
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <regulacija+0xb3c>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002236:	4b5e      	ldr	r3, [pc, #376]	; (80023b0 <regulacija+0xb20>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	4b5b      	ldr	r3, [pc, #364]	; (80023b0 <regulacija+0xb20>)
 8002242:	edc3 7a00 	vstr	s15, [r3]
 8002246:	e077      	b.n	8002338 <regulacija+0xaa8>
			}
		      else
			{
			  Vdl -= 0.1 * (Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 8002248:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <regulacija+0xb2c>)
 800224a:	ed93 7a00 	vldr	s14, [r3]
 800224e:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <regulacija+0xb30>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002258:	4b5a      	ldr	r3, [pc, #360]	; (80023c4 <regulacija+0xb34>)
 800225a:	edd3 6a00 	vldr	s13, [r3]
 800225e:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <regulacija+0xb00>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800226c:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <regulacija+0xb38>)
 800226e:	edd3 6a00 	vldr	s13, [r3]
 8002272:	4b56      	ldr	r3, [pc, #344]	; (80023cc <regulacija+0xb3c>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002280:	ee17 0a90 	vmov	r0, s15
 8002284:	f7fe f90c 	bl	80004a0 <__aeabi_f2d>
 8002288:	a33f      	add	r3, pc, #252	; (adr r3, 8002388 <regulacija+0xaf8>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f7fe f95f 	bl	8000550 <__aeabi_dmul>
 8002292:	4603      	mov	r3, r0
 8002294:	460c      	mov	r4, r1
 8002296:	4625      	mov	r5, r4
 8002298:	461c      	mov	r4, r3
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <regulacija+0xb24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f8fe 	bl	80004a0 <__aeabi_f2d>
 80022a4:	4622      	mov	r2, r4
 80022a6:	462b      	mov	r3, r5
 80022a8:	f7fd ff9a 	bl	80001e0 <__aeabi_dsub>
 80022ac:	4603      	mov	r3, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	4618      	mov	r0, r3
 80022b2:	4621      	mov	r1, r4
 80022b4:	f7fe fc24 	bl	8000b00 <__aeabi_d2f>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <regulacija+0xb24>)
 80022bc:	601a      	str	r2, [r3, #0]
			  Vdr += 0.1 * (Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 80022be:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <regulacija+0xb2c>)
 80022c0:	ed93 7a00 	vldr	s14, [r3]
 80022c4:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <regulacija+0xb30>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ce:	4b3d      	ldr	r3, [pc, #244]	; (80023c4 <regulacija+0xb34>)
 80022d0:	edd3 6a00 	vldr	s13, [r3]
 80022d4:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <regulacija+0xb00>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <regulacija+0xb38>)
 80022e4:	edd3 6a00 	vldr	s13, [r3]
 80022e8:	4b38      	ldr	r3, [pc, #224]	; (80023cc <regulacija+0xb3c>)
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f6:	ee17 0a90 	vmov	r0, s15
 80022fa:	f7fe f8d1 	bl	80004a0 <__aeabi_f2d>
 80022fe:	a322      	add	r3, pc, #136	; (adr r3, 8002388 <regulacija+0xaf8>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	f7fe f924 	bl	8000550 <__aeabi_dmul>
 8002308:	4603      	mov	r3, r0
 800230a:	460c      	mov	r4, r1
 800230c:	4625      	mov	r5, r4
 800230e:	461c      	mov	r4, r3
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <regulacija+0xb20>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f8c3 	bl	80004a0 <__aeabi_f2d>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4620      	mov	r0, r4
 8002320:	4629      	mov	r1, r5
 8002322:	f7fd ff5f 	bl	80001e4 <__adddf3>
 8002326:	4603      	mov	r3, r0
 8002328:	460c      	mov	r4, r1
 800232a:	4618      	mov	r0, r3
 800232c:	4621      	mov	r1, r4
 800232e:	f7fe fbe7 	bl	8000b00 <__aeabi_d2f>
 8002332:	4602      	mov	r2, r0
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <regulacija+0xb20>)
 8002336:	601a      	str	r2, [r3, #0]
			}

		if (fabs(d_e) < d_e_min) {
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <regulacija+0xb0c>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <regulacija+0xb40>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	f140 8298 	bpl.w	8002884 <regulacija+0xff4>
			acc = 1;
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <regulacija+0xb28>)
 8002356:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800235a:	601a      	str	r2, [r3, #0]
			//medju_stanje();
			teta_ei = 0;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <regulacija+0xb00>)
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
			d_ei = 0;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <regulacija+0xb14>)
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
			faza = 2;
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <regulacija+0xb44>)
 800236e:	2202      	movs	r2, #2
 8002370:	601a      	str	r2, [r3, #0]
			d_de_p = 0;
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <regulacija+0xb48>)
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
			teta_de_p = 0;
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <regulacija+0xb4c>)
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e27f      	b.n	8002884 <regulacija+0xff4>
 8002384:	f3af 8000 	nop.w
 8002388:	9999999a 	.word	0x9999999a
 800238c:	3fb99999 	.word	0x3fb99999
 8002390:	20000174 	.word	0x20000174
 8002394:	200000e0 	.word	0x200000e0
 8002398:	200000b4 	.word	0x200000b4
 800239c:	20000164 	.word	0x20000164
 80023a0:	200000b8 	.word	0x200000b8
 80023a4:	20000180 	.word	0x20000180
 80023a8:	200000bc 	.word	0x200000bc
 80023ac:	2000016c 	.word	0x2000016c
 80023b0:	200000d4 	.word	0x200000d4
 80023b4:	200000cc 	.word	0x200000cc
 80023b8:	2000000c 	.word	0x2000000c
 80023bc:	200000c0 	.word	0x200000c0
 80023c0:	20000160 	.word	0x20000160
 80023c4:	200000c4 	.word	0x200000c4
 80023c8:	200000c8 	.word	0x200000c8
 80023cc:	20000168 	.word	0x20000168
 80023d0:	20000004 	.word	0x20000004
 80023d4:	200000ec 	.word	0x200000ec
 80023d8:	20000178 	.word	0x20000178
 80023dc:	2000017c 	.word	0x2000017c
		}

	}
	else if ((faza == 2)||(faza == 3)) {
 80023e0:	4b87      	ldr	r3, [pc, #540]	; (8002600 <regulacija+0xd70>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d004      	beq.n	80023f2 <regulacija+0xb62>
 80023e8:	4b85      	ldr	r3, [pc, #532]	; (8002600 <regulacija+0xd70>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	f040 8249 	bne.w	8002884 <regulacija+0xff4>

		x_e = x_d - x;
 80023f2:	4b84      	ldr	r3, [pc, #528]	; (8002604 <regulacija+0xd74>)
 80023f4:	ed93 7a00 	vldr	s14, [r3]
 80023f8:	4b83      	ldr	r3, [pc, #524]	; (8002608 <regulacija+0xd78>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002402:	4b82      	ldr	r3, [pc, #520]	; (800260c <regulacija+0xd7c>)
 8002404:	edc3 7a00 	vstr	s15, [r3]
		y_e = y_d - y;
 8002408:	4b81      	ldr	r3, [pc, #516]	; (8002610 <regulacija+0xd80>)
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	4b81      	ldr	r3, [pc, #516]	; (8002614 <regulacija+0xd84>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002418:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <regulacija+0xd88>)
 800241a:	edc3 7a00 	vstr	s15, [r3]

		x_el = x_e*cosf(teta) + y_e*sinf(teta);
 800241e:	4b7f      	ldr	r3, [pc, #508]	; (800261c <regulacija+0xd8c>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	eeb0 0a67 	vmov.f32	s0, s15
 8002428:	f002 fd02 	bl	8004e30 <cosf>
 800242c:	eeb0 7a40 	vmov.f32	s14, s0
 8002430:	4b76      	ldr	r3, [pc, #472]	; (800260c <regulacija+0xd7c>)
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	ee27 8a27 	vmul.f32	s16, s14, s15
 800243a:	4b78      	ldr	r3, [pc, #480]	; (800261c <regulacija+0xd8c>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	eeb0 0a67 	vmov.f32	s0, s15
 8002444:	f002 fd34 	bl	8004eb0 <sinf>
 8002448:	eeb0 7a40 	vmov.f32	s14, s0
 800244c:	4b72      	ldr	r3, [pc, #456]	; (8002618 <regulacija+0xd88>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002456:	ee78 7a27 	vadd.f32	s15, s16, s15
 800245a:	4b71      	ldr	r3, [pc, #452]	; (8002620 <regulacija+0xd90>)
 800245c:	edc3 7a00 	vstr	s15, [r3]
		y_el = -x_e*sinf(teta) + y_e*cosf(teta);
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <regulacija+0xd7c>)
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	eeb1 8a67 	vneg.f32	s16, s15
 800246a:	4b6c      	ldr	r3, [pc, #432]	; (800261c <regulacija+0xd8c>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	eeb0 0a67 	vmov.f32	s0, s15
 8002474:	f002 fd1c 	bl	8004eb0 <sinf>
 8002478:	eef0 7a40 	vmov.f32	s15, s0
 800247c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002480:	4b66      	ldr	r3, [pc, #408]	; (800261c <regulacija+0xd8c>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	eeb0 0a67 	vmov.f32	s0, s15
 800248a:	f002 fcd1 	bl	8004e30 <cosf>
 800248e:	eeb0 7a40 	vmov.f32	s14, s0
 8002492:	4b61      	ldr	r3, [pc, #388]	; (8002618 <regulacija+0xd88>)
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	ee78 7a27 	vadd.f32	s15, s16, s15
 80024a0:	4b60      	ldr	r3, [pc, #384]	; (8002624 <regulacija+0xd94>)
 80024a2:	edc3 7a00 	vstr	s15, [r3]
		d_e = sqrt(x_el * x_el + y_el * y_el) / 1000; //u metrima
 80024a6:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <regulacija+0xd90>)
 80024a8:	ed93 7a00 	vldr	s14, [r3]
 80024ac:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <regulacija+0xd90>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024b6:	4b5b      	ldr	r3, [pc, #364]	; (8002624 <regulacija+0xd94>)
 80024b8:	edd3 6a00 	vldr	s13, [r3]
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <regulacija+0xd94>)
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ca:	ee17 0a90 	vmov	r0, s15
 80024ce:	f7fd ffe7 	bl	80004a0 <__aeabi_f2d>
 80024d2:	4603      	mov	r3, r0
 80024d4:	460c      	mov	r4, r1
 80024d6:	ec44 3b10 	vmov	d0, r3, r4
 80024da:	f002 fd2b 	bl	8004f34 <sqrt>
 80024de:	ec51 0b10 	vmov	r0, r1, d0
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	4b50      	ldr	r3, [pc, #320]	; (8002628 <regulacija+0xd98>)
 80024e8:	f7fe f95c 	bl	80007a4 <__aeabi_ddiv>
 80024ec:	4603      	mov	r3, r0
 80024ee:	460c      	mov	r4, r1
 80024f0:	4618      	mov	r0, r3
 80024f2:	4621      	mov	r1, r4
 80024f4:	f7fe fb04 	bl	8000b00 <__aeabi_d2f>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b4c      	ldr	r3, [pc, #304]	; (800262c <regulacija+0xd9c>)
 80024fc:	601a      	str	r2, [r3, #0]

		teta_e = teta_d - teta;
 80024fe:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <regulacija+0xda0>)
 8002500:	ed93 7a00 	vldr	s14, [r3]
 8002504:	4b45      	ldr	r3, [pc, #276]	; (800261c <regulacija+0xd8c>)
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250e:	4b49      	ldr	r3, [pc, #292]	; (8002634 <regulacija+0xda4>)
 8002510:	edc3 7a00 	vstr	s15, [r3]

		if (teta_e < -M_PI)
 8002514:	4b47      	ldr	r3, [pc, #284]	; (8002634 <regulacija+0xda4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd ffc1 	bl	80004a0 <__aeabi_f2d>
 800251e:	a332      	add	r3, pc, #200	; (adr r3, 80025e8 <regulacija+0xd58>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe fa86 	bl	8000a34 <__aeabi_dcmplt>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d012      	beq.n	8002554 <regulacija+0xcc4>
			teta_e += 2 * M_PI;
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <regulacija+0xda4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd ffb4 	bl	80004a0 <__aeabi_f2d>
 8002538:	a32d      	add	r3, pc, #180	; (adr r3, 80025f0 <regulacija+0xd60>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fd fe51 	bl	80001e4 <__adddf3>
 8002542:	4603      	mov	r3, r0
 8002544:	460c      	mov	r4, r1
 8002546:	4618      	mov	r0, r3
 8002548:	4621      	mov	r1, r4
 800254a:	f7fe fad9 	bl	8000b00 <__aeabi_d2f>
 800254e:	4602      	mov	r2, r0
 8002550:	4b38      	ldr	r3, [pc, #224]	; (8002634 <regulacija+0xda4>)
 8002552:	601a      	str	r2, [r3, #0]
		if (teta_e > M_PI)
 8002554:	4b37      	ldr	r3, [pc, #220]	; (8002634 <regulacija+0xda4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd ffa1 	bl	80004a0 <__aeabi_f2d>
 800255e:	a326      	add	r3, pc, #152	; (adr r3, 80025f8 <regulacija+0xd68>)
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	f7fe fa84 	bl	8000a70 <__aeabi_dcmpgt>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d012      	beq.n	8002594 <regulacija+0xd04>
			teta_e -= 2 * M_PI;
 800256e:	4b31      	ldr	r3, [pc, #196]	; (8002634 <regulacija+0xda4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd ff94 	bl	80004a0 <__aeabi_f2d>
 8002578:	a31d      	add	r3, pc, #116	; (adr r3, 80025f0 <regulacija+0xd60>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	f7fd fe2f 	bl	80001e0 <__aeabi_dsub>
 8002582:	4603      	mov	r3, r0
 8002584:	460c      	mov	r4, r1
 8002586:	4618      	mov	r0, r3
 8002588:	4621      	mov	r1, r4
 800258a:	f7fe fab9 	bl	8000b00 <__aeabi_d2f>
 800258e:	4602      	mov	r2, r0
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <regulacija+0xda4>)
 8002592:	601a      	str	r2, [r3, #0]

		teta_ei += teta_e;
 8002594:	4b27      	ldr	r3, [pc, #156]	; (8002634 <regulacija+0xda4>)
 8002596:	ed93 7a00 	vldr	s14, [r3]
 800259a:	4b27      	ldr	r3, [pc, #156]	; (8002638 <regulacija+0xda8>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <regulacija+0xda8>)
 80025a6:	edc3 7a00 	vstr	s15, [r3]
		teta_de = teta_e - teta_de_p; //tde pi/2 -pi/4
 80025aa:	4b22      	ldr	r3, [pc, #136]	; (8002634 <regulacija+0xda4>)
 80025ac:	ed93 7a00 	vldr	s14, [r3]
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <regulacija+0xdac>)
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <regulacija+0xdb0>)
 80025bc:	edc3 7a00 	vstr	s15, [r3]
		teta_de_p = teta_e;
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <regulacija+0xda4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <regulacija+0xdac>)
 80025c6:	6013      	str	r3, [r2, #0]

		if (teta_ei > teta_ei_max) {
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <regulacija+0xda8>)
 80025ca:	ed93 7a00 	vldr	s14, [r3]
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <regulacija+0xdb4>)
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	dd34      	ble.n	8002648 <regulacija+0xdb8>
			teta_ei = teta_ei_max;
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <regulacija+0xdb4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <regulacija+0xda8>)
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e03e      	b.n	8002666 <regulacija+0xdd6>
 80025e8:	54442d18 	.word	0x54442d18
 80025ec:	c00921fb 	.word	0xc00921fb
 80025f0:	54442d18 	.word	0x54442d18
 80025f4:	401921fb 	.word	0x401921fb
 80025f8:	54442d18 	.word	0x54442d18
 80025fc:	400921fb 	.word	0x400921fb
 8002600:	200000ec 	.word	0x200000ec
 8002604:	2000018c 	.word	0x2000018c
 8002608:	20000144 	.word	0x20000144
 800260c:	200000f0 	.word	0x200000f0
 8002610:	20000184 	.word	0x20000184
 8002614:	20000154 	.word	0x20000154
 8002618:	200000fc 	.word	0x200000fc
 800261c:	2000015c 	.word	0x2000015c
 8002620:	200000f4 	.word	0x200000f4
 8002624:	200000f8 	.word	0x200000f8
 8002628:	408f4000 	.word	0x408f4000
 800262c:	20000164 	.word	0x20000164
 8002630:	20000190 	.word	0x20000190
 8002634:	20000160 	.word	0x20000160
 8002638:	20000174 	.word	0x20000174
 800263c:	2000017c 	.word	0x2000017c
 8002640:	20000168 	.word	0x20000168
 8002644:	200000dc 	.word	0x200000dc
		} else if (teta_ei < teta_ei_min) {
 8002648:	4baf      	ldr	r3, [pc, #700]	; (8002908 <regulacija+0x1078>)
 800264a:	ed93 7a00 	vldr	s14, [r3]
 800264e:	4baf      	ldr	r3, [pc, #700]	; (800290c <regulacija+0x107c>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265c:	d503      	bpl.n	8002666 <regulacija+0xdd6>
			teta_ei = teta_ei_min;
 800265e:	4bab      	ldr	r3, [pc, #684]	; (800290c <regulacija+0x107c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4aa9      	ldr	r2, [pc, #676]	; (8002908 <regulacija+0x1078>)
 8002664:	6013      	str	r3, [r2, #0]
		}

		Vdr = +(Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 8002666:	4baa      	ldr	r3, [pc, #680]	; (8002910 <regulacija+0x1080>)
 8002668:	ed93 7a00 	vldr	s14, [r3]
 800266c:	4ba9      	ldr	r3, [pc, #676]	; (8002914 <regulacija+0x1084>)
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002676:	4ba8      	ldr	r3, [pc, #672]	; (8002918 <regulacija+0x1088>)
 8002678:	edd3 6a00 	vldr	s13, [r3]
 800267c:	4ba2      	ldr	r3, [pc, #648]	; (8002908 <regulacija+0x1078>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800268a:	4ba4      	ldr	r3, [pc, #656]	; (800291c <regulacija+0x108c>)
 800268c:	edd3 6a00 	vldr	s13, [r3]
 8002690:	4ba3      	ldr	r3, [pc, #652]	; (8002920 <regulacija+0x1090>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269e:	4ba1      	ldr	r3, [pc, #644]	; (8002924 <regulacija+0x1094>)
 80026a0:	edc3 7a00 	vstr	s15, [r3]
		Vdl = -(Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 80026a4:	4b9a      	ldr	r3, [pc, #616]	; (8002910 <regulacija+0x1080>)
 80026a6:	ed93 7a00 	vldr	s14, [r3]
 80026aa:	4b9a      	ldr	r3, [pc, #616]	; (8002914 <regulacija+0x1084>)
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b4:	4b98      	ldr	r3, [pc, #608]	; (8002918 <regulacija+0x1088>)
 80026b6:	edd3 6a00 	vldr	s13, [r3]
 80026ba:	4b93      	ldr	r3, [pc, #588]	; (8002908 <regulacija+0x1078>)
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c8:	4b94      	ldr	r3, [pc, #592]	; (800291c <regulacija+0x108c>)
 80026ca:	edd3 6a00 	vldr	s13, [r3]
 80026ce:	4b94      	ldr	r3, [pc, #592]	; (8002920 <regulacija+0x1090>)
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026dc:	eef1 7a67 	vneg.f32	s15, s15
 80026e0:	4b91      	ldr	r3, [pc, #580]	; (8002928 <regulacija+0x1098>)
 80026e2:	edc3 7a00 	vstr	s15, [r3]


		if(faza == 3)
 80026e6:	4b91      	ldr	r3, [pc, #580]	; (800292c <regulacija+0x109c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	f040 8090 	bne.w	8002810 <regulacija+0xf80>
		{
			if (x_el<0){
 80026f0:	4b8f      	ldr	r3, [pc, #572]	; (8002930 <regulacija+0x10a0>)
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	d507      	bpl.n	8002710 <regulacija+0xe80>
				d_e*=-1;
 8002700:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <regulacija+0x10a4>)
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	eef1 7a67 	vneg.f32	s15, s15
 800270a:	4b8a      	ldr	r3, [pc, #552]	; (8002934 <regulacija+0x10a4>)
 800270c:	edc3 7a00 	vstr	s15, [r3]
			}
			d_ei += d_e;
 8002710:	4b88      	ldr	r3, [pc, #544]	; (8002934 <regulacija+0x10a4>)
 8002712:	ed93 7a00 	vldr	s14, [r3]
 8002716:	4b88      	ldr	r3, [pc, #544]	; (8002938 <regulacija+0x10a8>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002720:	4b85      	ldr	r3, [pc, #532]	; (8002938 <regulacija+0x10a8>)
 8002722:	edc3 7a00 	vstr	s15, [r3]
			d_de = d_e - d_de_p;				//tde pi/2 -pi/4
 8002726:	4b83      	ldr	r3, [pc, #524]	; (8002934 <regulacija+0x10a4>)
 8002728:	ed93 7a00 	vldr	s14, [r3]
 800272c:	4b83      	ldr	r3, [pc, #524]	; (800293c <regulacija+0x10ac>)
 800272e:	edd3 7a00 	vldr	s15, [r3]
 8002732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002736:	4b82      	ldr	r3, [pc, #520]	; (8002940 <regulacija+0x10b0>)
 8002738:	edc3 7a00 	vstr	s15, [r3]
			d_de_p = d_e;
 800273c:	4b7d      	ldr	r3, [pc, #500]	; (8002934 <regulacija+0x10a4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a7e      	ldr	r2, [pc, #504]	; (800293c <regulacija+0x10ac>)
 8002742:	6013      	str	r3, [r2, #0]

			if (d_ei > d_ei_max)
 8002744:	4b7c      	ldr	r3, [pc, #496]	; (8002938 <regulacija+0x10a8>)
 8002746:	ed93 7a00 	vldr	s14, [r3]
 800274a:	4b7e      	ldr	r3, [pc, #504]	; (8002944 <regulacija+0x10b4>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002758:	dd03      	ble.n	8002762 <regulacija+0xed2>
				d_ei = d_ei_max;
 800275a:	4b7a      	ldr	r3, [pc, #488]	; (8002944 <regulacija+0x10b4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a76      	ldr	r2, [pc, #472]	; (8002938 <regulacija+0x10a8>)
 8002760:	6013      	str	r3, [r2, #0]
			if (d_ei < d_ei_min)
 8002762:	4b75      	ldr	r3, [pc, #468]	; (8002938 <regulacija+0x10a8>)
 8002764:	ed93 7a00 	vldr	s14, [r3]
 8002768:	4b77      	ldr	r3, [pc, #476]	; (8002948 <regulacija+0x10b8>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	d503      	bpl.n	8002780 <regulacija+0xef0>
				d_ei = d_ei_min;
 8002778:	4b73      	ldr	r3, [pc, #460]	; (8002948 <regulacija+0x10b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a6e      	ldr	r2, [pc, #440]	; (8002938 <regulacija+0x10a8>)
 800277e:	6013      	str	r3, [r2, #0]

			Vdr += (Kpd * d_e + Kid * d_ei + Kdd * d_de);
 8002780:	4b72      	ldr	r3, [pc, #456]	; (800294c <regulacija+0x10bc>)
 8002782:	ed93 7a00 	vldr	s14, [r3]
 8002786:	4b6b      	ldr	r3, [pc, #428]	; (8002934 <regulacija+0x10a4>)
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002790:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <regulacija+0x10c0>)
 8002792:	edd3 6a00 	vldr	s13, [r3]
 8002796:	4b68      	ldr	r3, [pc, #416]	; (8002938 <regulacija+0x10a8>)
 8002798:	edd3 7a00 	vldr	s15, [r3]
 800279c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a4:	4b6b      	ldr	r3, [pc, #428]	; (8002954 <regulacija+0x10c4>)
 80027a6:	edd3 6a00 	vldr	s13, [r3]
 80027aa:	4b65      	ldr	r3, [pc, #404]	; (8002940 <regulacija+0x10b0>)
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b8:	4b5a      	ldr	r3, [pc, #360]	; (8002924 <regulacija+0x1094>)
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c2:	4b58      	ldr	r3, [pc, #352]	; (8002924 <regulacija+0x1094>)
 80027c4:	edc3 7a00 	vstr	s15, [r3]
			Vdl += (Kpd * d_e + Kid * d_ei + Kdd * d_de);
 80027c8:	4b60      	ldr	r3, [pc, #384]	; (800294c <regulacija+0x10bc>)
 80027ca:	ed93 7a00 	vldr	s14, [r3]
 80027ce:	4b59      	ldr	r3, [pc, #356]	; (8002934 <regulacija+0x10a4>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d8:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <regulacija+0x10c0>)
 80027da:	edd3 6a00 	vldr	s13, [r3]
 80027de:	4b56      	ldr	r3, [pc, #344]	; (8002938 <regulacija+0x10a8>)
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ec:	4b59      	ldr	r3, [pc, #356]	; (8002954 <regulacija+0x10c4>)
 80027ee:	edd3 6a00 	vldr	s13, [r3]
 80027f2:	4b53      	ldr	r3, [pc, #332]	; (8002940 <regulacija+0x10b0>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002800:	4b49      	ldr	r3, [pc, #292]	; (8002928 <regulacija+0x1098>)
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <regulacija+0x1098>)
 800280c:	edc3 7a00 	vstr	s15, [r3]
			  //teta_ei = 0;
			  //d_ei = 0;

		}

		acc = 0.5;
 8002810:	4b51      	ldr	r3, [pc, #324]	; (8002958 <regulacija+0x10c8>)
 8002812:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002816:	601a      	str	r2, [r3, #0]

		if (fabs(teta_e) < M_PI/20 && fabs(d_e) < d_e_min)
 8002818:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <regulacija+0x1084>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	eef0 7ae7 	vabs.f32	s15, s15
 8002822:	ee17 0a90 	vmov	r0, s15
 8002826:	f7fd fe3b 	bl	80004a0 <__aeabi_f2d>
 800282a:	a335      	add	r3, pc, #212	; (adr r3, 8002900 <regulacija+0x1070>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fe f900 	bl	8000a34 <__aeabi_dcmplt>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d010      	beq.n	800285c <regulacija+0xfcc>
 800283a:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <regulacija+0x10a4>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	eeb0 7ae7 	vabs.f32	s14, s15
 8002844:	4b45      	ldr	r3, [pc, #276]	; (800295c <regulacija+0x10cc>)
 8002846:	edd3 7a00 	vldr	s15, [r3]
 800284a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002852:	d503      	bpl.n	800285c <regulacija+0xfcc>
			acc = 1;
 8002854:	4b40      	ldr	r3, [pc, #256]	; (8002958 <regulacija+0x10c8>)
 8002856:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800285a:	601a      	str	r2, [r3, #0]


		if (fabs(teta_e) < teta_min)
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <regulacija+0x1084>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	eeb0 7ae7 	vabs.f32	s14, s15
 8002866:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <regulacija+0x10d0>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	d503      	bpl.n	800287e <regulacija+0xfee>
			{
			  //medju_stanje();
			  faza = 3;
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <regulacija+0x109c>)
 8002878:	2203      	movs	r2, #3
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e002      	b.n	8002884 <regulacija+0xff4>
			  //teta_ei = 0;
			  //d_ei = 0;
			}
		else
			faza = 2;
 800287e:	4b2b      	ldr	r3, [pc, #172]	; (800292c <regulacija+0x109c>)
 8002880:	2202      	movs	r2, #2
 8002882:	601a      	str	r2, [r3, #0]
		//prosledi_pwm(Vdr, Vdl, Vr, Vl);

		}


	if (fabs(Vdr) > 50) {
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <regulacija+0x1094>)
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	eef0 7ae7 	vabs.f32	s15, s15
 800288e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002964 <regulacija+0x10d4>
 8002892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289a:	dd16      	ble.n	80028ca <regulacija+0x103a>
		if (Vdr < 0) {
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <regulacija+0x1094>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028aa:	d503      	bpl.n	80028b4 <regulacija+0x1024>
			Vdr = -50;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <regulacija+0x1094>)
 80028ae:	4a2e      	ldr	r2, [pc, #184]	; (8002968 <regulacija+0x10d8>)
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e00a      	b.n	80028ca <regulacija+0x103a>
		} else if (Vdr > 0) {
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <regulacija+0x1094>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	dd02      	ble.n	80028ca <regulacija+0x103a>
			Vdr = 50;
 80028c4:	4b17      	ldr	r3, [pc, #92]	; (8002924 <regulacija+0x1094>)
 80028c6:	4a29      	ldr	r2, [pc, #164]	; (800296c <regulacija+0x10dc>)
 80028c8:	601a      	str	r2, [r3, #0]
		}
	}
	if (fabs(Vdl) > 100) {
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <regulacija+0x1098>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	eef0 7ae7 	vabs.f32	s15, s15
 80028d4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002970 <regulacija+0x10e0>
 80028d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	dd53      	ble.n	800298a <regulacija+0x10fa>
		if (Vdl < 0) {
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <regulacija+0x1098>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	d540      	bpl.n	8002974 <regulacija+0x10e4>
			Vdl = -50;
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <regulacija+0x1098>)
 80028f4:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <regulacija+0x10d8>)
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e047      	b.n	800298a <regulacija+0x10fa>
 80028fa:	bf00      	nop
 80028fc:	f3af 8000 	nop.w
 8002900:	769cf0e0 	.word	0x769cf0e0
 8002904:	3fc41b2f 	.word	0x3fc41b2f
 8002908:	20000174 	.word	0x20000174
 800290c:	200000e0 	.word	0x200000e0
 8002910:	200000c0 	.word	0x200000c0
 8002914:	20000160 	.word	0x20000160
 8002918:	200000c4 	.word	0x200000c4
 800291c:	200000c8 	.word	0x200000c8
 8002920:	20000168 	.word	0x20000168
 8002924:	200000d4 	.word	0x200000d4
 8002928:	200000cc 	.word	0x200000cc
 800292c:	200000ec 	.word	0x200000ec
 8002930:	200000f4 	.word	0x200000f4
 8002934:	20000164 	.word	0x20000164
 8002938:	20000180 	.word	0x20000180
 800293c:	20000178 	.word	0x20000178
 8002940:	2000016c 	.word	0x2000016c
 8002944:	200000e4 	.word	0x200000e4
 8002948:	200000e8 	.word	0x200000e8
 800294c:	200000b4 	.word	0x200000b4
 8002950:	200000b8 	.word	0x200000b8
 8002954:	200000bc 	.word	0x200000bc
 8002958:	2000000c 	.word	0x2000000c
 800295c:	20000004 	.word	0x20000004
 8002960:	20000170 	.word	0x20000170
 8002964:	42480000 	.word	0x42480000
 8002968:	c2480000 	.word	0xc2480000
 800296c:	42480000 	.word	0x42480000
 8002970:	42c80000 	.word	0x42c80000
		} else if (Vdl > 0) {
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <regulacija+0x126c>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002982:	dd02      	ble.n	800298a <regulacija+0x10fa>
			Vdl = 50;
 8002984:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <regulacija+0x126c>)
 8002986:	4a5e      	ldr	r2, [pc, #376]	; (8002b00 <regulacija+0x1270>)
 8002988:	601a      	str	r2, [r3, #0]
		}
	}

	if (Vl < Vdl)
 800298a:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <regulacija+0x1274>)
 800298c:	ed93 7a00 	vldr	s14, [r3]
 8002990:	4b5a      	ldr	r3, [pc, #360]	; (8002afc <regulacija+0x126c>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	d50a      	bpl.n	80029b6 <regulacija+0x1126>
		Vl += acc;
 80029a0:	4b59      	ldr	r3, [pc, #356]	; (8002b08 <regulacija+0x1278>)
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <regulacija+0x1274>)
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b0:	4b54      	ldr	r3, [pc, #336]	; (8002b04 <regulacija+0x1274>)
 80029b2:	edc3 7a00 	vstr	s15, [r3]
	if (Vl > Vdl)
 80029b6:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <regulacija+0x1274>)
 80029b8:	ed93 7a00 	vldr	s14, [r3]
 80029bc:	4b4f      	ldr	r3, [pc, #316]	; (8002afc <regulacija+0x126c>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	dd0a      	ble.n	80029e2 <regulacija+0x1152>
		Vl -= acc;
 80029cc:	4b4e      	ldr	r3, [pc, #312]	; (8002b08 <regulacija+0x1278>)
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <regulacija+0x1274>)
 80029d4:	ed93 7a00 	vldr	s14, [r3]
 80029d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029dc:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <regulacija+0x1274>)
 80029de:	edc3 7a00 	vstr	s15, [r3]
	if (Vr > Vdr)
 80029e2:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <regulacija+0x127c>)
 80029e4:	ed93 7a00 	vldr	s14, [r3]
 80029e8:	4b49      	ldr	r3, [pc, #292]	; (8002b10 <regulacija+0x1280>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	dd0a      	ble.n	8002a0e <regulacija+0x117e>
		Vr -= acc;
 80029f8:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <regulacija+0x1278>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <regulacija+0x127c>)
 8002a00:	ed93 7a00 	vldr	s14, [r3]
 8002a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a08:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <regulacija+0x127c>)
 8002a0a:	edc3 7a00 	vstr	s15, [r3]
	if (Vr < Vdr)
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <regulacija+0x127c>)
 8002a10:	ed93 7a00 	vldr	s14, [r3]
 8002a14:	4b3e      	ldr	r3, [pc, #248]	; (8002b10 <regulacija+0x1280>)
 8002a16:	edd3 7a00 	vldr	s15, [r3]
 8002a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a22:	d50a      	bpl.n	8002a3a <regulacija+0x11aa>
		Vr += acc;
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <regulacija+0x1278>)
 8002a26:	ed93 7a00 	vldr	s14, [r3]
 8002a2a:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <regulacija+0x127c>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a34:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <regulacija+0x127c>)
 8002a36:	edc3 7a00 	vstr	s15, [r3]



	if (Vl < 0) {
 8002a3a:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <regulacija+0x1274>)
 8002a3c:	edd3 7a00 	vldr	s15, [r3]
 8002a40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a48:	d50e      	bpl.n	8002a68 <regulacija+0x11d8>
		okretanje_m2(fabs(Vl));
 8002a4a:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <regulacija+0x1274>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	eef0 7ae7 	vabs.f32	s15, s15
 8002a54:	eeb0 0a67 	vmov.f32	s0, s15
 8002a58:	f7fe fd12 	bl	8001480 <okretanje_m2>
		motor2_smer(nazad);
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <regulacija+0x1284>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fd59 	bl	8001518 <motor2_smer>
 8002a66:	e015      	b.n	8002a94 <regulacija+0x1204>
	} else if (Vl > 0) { // smer 1
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <regulacija+0x1274>)
 8002a6a:	edd3 7a00 	vldr	s15, [r3]
 8002a6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	dd0d      	ble.n	8002a94 <regulacija+0x1204>
		okretanje_m2(fabs(Vl));
 8002a78:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <regulacija+0x1274>)
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	eef0 7ae7 	vabs.f32	s15, s15
 8002a82:	eeb0 0a67 	vmov.f32	s0, s15
 8002a86:	f7fe fcfb 	bl	8001480 <okretanje_m2>
		motor2_smer(napred);
 8002a8a:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <regulacija+0x1288>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fd42 	bl	8001518 <motor2_smer>
	}
	if (Vr < 0) { //smer 2
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <regulacija+0x127c>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa2:	d50e      	bpl.n	8002ac2 <regulacija+0x1232>
		okretanje_m1(fabs(Vr));
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <regulacija+0x127c>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	eef0 7ae7 	vabs.f32	s15, s15
 8002aae:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab2:	f7fe fcc3 	bl	800143c <okretanje_m1>
		motor1_smer(nazad);
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <regulacija+0x1284>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fd02 	bl	80014c4 <motor1_smer>
	} else if (Vr > 0) { //smer 1
		okretanje_m1(fabs(Vr));
		motor1_smer(napred);
	}

}
 8002ac0:	e016      	b.n	8002af0 <regulacija+0x1260>
	} else if (Vr > 0) { //smer 1
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <regulacija+0x127c>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad0:	dc00      	bgt.n	8002ad4 <regulacija+0x1244>
}
 8002ad2:	e00d      	b.n	8002af0 <regulacija+0x1260>
		okretanje_m1(fabs(Vr));
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <regulacija+0x127c>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	eef0 7ae7 	vabs.f32	s15, s15
 8002ade:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae2:	f7fe fcab 	bl	800143c <okretanje_m1>
		motor1_smer(napred);
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <regulacija+0x1288>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fcea 	bl	80014c4 <motor1_smer>
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	ecbd 8b02 	vpop	{d8}
 8002af8:	bdb0      	pop	{r4, r5, r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200000cc 	.word	0x200000cc
 8002b00:	42480000 	.word	0x42480000
 8002b04:	200000d0 	.word	0x200000d0
 8002b08:	2000000c 	.word	0x2000000c
 8002b0c:	200000d8 	.word	0x200000d8
 8002b10:	200000d4 	.word	0x200000d4
 8002b14:	200000b0 	.word	0x200000b0
 8002b18:	20000000 	.word	0x20000000

08002b1c <sick_init>:
 *      Author: Marko Topalovic
 */

#include "sick.h"

void sick_init(void) {
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0

	const uint8_t pinB_1 = 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	71fb      	strb	r3, [r7, #7]
	const uint8_t pinB_2 = 2;
 8002b26:	2302      	movs	r3, #2
 8002b28:	71bb      	strb	r3, [r7, #6]
	const uint8_t pinB_13 = 13;
 8002b2a:	230d      	movs	r3, #13
 8002b2c:	717b      	strb	r3, [r7, #5]
	const uint8_t pinB_14 = 14;
 8002b2e:	230e      	movs	r3, #14
 8002b30:	713b      	strb	r3, [r7, #4]
	const uint8_t pinB_15 = 15;
 8002b32:	230f      	movs	r3, #15
 8002b34:	70fb      	strb	r3, [r7, #3]

	RCC->AHB1ENR |= (0b1 << 1);
 8002b36:	4b94      	ldr	r3, [pc, #592]	; (8002d88 <sick_init+0x26c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a93      	ldr	r2, [pc, #588]	; (8002d88 <sick_init+0x26c>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER &= ~(0b11 << 2 * pinB_1);
 8002b42:	4b92      	ldr	r3, [pc, #584]	; (8002d8c <sick_init+0x270>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	79fa      	ldrb	r2, [r7, #7]
 8002b48:	0052      	lsls	r2, r2, #1
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b50:	43d2      	mvns	r2, r2
 8002b52:	4611      	mov	r1, r2
 8002b54:	4a8d      	ldr	r2, [pc, #564]	; (8002d8c <sick_init+0x270>)
 8002b56:	400b      	ands	r3, r1
 8002b58:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << 2 * pinB_2);
 8002b5a:	4b8c      	ldr	r3, [pc, #560]	; (8002d8c <sick_init+0x270>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	79ba      	ldrb	r2, [r7, #6]
 8002b60:	0052      	lsls	r2, r2, #1
 8002b62:	2103      	movs	r1, #3
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	43d2      	mvns	r2, r2
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4a87      	ldr	r2, [pc, #540]	; (8002d8c <sick_init+0x270>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << 2 * pinB_13);
 8002b72:	4b86      	ldr	r3, [pc, #536]	; (8002d8c <sick_init+0x270>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	797a      	ldrb	r2, [r7, #5]
 8002b78:	0052      	lsls	r2, r2, #1
 8002b7a:	2103      	movs	r1, #3
 8002b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b80:	43d2      	mvns	r2, r2
 8002b82:	4611      	mov	r1, r2
 8002b84:	4a81      	ldr	r2, [pc, #516]	; (8002d8c <sick_init+0x270>)
 8002b86:	400b      	ands	r3, r1
 8002b88:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << 2 * pinB_14);
 8002b8a:	4b80      	ldr	r3, [pc, #512]	; (8002d8c <sick_init+0x270>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	793a      	ldrb	r2, [r7, #4]
 8002b90:	0052      	lsls	r2, r2, #1
 8002b92:	2103      	movs	r1, #3
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	43d2      	mvns	r2, r2
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4a7b      	ldr	r2, [pc, #492]	; (8002d8c <sick_init+0x270>)
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(0b11 << 2 * pinB_15);
 8002ba2:	4b7a      	ldr	r3, [pc, #488]	; (8002d8c <sick_init+0x270>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	0052      	lsls	r2, r2, #1
 8002baa:	2103      	movs	r1, #3
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	43d2      	mvns	r2, r2
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4a75      	ldr	r2, [pc, #468]	; (8002d8c <sick_init+0x270>)
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	6013      	str	r3, [r2, #0]

	GPIOB->OSPEEDR |= (0b11 << 2 * pinB_1);
 8002bba:	4b74      	ldr	r3, [pc, #464]	; (8002d8c <sick_init+0x270>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	79fa      	ldrb	r2, [r7, #7]
 8002bc0:	0052      	lsls	r2, r2, #1
 8002bc2:	2103      	movs	r1, #3
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4a70      	ldr	r2, [pc, #448]	; (8002d8c <sick_init+0x270>)
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0b11 << 2 * pinB_2);
 8002bd0:	4b6e      	ldr	r3, [pc, #440]	; (8002d8c <sick_init+0x270>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	79ba      	ldrb	r2, [r7, #6]
 8002bd6:	0052      	lsls	r2, r2, #1
 8002bd8:	2103      	movs	r1, #3
 8002bda:	fa01 f202 	lsl.w	r2, r1, r2
 8002bde:	4611      	mov	r1, r2
 8002be0:	4a6a      	ldr	r2, [pc, #424]	; (8002d8c <sick_init+0x270>)
 8002be2:	430b      	orrs	r3, r1
 8002be4:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0b11 << 2 * pinB_13);
 8002be6:	4b69      	ldr	r3, [pc, #420]	; (8002d8c <sick_init+0x270>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	797a      	ldrb	r2, [r7, #5]
 8002bec:	0052      	lsls	r2, r2, #1
 8002bee:	2103      	movs	r1, #3
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4a65      	ldr	r2, [pc, #404]	; (8002d8c <sick_init+0x270>)
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0b11 << 2 * pinB_14);
 8002bfc:	4b63      	ldr	r3, [pc, #396]	; (8002d8c <sick_init+0x270>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	793a      	ldrb	r2, [r7, #4]
 8002c02:	0052      	lsls	r2, r2, #1
 8002c04:	2103      	movs	r1, #3
 8002c06:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4a5f      	ldr	r2, [pc, #380]	; (8002d8c <sick_init+0x270>)
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0b11 << 2 * pinB_15);
 8002c12:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <sick_init+0x270>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	0052      	lsls	r2, r2, #1
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	4611      	mov	r1, r2
 8002c22:	4a5a      	ldr	r2, [pc, #360]	; (8002d8c <sick_init+0x270>)
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6093      	str	r3, [r2, #8]

	GPIOB->OTYPER &= ~(0b1 << pinB_1);
 8002c28:	4b58      	ldr	r3, [pc, #352]	; (8002d8c <sick_init+0x270>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	79fa      	ldrb	r2, [r7, #7]
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	43d2      	mvns	r2, r2
 8002c36:	4611      	mov	r1, r2
 8002c38:	4a54      	ldr	r2, [pc, #336]	; (8002d8c <sick_init+0x270>)
 8002c3a:	400b      	ands	r3, r1
 8002c3c:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER &= ~(0b1 << pinB_2);
 8002c3e:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <sick_init+0x270>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	79ba      	ldrb	r2, [r7, #6]
 8002c44:	2101      	movs	r1, #1
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	43d2      	mvns	r2, r2
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <sick_init+0x270>)
 8002c50:	400b      	ands	r3, r1
 8002c52:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER &= ~(0b1 << pinB_13);
 8002c54:	4b4d      	ldr	r3, [pc, #308]	; (8002d8c <sick_init+0x270>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	797a      	ldrb	r2, [r7, #5]
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	43d2      	mvns	r2, r2
 8002c62:	4611      	mov	r1, r2
 8002c64:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <sick_init+0x270>)
 8002c66:	400b      	ands	r3, r1
 8002c68:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER &= ~(0b1 << pinB_14);
 8002c6a:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <sick_init+0x270>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	793a      	ldrb	r2, [r7, #4]
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	43d2      	mvns	r2, r2
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4a44      	ldr	r2, [pc, #272]	; (8002d8c <sick_init+0x270>)
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER &= ~(0b1 << pinB_15);
 8002c80:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <sick_init+0x270>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	43d2      	mvns	r2, r2
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4a3e      	ldr	r2, [pc, #248]	; (8002d8c <sick_init+0x270>)
 8002c92:	400b      	ands	r3, r1
 8002c94:	6053      	str	r3, [r2, #4]

	GPIOB->PUPDR &= ~(0b11 << 2 * pinB_1);
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <sick_init+0x270>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	79fa      	ldrb	r2, [r7, #7]
 8002c9c:	0052      	lsls	r2, r2, #1
 8002c9e:	2103      	movs	r1, #3
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	43d2      	mvns	r2, r2
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4a38      	ldr	r2, [pc, #224]	; (8002d8c <sick_init+0x270>)
 8002caa:	400b      	ands	r3, r1
 8002cac:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(0b11 << 2 * pinB_2);
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <sick_init+0x270>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	79ba      	ldrb	r2, [r7, #6]
 8002cb4:	0052      	lsls	r2, r2, #1
 8002cb6:	2103      	movs	r1, #3
 8002cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbc:	43d2      	mvns	r2, r2
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4a32      	ldr	r2, [pc, #200]	; (8002d8c <sick_init+0x270>)
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(0b11 << 2 * pinB_13);
 8002cc6:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <sick_init+0x270>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	797a      	ldrb	r2, [r7, #5]
 8002ccc:	0052      	lsls	r2, r2, #1
 8002cce:	2103      	movs	r1, #3
 8002cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd4:	43d2      	mvns	r2, r2
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <sick_init+0x270>)
 8002cda:	400b      	ands	r3, r1
 8002cdc:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(0b11 << 2 * pinB_14);
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <sick_init+0x270>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	793a      	ldrb	r2, [r7, #4]
 8002ce4:	0052      	lsls	r2, r2, #1
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cec:	43d2      	mvns	r2, r2
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <sick_init+0x270>)
 8002cf2:	400b      	ands	r3, r1
 8002cf4:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(0b11 << 2 * pinB_15);
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <sick_init+0x270>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	0052      	lsls	r2, r2, #1
 8002cfe:	2103      	movs	r1, #3
 8002d00:	fa01 f202 	lsl.w	r2, r1, r2
 8002d04:	43d2      	mvns	r2, r2
 8002d06:	4611      	mov	r1, r2
 8002d08:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <sick_init+0x270>)
 8002d0a:	400b      	ands	r3, r1
 8002d0c:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (0b01 << 2 * pinB_1);
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <sick_init+0x270>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	79fa      	ldrb	r2, [r7, #7]
 8002d14:	0052      	lsls	r2, r2, #1
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <sick_init+0x270>)
 8002d20:	430b      	orrs	r3, r1
 8002d22:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << 2 * pinB_2);
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <sick_init+0x270>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	79ba      	ldrb	r2, [r7, #6]
 8002d2a:	0052      	lsls	r2, r2, #1
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4611      	mov	r1, r2
 8002d34:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <sick_init+0x270>)
 8002d36:	430b      	orrs	r3, r1
 8002d38:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << 2 * pinB_13);
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <sick_init+0x270>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	797a      	ldrb	r2, [r7, #5]
 8002d40:	0052      	lsls	r2, r2, #1
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f202 	lsl.w	r2, r1, r2
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <sick_init+0x270>)
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << 2 * pinB_14);
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <sick_init+0x270>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	793a      	ldrb	r2, [r7, #4]
 8002d56:	0052      	lsls	r2, r2, #1
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <sick_init+0x270>)
 8002d62:	430b      	orrs	r3, r1
 8002d64:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0b01 << 2 * pinB_15);
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <sick_init+0x270>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	0052      	lsls	r2, r2, #1
 8002d6e:	2101      	movs	r1, #1
 8002d70:	fa01 f202 	lsl.w	r2, r1, r2
 8002d74:	4611      	mov	r1, r2
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <sick_init+0x270>)
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020400 	.word	0x40020400

08002d90 <sickLF>:

bool sickLF(void) {
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
	bool stanje = false;
 8002d96:	2300      	movs	r3, #0
 8002d98:	71fb      	strb	r3, [r7, #7]
	if (GPIOB->IDR & (0b1 << 1)) {
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <sickLF+0x30>)
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <sickLF+0x1c>
		stanje = false;
 8002da6:	2300      	movs	r3, #0
 8002da8:	71fb      	strb	r3, [r7, #7]
 8002daa:	e001      	b.n	8002db0 <sickLF+0x20>
	} else {
		stanje = true;
 8002dac:	2301      	movs	r3, #1
 8002dae:	71fb      	strb	r3, [r7, #7]
	}
	return stanje;
 8002db0:	79fb      	ldrb	r3, [r7, #7]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40020400 	.word	0x40020400

08002dc4 <sickMID>:
bool sickMID(void) {
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
	bool stanje = false;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	71fb      	strb	r3, [r7, #7]
	if (GPIOB->IDR & (0b1 << 2)) {
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <sickMID+0x30>)
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <sickMID+0x1c>
		stanje = true;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	71fb      	strb	r3, [r7, #7]
 8002dde:	e001      	b.n	8002de4 <sickMID+0x20>
	} else {
		stanje = false;
 8002de0:	2300      	movs	r3, #0
 8002de2:	71fb      	strb	r3, [r7, #7]
	}
	return stanje;
 8002de4:	79fb      	ldrb	r3, [r7, #7]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40020400 	.word	0x40020400

08002df8 <sickRF>:
bool sickRF(void) {
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
	bool stanje = false;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	71fb      	strb	r3, [r7, #7]
	if (GPIOB->IDR & (0b1 << 13)) {
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <sickRF+0x30>)
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <sickRF+0x1c>
		stanje = true;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	71fb      	strb	r3, [r7, #7]
 8002e12:	e001      	b.n	8002e18 <sickRF+0x20>
	} else {
		stanje = false;
 8002e14:	2300      	movs	r3, #0
 8002e16:	71fb      	strb	r3, [r7, #7]
	}
	return stanje;
 8002e18:	79fb      	ldrb	r3, [r7, #7]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40020400 	.word	0x40020400

08002e2c <sickLB>:
bool sickLB(void) {
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
	bool stanje = false;
 8002e32:	2300      	movs	r3, #0
 8002e34:	71fb      	strb	r3, [r7, #7]
	if (GPIOB->IDR & (0b1 << 14)) {
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <sickLB+0x30>)
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <sickLB+0x1c>
		stanje = true;
 8002e42:	2301      	movs	r3, #1
 8002e44:	71fb      	strb	r3, [r7, #7]
 8002e46:	e001      	b.n	8002e4c <sickLB+0x20>
	} else {
		stanje = false;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	71fb      	strb	r3, [r7, #7]
	}
	return stanje;
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40020400 	.word	0x40020400

08002e60 <sickRB>:
bool sickRB(void) {
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
	bool stanje = false;
 8002e66:	2300      	movs	r3, #0
 8002e68:	71fb      	strb	r3, [r7, #7]
	if (GPIOB->IDR & (0b1 << 15)) {
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <sickRB+0x30>)
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <sickRB+0x1c>
		stanje = true;
 8002e76:	2301      	movs	r3, #1
 8002e78:	71fb      	strb	r3, [r7, #7]
 8002e7a:	e001      	b.n	8002e80 <sickRB+0x20>
	} else {
		stanje = false;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	71fb      	strb	r3, [r7, #7]
	}
	return stanje;
 8002e80:	79fb      	ldrb	r3, [r7, #7]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40020400 	.word	0x40020400

08002e94 <step_init>:
#include "step.h"

const uint8_t step_pin = 8;
const uint8_t dir_pin = 5;

void step_init(void) {
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
	//PC8 - Step pin - PWM
	//PC5 - Dir pin - GPIO
	RCC->AHB1ENR |= (0b01 << 2);
 8002e98:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <step_init+0x130>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	4a49      	ldr	r2, [pc, #292]	; (8002fc4 <step_init+0x130>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC->MODER &= ~(0b11 << 2 * step_pin);
 8002ea4:	4b48      	ldr	r3, [pc, #288]	; (8002fc8 <step_init+0x134>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	0052      	lsls	r2, r2, #1
 8002eac:	2103      	movs	r1, #3
 8002eae:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb2:	43d2      	mvns	r2, r2
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4a44      	ldr	r2, [pc, #272]	; (8002fc8 <step_init+0x134>)
 8002eb8:	400b      	ands	r3, r1
 8002eba:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b01 << 2 * step_pin);
 8002ebc:	4b42      	ldr	r3, [pc, #264]	; (8002fc8 <step_init+0x134>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	0052      	lsls	r2, r2, #1
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4a3e      	ldr	r2, [pc, #248]	; (8002fc8 <step_init+0x134>)
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(0b1 << step_pin);
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <step_init+0x134>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	4611      	mov	r1, r2
 8002eda:	2201      	movs	r2, #1
 8002edc:	408a      	lsls	r2, r1
 8002ede:	43d2      	mvns	r2, r2
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4a39      	ldr	r2, [pc, #228]	; (8002fc8 <step_init+0x134>)
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	6053      	str	r3, [r2, #4]
	//GPIOC->OTYPER |= (0b01 << step_pin);
	GPIOA->OSPEEDR &= ~(0b11 << 2 * step_pin);
 8002ee8:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <step_init+0x138>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2208      	movs	r2, #8
 8002eee:	0052      	lsls	r2, r2, #1
 8002ef0:	2103      	movs	r1, #3
 8002ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef6:	43d2      	mvns	r2, r2
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <step_init+0x138>)
 8002efc:	400b      	ands	r3, r1
 8002efe:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0b11 << 2 * step_pin);
 8002f00:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <step_init+0x138>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2208      	movs	r2, #8
 8002f06:	0052      	lsls	r2, r2, #1
 8002f08:	2103      	movs	r1, #3
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4a2e      	ldr	r2, [pc, #184]	; (8002fcc <step_init+0x138>)
 8002f12:	430b      	orrs	r3, r1
 8002f14:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~(0b11 << 2 * step_pin);
 8002f16:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <step_init+0x134>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	0052      	lsls	r2, r2, #1
 8002f1e:	2103      	movs	r1, #3
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	43d2      	mvns	r2, r2
 8002f26:	4611      	mov	r1, r2
 8002f28:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <step_init+0x134>)
 8002f2a:	400b      	ands	r3, r1
 8002f2c:	60d3      	str	r3, [r2, #12]

	GPIOC->MODER &= ~(0b11 << 2 * dir_pin);
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <step_init+0x134>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2205      	movs	r2, #5
 8002f34:	0052      	lsls	r2, r2, #1
 8002f36:	2103      	movs	r1, #3
 8002f38:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3c:	43d2      	mvns	r2, r2
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <step_init+0x134>)
 8002f42:	400b      	ands	r3, r1
 8002f44:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b01 << 2 * dir_pin);
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <step_init+0x134>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2205      	movs	r2, #5
 8002f4c:	0052      	lsls	r2, r2, #1
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4611      	mov	r1, r2
 8002f56:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <step_init+0x134>)
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1 << dir_pin);
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <step_init+0x134>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2205      	movs	r2, #5
 8002f62:	4611      	mov	r1, r2
 8002f64:	2201      	movs	r2, #1
 8002f66:	408a      	lsls	r2, r1
 8002f68:	43d2      	mvns	r2, r2
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <step_init+0x134>)
 8002f6e:	400b      	ands	r3, r1
 8002f70:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~(0b11 << 2 * dir_pin);
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <step_init+0x138>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2205      	movs	r2, #5
 8002f78:	0052      	lsls	r2, r2, #1
 8002f7a:	2103      	movs	r1, #3
 8002f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f80:	43d2      	mvns	r2, r2
 8002f82:	4611      	mov	r1, r2
 8002f84:	4a11      	ldr	r2, [pc, #68]	; (8002fcc <step_init+0x138>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0b11 << 2 * dir_pin);
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <step_init+0x138>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2205      	movs	r2, #5
 8002f90:	0052      	lsls	r2, r2, #1
 8002f92:	2103      	movs	r1, #3
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4a0c      	ldr	r2, [pc, #48]	; (8002fcc <step_init+0x138>)
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6093      	str	r3, [r2, #8]
	//GPIOC->OTYPER |= (0b01 << dir_pin);
	GPIOC->PUPDR &= ~(0b11 << 2 * dir_pin);
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <step_init+0x134>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2205      	movs	r2, #5
 8002fa6:	0052      	lsls	r2, r2, #1
 8002fa8:	2103      	movs	r1, #3
 8002faa:	fa01 f202 	lsl.w	r2, r1, r2
 8002fae:	43d2      	mvns	r2, r2
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <step_init+0x134>)
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	60d3      	str	r3, [r2, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020000 	.word	0x40020000

08002fd0 <enkoder_init>:
#include "enkoder.h"

static void init_tim3(void);
static void init_tim4(void);

void enkoder_init() {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	init_tim3();
 8002fd4:	f000 f804 	bl	8002fe0 <init_tim3>
	init_tim4();
 8002fd8:	f000 f90e 	bl	80031f8 <init_tim4>
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <init_tim3>:

static void init_tim3(void) {
 8002fe0:	b490      	push	{r4, r7}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
	//Podesavanje tajmera 3 za rad sa enkoderom

	//Dozvola takta, PB4 i PB5
	RCC->AHB1ENR |= (0b1 << 1); //dozvola takta portu B
 8002fe6:	4b76      	ldr	r3, [pc, #472]	; (80031c0 <init_tim3+0x1e0>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a75      	ldr	r2, [pc, #468]	; (80031c0 <init_tim3+0x1e0>)
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30

	//Pin 4 da bude alternativna funkcija
	const uint8_t pin_4 = 4;
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	71fb      	strb	r3, [r7, #7]
	const uint8_t pin_5 = 5;
 8002ff6:	2305      	movs	r3, #5
 8002ff8:	71bb      	strb	r3, [r7, #6]
	const uint8_t alternativna_funkcija = 2;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	717b      	strb	r3, [r7, #5]

	GPIOB->MODER &= ~(0b11 << 2 * pin_4); //prvo oba na nulu
 8002ffe:	4b71      	ldr	r3, [pc, #452]	; (80031c4 <init_tim3+0x1e4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	79fa      	ldrb	r2, [r7, #7]
 8003004:	0052      	lsls	r2, r2, #1
 8003006:	2103      	movs	r1, #3
 8003008:	fa01 f202 	lsl.w	r2, r1, r2
 800300c:	43d2      	mvns	r2, r2
 800300e:	4611      	mov	r1, r2
 8003010:	4a6c      	ldr	r2, [pc, #432]	; (80031c4 <init_tim3+0x1e4>)
 8003012:	400b      	ands	r3, r1
 8003014:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 2 * pin_4);
 8003016:	4b6b      	ldr	r3, [pc, #428]	; (80031c4 <init_tim3+0x1e4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	79fa      	ldrb	r2, [r7, #7]
 800301c:	0052      	lsls	r2, r2, #1
 800301e:	2102      	movs	r1, #2
 8003020:	fa01 f202 	lsl.w	r2, r1, r2
 8003024:	4611      	mov	r1, r2
 8003026:	4a67      	ldr	r2, [pc, #412]	; (80031c4 <init_tim3+0x1e4>)
 8003028:	430b      	orrs	r3, r1
 800302a:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[pin_4 / 8] &= ~(0b1111 << 4 * (pin_4 % 8)); //treba postaviti 4 pina, prvo na nule
 800302c:	4a65      	ldr	r2, [pc, #404]	; (80031c4 <init_tim3+0x1e4>)
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	08db      	lsrs	r3, r3, #3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3308      	adds	r3, #8
 8003036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303a:	79fa      	ldrb	r2, [r7, #7]
 800303c:	f002 0207 	and.w	r2, r2, #7
 8003040:	0092      	lsls	r2, r2, #2
 8003042:	210f      	movs	r1, #15
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	43d2      	mvns	r2, r2
 800304a:	4614      	mov	r4, r2
 800304c:	495d      	ldr	r1, [pc, #372]	; (80031c4 <init_tim3+0x1e4>)
 800304e:	79fa      	ldrb	r2, [r7, #7]
 8003050:	08d2      	lsrs	r2, r2, #3
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	4610      	mov	r0, r2
 8003056:	ea03 0204 	and.w	r2, r3, r4
 800305a:	f100 0308 	add.w	r3, r0, #8
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[pin_4 / 8] |= (alternativna_funkcija << 4 * (pin_4 % 8));
 8003062:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <init_tim3+0x1e4>)
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	08db      	lsrs	r3, r3, #3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3308      	adds	r3, #8
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003070:	7979      	ldrb	r1, [r7, #5]
 8003072:	79fa      	ldrb	r2, [r7, #7]
 8003074:	f002 0207 	and.w	r2, r2, #7
 8003078:	0092      	lsls	r2, r2, #2
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	4614      	mov	r4, r2
 8003080:	4950      	ldr	r1, [pc, #320]	; (80031c4 <init_tim3+0x1e4>)
 8003082:	79fa      	ldrb	r2, [r7, #7]
 8003084:	08d2      	lsrs	r2, r2, #3
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	4610      	mov	r0, r2
 800308a:	ea43 0204 	orr.w	r2, r3, r4
 800308e:	f100 0308 	add.w	r3, r0, #8
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	GPIOB->MODER &= ~(0b11 << 2 * pin_5); //isto to za pin 5
 8003096:	4b4b      	ldr	r3, [pc, #300]	; (80031c4 <init_tim3+0x1e4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	79ba      	ldrb	r2, [r7, #6]
 800309c:	0052      	lsls	r2, r2, #1
 800309e:	2103      	movs	r1, #3
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	43d2      	mvns	r2, r2
 80030a6:	4611      	mov	r1, r2
 80030a8:	4a46      	ldr	r2, [pc, #280]	; (80031c4 <init_tim3+0x1e4>)
 80030aa:	400b      	ands	r3, r1
 80030ac:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 2 * pin_5);
 80030ae:	4b45      	ldr	r3, [pc, #276]	; (80031c4 <init_tim3+0x1e4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	79ba      	ldrb	r2, [r7, #6]
 80030b4:	0052      	lsls	r2, r2, #1
 80030b6:	2102      	movs	r1, #2
 80030b8:	fa01 f202 	lsl.w	r2, r1, r2
 80030bc:	4611      	mov	r1, r2
 80030be:	4a41      	ldr	r2, [pc, #260]	; (80031c4 <init_tim3+0x1e4>)
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[pin_5 / 8] &= ~(0b1111 << 4 * (pin_5 % 8));
 80030c4:	4a3f      	ldr	r2, [pc, #252]	; (80031c4 <init_tim3+0x1e4>)
 80030c6:	79bb      	ldrb	r3, [r7, #6]
 80030c8:	08db      	lsrs	r3, r3, #3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	3308      	adds	r3, #8
 80030ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d2:	79ba      	ldrb	r2, [r7, #6]
 80030d4:	f002 0207 	and.w	r2, r2, #7
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	210f      	movs	r1, #15
 80030dc:	fa01 f202 	lsl.w	r2, r1, r2
 80030e0:	43d2      	mvns	r2, r2
 80030e2:	4614      	mov	r4, r2
 80030e4:	4937      	ldr	r1, [pc, #220]	; (80031c4 <init_tim3+0x1e4>)
 80030e6:	79ba      	ldrb	r2, [r7, #6]
 80030e8:	08d2      	lsrs	r2, r2, #3
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	4610      	mov	r0, r2
 80030ee:	ea03 0204 	and.w	r2, r3, r4
 80030f2:	f100 0308 	add.w	r3, r0, #8
 80030f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[pin_5 / 8] |= (alternativna_funkcija << 4 * (pin_5 % 8));
 80030fa:	4a32      	ldr	r2, [pc, #200]	; (80031c4 <init_tim3+0x1e4>)
 80030fc:	79bb      	ldrb	r3, [r7, #6]
 80030fe:	08db      	lsrs	r3, r3, #3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	3308      	adds	r3, #8
 8003104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003108:	7979      	ldrb	r1, [r7, #5]
 800310a:	79ba      	ldrb	r2, [r7, #6]
 800310c:	f002 0207 	and.w	r2, r2, #7
 8003110:	0092      	lsls	r2, r2, #2
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	4614      	mov	r4, r2
 8003118:	492a      	ldr	r1, [pc, #168]	; (80031c4 <init_tim3+0x1e4>)
 800311a:	79ba      	ldrb	r2, [r7, #6]
 800311c:	08d2      	lsrs	r2, r2, #3
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	4610      	mov	r0, r2
 8003122:	ea43 0204 	orr.w	r2, r3, r4
 8003126:	f100 0308 	add.w	r3, r0, #8
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Podesavanje tajmera 3

	RCC->APB1ENR |= (0b1 << 1);
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <init_tim3+0x1e0>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <init_tim3+0x1e0>)
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	6413      	str	r3, [r2, #64]	; 0x40

	TIM3->PSC = 0; //necemo delitelj frekvencije
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <init_tim3+0x1e8>)
 800313c:	2200      	movs	r2, #0
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 0xFFFF; //16b, 16 jedinica, velicina registra
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <init_tim3+0x1e8>)
 8003142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->SMCR &= ~(0b111 << 0);
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <init_tim3+0x1e8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <init_tim3+0x1e8>)
 800314e:	f023 0307 	bic.w	r3, r3, #7
 8003152:	6093      	str	r3, [r2, #8]
	TIM3->SMCR |= (0b011 << 0); //kvadraturno dekodiranje
 8003154:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <init_tim3+0x1e8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <init_tim3+0x1e8>)
 800315a:	f043 0303 	orr.w	r3, r3, #3
 800315e:	6093      	str	r3, [r2, #8]

	//Povezivanje kanala

	//kanal A enkodera povezujemo sa kanalom 1 tajmera
	TIM3->CCMR1 &= ~(0b11 << 0);
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <init_tim3+0x1e8>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <init_tim3+0x1e8>)
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (0b01 << 0);
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <init_tim3+0x1e8>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <init_tim3+0x1e8>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6193      	str	r3, [r2, #24]
	//kanal B enkodera povezujemo sa kanalom 2 tajmera
	TIM3->CCMR1 &= ~(0b11 << 8);
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <init_tim3+0x1e8>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <init_tim3+0x1e8>)
 800317e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003182:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (0b01 << 8);
 8003184:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <init_tim3+0x1e8>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	4a0f      	ldr	r2, [pc, #60]	; (80031c8 <init_tim3+0x1e8>)
 800318a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318e:	6193      	str	r3, [r2, #24]

	//Invertovanje (tj neinvertovanje), JEDAN TREBA INVERTOVATI!

	TIM3->CCER &= ~((0b1 << 1) | (0b1 << 3));
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <init_tim3+0x1e8>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4a0c      	ldr	r2, [pc, #48]	; (80031c8 <init_tim3+0x1e8>)
 8003196:	f023 030a 	bic.w	r3, r3, #10
 800319a:	6213      	str	r3, [r2, #32]
	TIM3->CCER &= ~((0b1 << 5) | (0b1 << 7));
 800319c:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <init_tim3+0x1e8>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <init_tim3+0x1e8>)
 80031a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a6:	6213      	str	r3, [r2, #32]

	//Ukljucivanje brojaca
	TIM3->CR1 |= (0b1 << 0);
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <init_tim3+0x1e8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a06      	ldr	r2, [pc, #24]	; (80031c8 <init_tim3+0x1e8>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6013      	str	r3, [r2, #0]

	//TIM3 -> CNT = izbrojano stanje na enkoderu
	//TIM3 -> CR1 - BIT4 -> DIR = u koju strane se enkoder vrti
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc90      	pop	{r4, r7}
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020400 	.word	0x40020400
 80031c8:	40000400 	.word	0x40000400

080031cc <enkoder_brzina>:

int16_t enkoder_brzina() {
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
	int16_t trenutna = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	80fb      	strh	r3, [r7, #6]
	trenutna = (int16_t) TIM3->CNT;
 80031d6:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <enkoder_brzina+0x28>)
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	80fb      	strh	r3, [r7, #6]
	TIM3->CNT = 0;
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <enkoder_brzina+0x28>)
 80031de:	2200      	movs	r2, #0
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
	return trenutna;
 80031e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40000400 	.word	0x40000400

080031f8 <init_tim4>:

static void init_tim4(void) //drugi tajmer za drugi enkoder
{
 80031f8:	b490      	push	{r4, r7}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
	//Podesavanje tajmera 4 za rad sa enkoderom

	//Dozvola takta, PB6 i PB7
	RCC->AHB1ENR |= (0b1 << 1); //dozvola takta portu B
 80031fe:	4b79      	ldr	r3, [pc, #484]	; (80033e4 <init_tim4+0x1ec>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a78      	ldr	r2, [pc, #480]	; (80033e4 <init_tim4+0x1ec>)
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	6313      	str	r3, [r2, #48]	; 0x30

	//Pin 6 da bude alternativna funkcija
	const uint8_t pin_6 = 6;
 800320a:	2306      	movs	r3, #6
 800320c:	71fb      	strb	r3, [r7, #7]
	const uint8_t pin_7 = 7;
 800320e:	2307      	movs	r3, #7
 8003210:	71bb      	strb	r3, [r7, #6]
	const uint8_t alternativna_funkcija = 2;
 8003212:	2302      	movs	r3, #2
 8003214:	717b      	strb	r3, [r7, #5]

	GPIOB->MODER &= ~(0b11 << 2 * pin_6); //prvo oba na nulu
 8003216:	4b74      	ldr	r3, [pc, #464]	; (80033e8 <init_tim4+0x1f0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	79fa      	ldrb	r2, [r7, #7]
 800321c:	0052      	lsls	r2, r2, #1
 800321e:	2103      	movs	r1, #3
 8003220:	fa01 f202 	lsl.w	r2, r1, r2
 8003224:	43d2      	mvns	r2, r2
 8003226:	4611      	mov	r1, r2
 8003228:	4a6f      	ldr	r2, [pc, #444]	; (80033e8 <init_tim4+0x1f0>)
 800322a:	400b      	ands	r3, r1
 800322c:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 2 * pin_6);
 800322e:	4b6e      	ldr	r3, [pc, #440]	; (80033e8 <init_tim4+0x1f0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	79fa      	ldrb	r2, [r7, #7]
 8003234:	0052      	lsls	r2, r2, #1
 8003236:	2102      	movs	r1, #2
 8003238:	fa01 f202 	lsl.w	r2, r1, r2
 800323c:	4611      	mov	r1, r2
 800323e:	4a6a      	ldr	r2, [pc, #424]	; (80033e8 <init_tim4+0x1f0>)
 8003240:	430b      	orrs	r3, r1
 8003242:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[pin_6 / 8] &= ~(0b1111 << 4 * (pin_6 % 8)); //treba postaviti 4 pina, prvo na nule
 8003244:	4a68      	ldr	r2, [pc, #416]	; (80033e8 <init_tim4+0x1f0>)
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	08db      	lsrs	r3, r3, #3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	3308      	adds	r3, #8
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	79fa      	ldrb	r2, [r7, #7]
 8003254:	f002 0207 	and.w	r2, r2, #7
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	210f      	movs	r1, #15
 800325c:	fa01 f202 	lsl.w	r2, r1, r2
 8003260:	43d2      	mvns	r2, r2
 8003262:	4614      	mov	r4, r2
 8003264:	4960      	ldr	r1, [pc, #384]	; (80033e8 <init_tim4+0x1f0>)
 8003266:	79fa      	ldrb	r2, [r7, #7]
 8003268:	08d2      	lsrs	r2, r2, #3
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	4610      	mov	r0, r2
 800326e:	ea03 0204 	and.w	r2, r3, r4
 8003272:	f100 0308 	add.w	r3, r0, #8
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[pin_6 / 8] |= (alternativna_funkcija << 4 * (pin_6 % 8));
 800327a:	4a5b      	ldr	r2, [pc, #364]	; (80033e8 <init_tim4+0x1f0>)
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	08db      	lsrs	r3, r3, #3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	3308      	adds	r3, #8
 8003284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003288:	7979      	ldrb	r1, [r7, #5]
 800328a:	79fa      	ldrb	r2, [r7, #7]
 800328c:	f002 0207 	and.w	r2, r2, #7
 8003290:	0092      	lsls	r2, r2, #2
 8003292:	fa01 f202 	lsl.w	r2, r1, r2
 8003296:	4614      	mov	r4, r2
 8003298:	4953      	ldr	r1, [pc, #332]	; (80033e8 <init_tim4+0x1f0>)
 800329a:	79fa      	ldrb	r2, [r7, #7]
 800329c:	08d2      	lsrs	r2, r2, #3
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	4610      	mov	r0, r2
 80032a2:	ea43 0204 	orr.w	r2, r3, r4
 80032a6:	f100 0308 	add.w	r3, r0, #8
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	GPIOB->MODER &= ~(0b11 << 2 * pin_7); //isto to za pin 5
 80032ae:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <init_tim4+0x1f0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	79ba      	ldrb	r2, [r7, #6]
 80032b4:	0052      	lsls	r2, r2, #1
 80032b6:	2103      	movs	r1, #3
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	43d2      	mvns	r2, r2
 80032be:	4611      	mov	r1, r2
 80032c0:	4a49      	ldr	r2, [pc, #292]	; (80033e8 <init_tim4+0x1f0>)
 80032c2:	400b      	ands	r3, r1
 80032c4:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 2 * pin_7);
 80032c6:	4b48      	ldr	r3, [pc, #288]	; (80033e8 <init_tim4+0x1f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	79ba      	ldrb	r2, [r7, #6]
 80032cc:	0052      	lsls	r2, r2, #1
 80032ce:	2102      	movs	r1, #2
 80032d0:	fa01 f202 	lsl.w	r2, r1, r2
 80032d4:	4611      	mov	r1, r2
 80032d6:	4a44      	ldr	r2, [pc, #272]	; (80033e8 <init_tim4+0x1f0>)
 80032d8:	430b      	orrs	r3, r1
 80032da:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[pin_7 / 8] &= ~(0b1111 << 4 * (pin_7 % 8));
 80032dc:	4a42      	ldr	r2, [pc, #264]	; (80033e8 <init_tim4+0x1f0>)
 80032de:	79bb      	ldrb	r3, [r7, #6]
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	3308      	adds	r3, #8
 80032e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ea:	79ba      	ldrb	r2, [r7, #6]
 80032ec:	f002 0207 	and.w	r2, r2, #7
 80032f0:	0092      	lsls	r2, r2, #2
 80032f2:	210f      	movs	r1, #15
 80032f4:	fa01 f202 	lsl.w	r2, r1, r2
 80032f8:	43d2      	mvns	r2, r2
 80032fa:	4614      	mov	r4, r2
 80032fc:	493a      	ldr	r1, [pc, #232]	; (80033e8 <init_tim4+0x1f0>)
 80032fe:	79ba      	ldrb	r2, [r7, #6]
 8003300:	08d2      	lsrs	r2, r2, #3
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	4610      	mov	r0, r2
 8003306:	ea03 0204 	and.w	r2, r3, r4
 800330a:	f100 0308 	add.w	r3, r0, #8
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GPIOB->AFR[pin_7 / 8] |= (alternativna_funkcija << 4 * (pin_7 % 8));
 8003312:	4a35      	ldr	r2, [pc, #212]	; (80033e8 <init_tim4+0x1f0>)
 8003314:	79bb      	ldrb	r3, [r7, #6]
 8003316:	08db      	lsrs	r3, r3, #3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	3308      	adds	r3, #8
 800331c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003320:	7979      	ldrb	r1, [r7, #5]
 8003322:	79ba      	ldrb	r2, [r7, #6]
 8003324:	f002 0207 	and.w	r2, r2, #7
 8003328:	0092      	lsls	r2, r2, #2
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	4614      	mov	r4, r2
 8003330:	492d      	ldr	r1, [pc, #180]	; (80033e8 <init_tim4+0x1f0>)
 8003332:	79ba      	ldrb	r2, [r7, #6]
 8003334:	08d2      	lsrs	r2, r2, #3
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	4610      	mov	r0, r2
 800333a:	ea43 0204 	orr.w	r2, r3, r4
 800333e:	f100 0308 	add.w	r3, r0, #8
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Podesavanje tajmera 4

	RCC->APB1ENR |= (0b1 << 2);
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <init_tim4+0x1ec>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <init_tim4+0x1ec>)
 800334c:	f043 0304 	orr.w	r3, r3, #4
 8003350:	6413      	str	r3, [r2, #64]	; 0x40

	TIM4->PSC = 0; //necemo delitelj frekvencije
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <init_tim4+0x1f4>)
 8003354:	2200      	movs	r2, #0
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 0xFFFF; //16b, 16 jedinica, velicina registra
 8003358:	4b24      	ldr	r3, [pc, #144]	; (80033ec <init_tim4+0x1f4>)
 800335a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->SMCR &= ~(0b111 << 0);
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <init_tim4+0x1f4>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a21      	ldr	r2, [pc, #132]	; (80033ec <init_tim4+0x1f4>)
 8003366:	f023 0307 	bic.w	r3, r3, #7
 800336a:	6093      	str	r3, [r2, #8]
	TIM4->SMCR |= (0b011 << 0); //kvadraturno dekodiranje 011 a sad smo na 001
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <init_tim4+0x1f4>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a1e      	ldr	r2, [pc, #120]	; (80033ec <init_tim4+0x1f4>)
 8003372:	f043 0303 	orr.w	r3, r3, #3
 8003376:	6093      	str	r3, [r2, #8]

	//Povezivanje kanala

	//kanal A enkodera povezujemo sa kanalom 1 tajmera
	TIM4->CCMR1 &= ~(0b11 << 0);
 8003378:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <init_tim4+0x1f4>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <init_tim4+0x1f4>)
 800337e:	f023 0303 	bic.w	r3, r3, #3
 8003382:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0b01 << 0);
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <init_tim4+0x1f4>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <init_tim4+0x1f4>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6193      	str	r3, [r2, #24]
	//kanal B enkodera povezujemo sa kanalom 2 tajmera
	TIM4->CCMR1 &= ~(0b11 << 8);
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <init_tim4+0x1f4>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4a15      	ldr	r2, [pc, #84]	; (80033ec <init_tim4+0x1f4>)
 8003396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339a:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0b01 << 8);
 800339c:	4b13      	ldr	r3, [pc, #76]	; (80033ec <init_tim4+0x1f4>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	4a12      	ldr	r2, [pc, #72]	; (80033ec <init_tim4+0x1f4>)
 80033a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a6:	6193      	str	r3, [r2, #24]

	//Invertovanje (tj neinvertovanje)

	TIM4->CCER &= ~((0b1 << 1) | (0b1 << 3));
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <init_tim4+0x1f4>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <init_tim4+0x1f4>)
 80033ae:	f023 030a 	bic.w	r3, r3, #10
 80033b2:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~(0b1 << 7);
 80033b4:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <init_tim4+0x1f4>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4a0c      	ldr	r2, [pc, #48]	; (80033ec <init_tim4+0x1f4>)
 80033ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033be:	6213      	str	r3, [r2, #32]
	TIM4->CCER |= (0b1 << 5);
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <init_tim4+0x1f4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4a09      	ldr	r2, [pc, #36]	; (80033ec <init_tim4+0x1f4>)
 80033c6:	f043 0320 	orr.w	r3, r3, #32
 80033ca:	6213      	str	r3, [r2, #32]

	//Ukljucivanje brojaca
	TIM4->CR1 |= (0b1 << 0);
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <init_tim4+0x1f4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a06      	ldr	r2, [pc, #24]	; (80033ec <init_tim4+0x1f4>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6013      	str	r3, [r2, #0]

	//TIM3 -> CNT = izbrojano stanje na enkoderu
	//TIM3 -> CR1 - BIT4 -> DIR = u koju strane se enkoder vrti
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc90      	pop	{r4, r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020400 	.word	0x40020400
 80033ec:	40000800 	.word	0x40000800

080033f0 <enkoder_brzina2>:

int16_t enkoder_brzina2() {
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
	int16_t trenutna2 = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	80fb      	strh	r3, [r7, #6]
	trenutna2 = (int16_t) TIM4->CNT;
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <enkoder_brzina2+0x28>)
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	80fb      	strh	r3, [r7, #6]
	TIM4->CNT = 0;
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <enkoder_brzina2+0x28>)
 8003402:	2200      	movs	r2, #0
 8003404:	625a      	str	r2, [r3, #36]	; 0x24
	return trenutna2;
 8003406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40000800 	.word	0x40000800

0800341c <gpio_init>:
#include "gpio.h"

static void init_port_a(void);
static void init_port_c(void);

void gpio_init(void) {
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	init_port_a();
 8003420:	f000 f804 	bl	800342c <init_port_a>
	init_port_c();
 8003424:	f000 f846 	bl	80034b4 <init_port_c>
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}

0800342c <init_port_a>:

static void init_port_a(void) {
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
	//LED dioda PA5
	const uint8_t pin_a = 5;
 8003432:	2305      	movs	r3, #5
 8003434:	71fb      	strb	r3, [r7, #7]

	RCC->AHB1ENR |= (0b01 << 0);
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <init_port_a+0x80>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <init_port_a+0x80>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~(0b11 << 2 * pin_a);
 8003442:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <init_port_a+0x84>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	79fa      	ldrb	r2, [r7, #7]
 8003448:	0052      	lsls	r2, r2, #1
 800344a:	2103      	movs	r1, #3
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	43d2      	mvns	r2, r2
 8003452:	4611      	mov	r1, r2
 8003454:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <init_port_a+0x84>)
 8003456:	400b      	ands	r3, r1
 8003458:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0b01 << 2 * pin_a);
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <init_port_a+0x84>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	79fa      	ldrb	r2, [r7, #7]
 8003460:	0052      	lsls	r2, r2, #1
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	4611      	mov	r1, r2
 800346a:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <init_port_a+0x84>)
 800346c:	430b      	orrs	r3, r1
 800346e:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(0b01 << pin_a);
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <init_port_a+0x84>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	79fa      	ldrb	r2, [r7, #7]
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	43d2      	mvns	r2, r2
 800347e:	4611      	mov	r1, r2
 8003480:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <init_port_a+0x84>)
 8003482:	400b      	ands	r3, r1
 8003484:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~(0b11 << 2 * pin_a);
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <init_port_a+0x84>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	79fa      	ldrb	r2, [r7, #7]
 800348c:	0052      	lsls	r2, r2, #1
 800348e:	2103      	movs	r1, #3
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	43d2      	mvns	r2, r2
 8003496:	4611      	mov	r1, r2
 8003498:	4a05      	ldr	r2, [pc, #20]	; (80034b0 <init_port_a+0x84>)
 800349a:	400b      	ands	r3, r1
 800349c:	60d3      	str	r3, [r2, #12]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40020000 	.word	0x40020000

080034b4 <init_port_c>:
static void init_port_c(void) {
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
	//Button PC13
	const uint8_t pin_c = 13;
 80034ba:	230d      	movs	r3, #13
 80034bc:	71fb      	strb	r3, [r7, #7]
	//Cinc PC1
	const uint8_t pin_c_cinc = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	71bb      	strb	r3, [r7, #6]

	RCC->AHB1ENR |= (0b01 << 2);
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <init_port_c+0xb4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a28      	ldr	r2, [pc, #160]	; (8003568 <init_port_c+0xb4>)
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~(0b11 << 2 * pin_c);
 80034ce:	4b27      	ldr	r3, [pc, #156]	; (800356c <init_port_c+0xb8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	79fa      	ldrb	r2, [r7, #7]
 80034d4:	0052      	lsls	r2, r2, #1
 80034d6:	2103      	movs	r1, #3
 80034d8:	fa01 f202 	lsl.w	r2, r1, r2
 80034dc:	43d2      	mvns	r2, r2
 80034de:	4611      	mov	r1, r2
 80034e0:	4a22      	ldr	r2, [pc, #136]	; (800356c <init_port_c+0xb8>)
 80034e2:	400b      	ands	r3, r1
 80034e4:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(0b11 << 2 * pin_c_cinc);
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <init_port_c+0xb8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	79ba      	ldrb	r2, [r7, #6]
 80034ec:	0052      	lsls	r2, r2, #1
 80034ee:	2103      	movs	r1, #3
 80034f0:	fa01 f202 	lsl.w	r2, r1, r2
 80034f4:	43d2      	mvns	r2, r2
 80034f6:	4611      	mov	r1, r2
 80034f8:	4a1c      	ldr	r2, [pc, #112]	; (800356c <init_port_c+0xb8>)
 80034fa:	400b      	ands	r3, r1
 80034fc:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(0b01 << pin_c);
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <init_port_c+0xb8>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	79fa      	ldrb	r2, [r7, #7]
 8003504:	2101      	movs	r1, #1
 8003506:	fa01 f202 	lsl.w	r2, r1, r2
 800350a:	43d2      	mvns	r2, r2
 800350c:	4611      	mov	r1, r2
 800350e:	4a17      	ldr	r2, [pc, #92]	; (800356c <init_port_c+0xb8>)
 8003510:	400b      	ands	r3, r1
 8003512:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER &= ~(0b01 << pin_c_cinc);
 8003514:	4b15      	ldr	r3, [pc, #84]	; (800356c <init_port_c+0xb8>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	79ba      	ldrb	r2, [r7, #6]
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	43d2      	mvns	r2, r2
 8003522:	4611      	mov	r1, r2
 8003524:	4a11      	ldr	r2, [pc, #68]	; (800356c <init_port_c+0xb8>)
 8003526:	400b      	ands	r3, r1
 8003528:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR &= ~(0b11 << 2 * pin_c);
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <init_port_c+0xb8>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	79fa      	ldrb	r2, [r7, #7]
 8003530:	0052      	lsls	r2, r2, #1
 8003532:	2103      	movs	r1, #3
 8003534:	fa01 f202 	lsl.w	r2, r1, r2
 8003538:	43d2      	mvns	r2, r2
 800353a:	4611      	mov	r1, r2
 800353c:	4a0b      	ldr	r2, [pc, #44]	; (800356c <init_port_c+0xb8>)
 800353e:	400b      	ands	r3, r1
 8003540:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR &= ~(0b11 << 2 * pin_c_cinc);
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <init_port_c+0xb8>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	79ba      	ldrb	r2, [r7, #6]
 8003548:	0052      	lsls	r2, r2, #1
 800354a:	2103      	movs	r1, #3
 800354c:	fa01 f202 	lsl.w	r2, r1, r2
 8003550:	43d2      	mvns	r2, r2
 8003552:	4611      	mov	r1, r2
 8003554:	4a05      	ldr	r2, [pc, #20]	; (800356c <init_port_c+0xb8>)
 8003556:	400b      	ands	r3, r1
 8003558:	60d3      	str	r3, [r2, #12]
	//GPIOC->PUPDR |= (0b01 << 2 * pin_c_cinc);
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	40020800 	.word	0x40020800

08003570 <tajmer_init>:
static void init_tim11(void);
void step_delay(uint32_t ms);
volatile static uint32_t sistemsko_vreme = 0;
volatile static uint32_t sistemsko_vreme_mikro = 0;
volatile static uint32_t step_vreme = 0;
void tajmer_init(void) {
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
	init_tim10();
 8003574:	f000 f804 	bl	8003580 <init_tim10>
	init_tim11();
 8003578:	f000 f866 	bl	8003648 <init_tim11>
}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}

08003580 <init_tim10>:

static void init_tim10(void) {
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
	//Aktivacija tim_10
	RCC->APB2ENR |= (0b01 << 17);
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <init_tim10+0xbc>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	4a2c      	ldr	r2, [pc, #176]	; (800363c <init_tim10+0xbc>)
 800358c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003590:	6453      	str	r3, [r2, #68]	; 0x44
	TIM10->PSC = 84 - 1; //84
 8003592:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <init_tim10+0xc0>)
 8003594:	2253      	movs	r2, #83	; 0x53
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
	TIM10->ARR = 1000 - 1;
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <init_tim10+0xc0>)
 800359a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
	//Sta izaziva dogadjaj
	TIM10->CR1 &= ~(0b01 << 2);
 80035a0:	4b27      	ldr	r3, [pc, #156]	; (8003640 <init_tim10+0xc0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a26      	ldr	r2, [pc, #152]	; (8003640 <init_tim10+0xc0>)
 80035a6:	f023 0304 	bic.w	r3, r3, #4
 80035aa:	6013      	str	r3, [r2, #0]
	TIM10->CR1 &= ~(0b01 << 1);
 80035ac:	4b24      	ldr	r3, [pc, #144]	; (8003640 <init_tim10+0xc0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a23      	ldr	r2, [pc, #140]	; (8003640 <init_tim10+0xc0>)
 80035b2:	f023 0302 	bic.w	r3, r3, #2
 80035b6:	6013      	str	r3, [r2, #0]
	TIM10->DIER |= (0b01 << 0);
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <init_tim10+0xc0>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4a20      	ldr	r2, [pc, #128]	; (8003640 <init_tim10+0xc0>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	60d3      	str	r3, [r2, #12]
	TIM10->EGR |= (0b01 << 0);
 80035c4:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <init_tim10+0xc0>)
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <init_tim10+0xc0>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6153      	str	r3, [r2, #20]

	while (!(TIM10->SR & (0b01 << 0))) {
 80035d0:	e000      	b.n	80035d4 <init_tim10+0x54>
		__NOP();
 80035d2:	bf00      	nop
	while (!(TIM10->SR & (0b01 << 0))) {
 80035d4:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <init_tim10+0xc0>)
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f8      	beq.n	80035d2 <init_tim10+0x52>
	}
	TIM10->SR &= ~(0b01 << 0);
 80035e0:	4b17      	ldr	r3, [pc, #92]	; (8003640 <init_tim10+0xc0>)
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4a16      	ldr	r2, [pc, #88]	; (8003640 <init_tim10+0xc0>)
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	6113      	str	r3, [r2, #16]
	TIM10->CR1 |= (0b01 << 2);
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <init_tim10+0xc0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <init_tim10+0xc0>)
 80035f2:	f043 0304 	orr.w	r3, r3, #4
 80035f6:	6013      	str	r3, [r2, #0]

	const uint8_t prekidni_index = 25;
 80035f8:	2319      	movs	r3, #25
 80035fa:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[prekidni_index / 32] |= (0b01 << (prekidni_index % 32));
 80035fc:	4a11      	ldr	r2, [pc, #68]	; (8003644 <init_tim10+0xc4>)
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003608:	79fa      	ldrb	r2, [r7, #7]
 800360a:	f002 021f 	and.w	r2, r2, #31
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f202 	lsl.w	r2, r1, r2
 8003614:	4610      	mov	r0, r2
 8003616:	490b      	ldr	r1, [pc, #44]	; (8003644 <init_tim10+0xc4>)
 8003618:	79fa      	ldrb	r2, [r7, #7]
 800361a:	0952      	lsrs	r2, r2, #5
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	4303      	orrs	r3, r0
 8003620:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

	TIM10->CR1 |= (0b01 << 0);
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <init_tim10+0xc0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a05      	ldr	r2, [pc, #20]	; (8003640 <init_tim10+0xc0>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6013      	str	r3, [r2, #0]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40023800 	.word	0x40023800
 8003640:	40014400 	.word	0x40014400
 8003644:	e000e100 	.word	0xe000e100

08003648 <init_tim11>:
static void init_tim11(void) {
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (0b01 << 16);
 800364e:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <init_tim11+0xbc>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <init_tim11+0xbc>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6453      	str	r3, [r2, #68]	; 0x44
	TIM9->PSC = 0;
 800365a:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <init_tim11+0xc0>)
 800365c:	2200      	movs	r2, #0
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM9->ARR = 84 - 1;
 8003660:	4b29      	ldr	r3, [pc, #164]	; (8003708 <init_tim11+0xc0>)
 8003662:	2253      	movs	r2, #83	; 0x53
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM9->CR1 &= ~(0b01 << 2);
 8003666:	4b28      	ldr	r3, [pc, #160]	; (8003708 <init_tim11+0xc0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a27      	ldr	r2, [pc, #156]	; (8003708 <init_tim11+0xc0>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	6013      	str	r3, [r2, #0]
	TIM9->CR1 &= ~(0b01 << 1);
 8003672:	4b25      	ldr	r3, [pc, #148]	; (8003708 <init_tim11+0xc0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a24      	ldr	r2, [pc, #144]	; (8003708 <init_tim11+0xc0>)
 8003678:	f023 0302 	bic.w	r3, r3, #2
 800367c:	6013      	str	r3, [r2, #0]
	TIM9->DIER |= (0b01 << 0);
 800367e:	4b22      	ldr	r3, [pc, #136]	; (8003708 <init_tim11+0xc0>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4a21      	ldr	r2, [pc, #132]	; (8003708 <init_tim11+0xc0>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	60d3      	str	r3, [r2, #12]
	TIM9->EGR |= (0b01 << 0);
 800368a:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <init_tim11+0xc0>)
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <init_tim11+0xc0>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6153      	str	r3, [r2, #20]

	while (!(TIM9->SR & (0b01 << 0))) {
 8003696:	e000      	b.n	800369a <init_tim11+0x52>
		__NOP();
 8003698:	bf00      	nop
	while (!(TIM9->SR & (0b01 << 0))) {
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <init_tim11+0xc0>)
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f8      	beq.n	8003698 <init_tim11+0x50>
	}
	TIM9->SR &= ~(0b01 << 0);
 80036a6:	4b18      	ldr	r3, [pc, #96]	; (8003708 <init_tim11+0xc0>)
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	4a17      	ldr	r2, [pc, #92]	; (8003708 <init_tim11+0xc0>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6113      	str	r3, [r2, #16]
	TIM9->CR1 |= (0b01 << 2);
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <init_tim11+0xc0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a14      	ldr	r2, [pc, #80]	; (8003708 <init_tim11+0xc0>)
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	6013      	str	r3, [r2, #0]

	const uint8_t prekidni_index = 24;
 80036be:	2318      	movs	r3, #24
 80036c0:	71fb      	strb	r3, [r7, #7]
	NVIC->ISER[prekidni_index / 32] |= (0b01 << (prekidni_index % 32));
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <init_tim11+0xc4>)
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ce:	79fa      	ldrb	r2, [r7, #7]
 80036d0:	f002 021f 	and.w	r2, r2, #31
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f202 	lsl.w	r2, r1, r2
 80036da:	4610      	mov	r0, r2
 80036dc:	490b      	ldr	r1, [pc, #44]	; (800370c <init_tim11+0xc4>)
 80036de:	79fa      	ldrb	r2, [r7, #7]
 80036e0:	0952      	lsrs	r2, r2, #5
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	4303      	orrs	r3, r0
 80036e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	TIM9->CR1 |= (0b01 << 0);
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <init_tim11+0xc0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a06      	ldr	r2, [pc, #24]	; (8003708 <init_tim11+0xc0>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6013      	str	r3, [r2, #0]

}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	40014000 	.word	0x40014000
 800370c:	e000e100 	.word	0xe000e100

08003710 <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void) {
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
	if (TIM9->SR & (0b01 << 0)) {
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <TIM1_BRK_TIM9_IRQHandler+0x26>
		TIM9->SR &= ~(0b01 << 0);
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	4a06      	ldr	r2, [pc, #24]	; (8003740 <TIM1_BRK_TIM9_IRQHandler+0x30>)
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	6113      	str	r3, [r2, #16]
		sistemsko_vreme_mikro++;
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <TIM1_BRK_TIM9_IRQHandler+0x34>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	4a04      	ldr	r2, [pc, #16]	; (8003744 <TIM1_BRK_TIM9_IRQHandler+0x34>)
 8003734:	6013      	str	r3, [r2, #0]

	}
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40014000 	.word	0x40014000
 8003744:	20000104 	.word	0x20000104

08003748 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	if (TIM10->SR & (0b01 << 0)) {
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00e      	beq.n	8003776 <TIM1_UP_TIM10_IRQHandler+0x2e>
		TIM10->SR &= ~(0b01 << 0);
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	4a07      	ldr	r2, [pc, #28]	; (800377c <TIM1_UP_TIM10_IRQHandler+0x34>)
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	6113      	str	r3, [r2, #16]
		sistemsko_vreme++;
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	4a05      	ldr	r2, [pc, #20]	; (8003780 <TIM1_UP_TIM10_IRQHandler+0x38>)
 800376c:	6013      	str	r3, [r2, #0]
		odometrija_stanje();
 800376e:	f7fd ff65 	bl	800163c <odometrija_stanje>
		regulacija();
 8003772:	f7fe f88d 	bl	8001890 <regulacija>
	}
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40014400 	.word	0x40014400
 8003780:	20000100 	.word	0x20000100

08003784 <uart_init>:
volatile static uint16_t ugao = 0;
volatile static uint16_t p1 = 0;
volatile static uint16_t p2 = 0;
volatile static uint16_t p = 0;

void uart_init(void) {
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	init_usart6();
 8003788:	f000 f802 	bl	8003790 <init_usart6>
}
 800378c:	bf00      	nop
 800378e:	bd80      	pop	{r7, pc}

08003790 <init_usart6>:

static void init_usart6(void) {
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
	//Za AX-eve
	//USART6 TX - PC6
	//USART6 RX - PC7

	const uint8_t pin_tx = 6;
 8003796:	2306      	movs	r3, #6
 8003798:	71fb      	strb	r3, [r7, #7]
	const uint8_t pin_rx = 7;
 800379a:	2307      	movs	r3, #7
 800379c:	71bb      	strb	r3, [r7, #6]
	const uint8_t alternativna_funkcija = 8;
 800379e:	2308      	movs	r3, #8
 80037a0:	717b      	strb	r3, [r7, #5]

	RCC->APB2ENR |= (0b01 << 5);
 80037a2:	4b71      	ldr	r3, [pc, #452]	; (8003968 <init_usart6+0x1d8>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	4a70      	ldr	r2, [pc, #448]	; (8003968 <init_usart6+0x1d8>)
 80037a8:	f043 0320 	orr.w	r3, r3, #32
 80037ac:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= (0b01 << 2);
 80037ae:	4b6e      	ldr	r3, [pc, #440]	; (8003968 <init_usart6+0x1d8>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	4a6d      	ldr	r2, [pc, #436]	; (8003968 <init_usart6+0x1d8>)
 80037b4:	f043 0304 	orr.w	r3, r3, #4
 80037b8:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC->MODER &= ~(0b11 << 2 * pin_tx);
 80037ba:	4b6c      	ldr	r3, [pc, #432]	; (800396c <init_usart6+0x1dc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	79fa      	ldrb	r2, [r7, #7]
 80037c0:	0052      	lsls	r2, r2, #1
 80037c2:	2103      	movs	r1, #3
 80037c4:	fa01 f202 	lsl.w	r2, r1, r2
 80037c8:	43d2      	mvns	r2, r2
 80037ca:	4611      	mov	r1, r2
 80037cc:	4a67      	ldr	r2, [pc, #412]	; (800396c <init_usart6+0x1dc>)
 80037ce:	400b      	ands	r3, r1
 80037d0:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b10 << 2 * pin_tx);
 80037d2:	4b66      	ldr	r3, [pc, #408]	; (800396c <init_usart6+0x1dc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	79fa      	ldrb	r2, [r7, #7]
 80037d8:	0052      	lsls	r2, r2, #1
 80037da:	2102      	movs	r1, #2
 80037dc:	fa01 f202 	lsl.w	r2, r1, r2
 80037e0:	4611      	mov	r1, r2
 80037e2:	4a62      	ldr	r2, [pc, #392]	; (800396c <init_usart6+0x1dc>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(0b11 << 2 * pin_rx);
 80037e8:	4b60      	ldr	r3, [pc, #384]	; (800396c <init_usart6+0x1dc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	79ba      	ldrb	r2, [r7, #6]
 80037ee:	0052      	lsls	r2, r2, #1
 80037f0:	2103      	movs	r1, #3
 80037f2:	fa01 f202 	lsl.w	r2, r1, r2
 80037f6:	43d2      	mvns	r2, r2
 80037f8:	4611      	mov	r1, r2
 80037fa:	4a5c      	ldr	r2, [pc, #368]	; (800396c <init_usart6+0x1dc>)
 80037fc:	400b      	ands	r3, r1
 80037fe:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b10 << 2 * pin_rx);
 8003800:	4b5a      	ldr	r3, [pc, #360]	; (800396c <init_usart6+0x1dc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	79ba      	ldrb	r2, [r7, #6]
 8003806:	0052      	lsls	r2, r2, #1
 8003808:	2102      	movs	r1, #2
 800380a:	fa01 f202 	lsl.w	r2, r1, r2
 800380e:	4611      	mov	r1, r2
 8003810:	4a56      	ldr	r2, [pc, #344]	; (800396c <init_usart6+0x1dc>)
 8003812:	430b      	orrs	r3, r1
 8003814:	6013      	str	r3, [r2, #0]

	//AF8
	//Half duplex
	GPIOC->OTYPER |= (0b01 << pin_tx);
 8003816:	4b55      	ldr	r3, [pc, #340]	; (800396c <init_usart6+0x1dc>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	79fa      	ldrb	r2, [r7, #7]
 800381c:	2101      	movs	r1, #1
 800381e:	fa01 f202 	lsl.w	r2, r1, r2
 8003822:	4611      	mov	r1, r2
 8003824:	4a51      	ldr	r2, [pc, #324]	; (800396c <init_usart6+0x1dc>)
 8003826:	430b      	orrs	r3, r1
 8003828:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR &= ~(0b11 << 2 * pin_tx);
 800382a:	4b50      	ldr	r3, [pc, #320]	; (800396c <init_usart6+0x1dc>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	79fa      	ldrb	r2, [r7, #7]
 8003830:	0052      	lsls	r2, r2, #1
 8003832:	2103      	movs	r1, #3
 8003834:	fa01 f202 	lsl.w	r2, r1, r2
 8003838:	43d2      	mvns	r2, r2
 800383a:	4611      	mov	r1, r2
 800383c:	4a4b      	ldr	r2, [pc, #300]	; (800396c <init_usart6+0x1dc>)
 800383e:	400b      	ands	r3, r1
 8003840:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0b01 << 2 * pin_tx);
 8003842:	4b4a      	ldr	r3, [pc, #296]	; (800396c <init_usart6+0x1dc>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	79fa      	ldrb	r2, [r7, #7]
 8003848:	0052      	lsls	r2, r2, #1
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f202 	lsl.w	r2, r1, r2
 8003850:	4611      	mov	r1, r2
 8003852:	4a46      	ldr	r2, [pc, #280]	; (800396c <init_usart6+0x1dc>)
 8003854:	430b      	orrs	r3, r1
 8003856:	60d3      	str	r3, [r2, #12]

	GPIOC->AFR[0] &= ~(0b1111 << 4 * pin_tx);
 8003858:	4b44      	ldr	r3, [pc, #272]	; (800396c <init_usart6+0x1dc>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	79fa      	ldrb	r2, [r7, #7]
 800385e:	0092      	lsls	r2, r2, #2
 8003860:	210f      	movs	r1, #15
 8003862:	fa01 f202 	lsl.w	r2, r1, r2
 8003866:	43d2      	mvns	r2, r2
 8003868:	4611      	mov	r1, r2
 800386a:	4a40      	ldr	r2, [pc, #256]	; (800396c <init_usart6+0x1dc>)
 800386c:	400b      	ands	r3, r1
 800386e:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (alternativna_funkcija << 4 * pin_tx);
 8003870:	4b3e      	ldr	r3, [pc, #248]	; (800396c <init_usart6+0x1dc>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	7979      	ldrb	r1, [r7, #5]
 8003876:	79fa      	ldrb	r2, [r7, #7]
 8003878:	0092      	lsls	r2, r2, #2
 800387a:	fa01 f202 	lsl.w	r2, r1, r2
 800387e:	4611      	mov	r1, r2
 8003880:	4a3a      	ldr	r2, [pc, #232]	; (800396c <init_usart6+0x1dc>)
 8003882:	430b      	orrs	r3, r1
 8003884:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] &= ~(0b1111 << 4 * pin_rx);
 8003886:	4b39      	ldr	r3, [pc, #228]	; (800396c <init_usart6+0x1dc>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	79ba      	ldrb	r2, [r7, #6]
 800388c:	0092      	lsls	r2, r2, #2
 800388e:	210f      	movs	r1, #15
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	43d2      	mvns	r2, r2
 8003896:	4611      	mov	r1, r2
 8003898:	4a34      	ldr	r2, [pc, #208]	; (800396c <init_usart6+0x1dc>)
 800389a:	400b      	ands	r3, r1
 800389c:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (alternativna_funkcija << 4 * pin_rx);
 800389e:	4b33      	ldr	r3, [pc, #204]	; (800396c <init_usart6+0x1dc>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	7979      	ldrb	r1, [r7, #5]
 80038a4:	79ba      	ldrb	r2, [r7, #6]
 80038a6:	0092      	lsls	r2, r2, #2
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	4611      	mov	r1, r2
 80038ae:	4a2f      	ldr	r2, [pc, #188]	; (800396c <init_usart6+0x1dc>)
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6213      	str	r3, [r2, #32]

	//Podesavanje UART-A
	USART6->CR1 &= ~(0b01 << 12); //Duzina reci
 80038b4:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <init_usart6+0x1e0>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a2d      	ldr	r2, [pc, #180]	; (8003970 <init_usart6+0x1e0>)
 80038ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038be:	60d3      	str	r3, [r2, #12]
	USART6->CR2 &= ~(0b11 << 12); //Broj stop bita: 1
 80038c0:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <init_usart6+0x1e0>)
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <init_usart6+0x1e0>)
 80038c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038ca:	6113      	str	r3, [r2, #16]
	//Baud rate, ima formula
	USART6->BRR &= ~(0xFFFF << 0);
 80038cc:	4b28      	ldr	r3, [pc, #160]	; (8003970 <init_usart6+0x1e0>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <init_usart6+0x1e0>)
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	6093      	str	r3, [r2, #8]
	USART6->BRR |= (91 << 4) | (3 << 0); //57600
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <init_usart6+0x1e0>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a24      	ldr	r2, [pc, #144]	; (8003970 <init_usart6+0x1e0>)
 80038de:	f443 63b6 	orr.w	r3, r3, #1456	; 0x5b0
 80038e2:	f043 0303 	orr.w	r3, r3, #3
 80038e6:	6093      	str	r3, [r2, #8]
	//USART6->BRR |= (22 << 4 | 13);
	//Ukljucivanje TX-a i RX-a
	USART6->CR1 |= ((0b01 << 2) | (0b01 << 3));
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <init_usart6+0x1e0>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a20      	ldr	r2, [pc, #128]	; (8003970 <init_usart6+0x1e0>)
 80038ee:	f043 030c 	orr.w	r3, r3, #12
 80038f2:	60d3      	str	r3, [r2, #12]
	//Desava se prekid kad se nesto pojavi na RX-u
	USART6->CR1 |= (0b01 << 5);
 80038f4:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <init_usart6+0x1e0>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <init_usart6+0x1e0>)
 80038fa:	f043 0320 	orr.w	r3, r3, #32
 80038fe:	60d3      	str	r3, [r2, #12]
	//Ovo je potrebno da bude na nuli pise na 557 strani za half-duplex
	USART6->CR2 &= ~((0b01 << 14) | (0b01 << 11));
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <init_usart6+0x1e0>)
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <init_usart6+0x1e0>)
 8003906:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800390a:	6113      	str	r3, [r2, #16]
	USART6->CR3 &= ~((0b01 << 5) | (0b01 << 7));
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <init_usart6+0x1e0>)
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	4a17      	ldr	r2, [pc, #92]	; (8003970 <init_usart6+0x1e0>)
 8003912:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003916:	6153      	str	r3, [r2, #20]
	//Half duplex mode
	USART6->CR3 |= (0b01 << 3);
 8003918:	4b15      	ldr	r3, [pc, #84]	; (8003970 <init_usart6+0x1e0>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4a14      	ldr	r2, [pc, #80]	; (8003970 <init_usart6+0x1e0>)
 800391e:	f043 0308 	orr.w	r3, r3, #8
 8003922:	6153      	str	r3, [r2, #20]
	//Ukljucivanje UART-a
	USART6->CR1 |= (0b01 << 13);
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <init_usart6+0x1e0>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4a11      	ldr	r2, [pc, #68]	; (8003970 <init_usart6+0x1e0>)
 800392a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800392e:	60d3      	str	r3, [r2, #12]

	const uint8_t index_prekida = 71;
 8003930:	2347      	movs	r3, #71	; 0x47
 8003932:	713b      	strb	r3, [r7, #4]
	NVIC->ISER[index_prekida / 32] |= (0b01 << (index_prekida % 32));
 8003934:	4a0f      	ldr	r2, [pc, #60]	; (8003974 <init_usart6+0x1e4>)
 8003936:	793b      	ldrb	r3, [r7, #4]
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003940:	793a      	ldrb	r2, [r7, #4]
 8003942:	f002 021f 	and.w	r2, r2, #31
 8003946:	2101      	movs	r1, #1
 8003948:	fa01 f202 	lsl.w	r2, r1, r2
 800394c:	4610      	mov	r0, r2
 800394e:	4909      	ldr	r1, [pc, #36]	; (8003974 <init_usart6+0x1e4>)
 8003950:	793a      	ldrb	r2, [r7, #4]
 8003952:	0952      	lsrs	r2, r2, #5
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	4303      	orrs	r3, r0
 8003958:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40023800 	.word	0x40023800
 800396c:	40020800 	.word	0x40020800
 8003970:	40011400 	.word	0x40011400
 8003974:	e000e100 	.word	0xe000e100

08003978 <USART6_IRQHandler>:

void USART6_IRQHandler(void) {
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
	if (USART6->SR & (0b01 << 5)) {
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <USART6_IRQHandler+0x24>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <USART6_IRQHandler+0x20>
		upis_u_bafer6(USART6->DR);
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <USART6_IRQHandler+0x24>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f806 	bl	80039a0 <upis_u_bafer6>
		parseBafer();
 8003994:	f000 f86e 	bl	8003a74 <parseBafer>
	}
}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40011400 	.word	0x40011400

080039a0 <upis_u_bafer6>:

static void upis_u_bafer6(uint8_t podatak) {
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
	if (velicina != 30) {
 80039aa:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <upis_u_bafer6+0xc0>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b1e      	cmp	r3, #30
 80039b2:	d021      	beq.n	80039f8 <upis_u_bafer6+0x58>
		bafer[index_upisa] = podatak;
 80039b4:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <upis_u_bafer6+0xc4>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4619      	mov	r1, r3
 80039bc:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <upis_u_bafer6+0xc8>)
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	5453      	strb	r3, [r2, r1]
		index_upisa = (index_upisa + 1) % 30;
 80039c2:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <upis_u_bafer6+0xc4>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	4b28      	ldr	r3, [pc, #160]	; (8003a6c <upis_u_bafer6+0xcc>)
 80039cc:	fb83 1302 	smull	r1, r3, r3, r2
 80039d0:	4413      	add	r3, r2
 80039d2:	1119      	asrs	r1, r3, #4
 80039d4:	17d3      	asrs	r3, r2, #31
 80039d6:	1ac9      	subs	r1, r1, r3
 80039d8:	460b      	mov	r3, r1
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a5b      	subs	r3, r3, r1
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	1ad1      	subs	r1, r2, r3
 80039e2:	b2ca      	uxtb	r2, r1
 80039e4:	4b1f      	ldr	r3, [pc, #124]	; (8003a64 <upis_u_bafer6+0xc4>)
 80039e6:	701a      	strb	r2, [r3, #0]
		velicina++;
 80039e8:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <upis_u_bafer6+0xc0>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	3301      	adds	r3, #1
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <upis_u_bafer6+0xc0>)
 80039f4:	701a      	strb	r2, [r3, #0]
	} else {
		bafer[index_upisa] = podatak;
		index_upisa = (index_upisa + 1) % 30;
		index_citanja = (index_citanja + 1) % 30;
	}
}
 80039f6:	e02c      	b.n	8003a52 <upis_u_bafer6+0xb2>
		bafer[index_upisa] = podatak;
 80039f8:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <upis_u_bafer6+0xc4>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	4619      	mov	r1, r3
 8003a00:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <upis_u_bafer6+0xc8>)
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	5453      	strb	r3, [r2, r1]
		index_upisa = (index_upisa + 1) % 30;
 8003a06:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <upis_u_bafer6+0xc4>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <upis_u_bafer6+0xcc>)
 8003a10:	fb83 1302 	smull	r1, r3, r3, r2
 8003a14:	4413      	add	r3, r2
 8003a16:	1119      	asrs	r1, r3, #4
 8003a18:	17d3      	asrs	r3, r2, #31
 8003a1a:	1ac9      	subs	r1, r1, r3
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a5b      	subs	r3, r3, r1
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	1ad1      	subs	r1, r2, r3
 8003a26:	b2ca      	uxtb	r2, r1
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <upis_u_bafer6+0xc4>)
 8003a2a:	701a      	strb	r2, [r3, #0]
		index_citanja = (index_citanja + 1) % 30;
 8003a2c:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <upis_u_bafer6+0xd0>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <upis_u_bafer6+0xcc>)
 8003a36:	fb83 1302 	smull	r1, r3, r3, r2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	1119      	asrs	r1, r3, #4
 8003a3e:	17d3      	asrs	r3, r2, #31
 8003a40:	1ac9      	subs	r1, r1, r3
 8003a42:	460b      	mov	r3, r1
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a5b      	subs	r3, r3, r1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	1ad1      	subs	r1, r2, r3
 8003a4c:	b2ca      	uxtb	r2, r1
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <upis_u_bafer6+0xd0>)
 8003a50:	701a      	strb	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000126 	.word	0x20000126
 8003a64:	20000127 	.word	0x20000127
 8003a68:	20000108 	.word	0x20000108
 8003a6c:	88888889 	.word	0x88888889
 8003a70:	20000128 	.word	0x20000128

08003a74 <parseBafer>:
		uart_send_byte(*str);
		str++;
	}
}

static void parseBafer() {
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0

	static uint8_t i = 0;
	static uint8_t korak = 1;

	if (velicina == 0) //proveriti da li bafer nije prazan
 8003a78:	4b8f      	ldr	r3, [pc, #572]	; (8003cb8 <parseBafer+0x244>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8223 	beq.w	8003eca <parseBafer+0x456>
			{
		return;
	}

	switch (korak) {
 8003a84:	4b8d      	ldr	r3, [pc, #564]	; (8003cbc <parseBafer+0x248>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	2b0a      	cmp	r3, #10
 8003a8c:	f200 8220 	bhi.w	8003ed0 <parseBafer+0x45c>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <parseBafer+0x24>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003ac5 	.word	0x08003ac5
 8003a9c:	08003b1b 	.word	0x08003b1b
 8003aa0:	08003ba5 	.word	0x08003ba5
 8003aa4:	08003c01 	.word	0x08003c01
 8003aa8:	08003c5d 	.word	0x08003c5d
 8003aac:	08003cd5 	.word	0x08003cd5
 8003ab0:	08003d2f 	.word	0x08003d2f
 8003ab4:	08003d8b 	.word	0x08003d8b
 8003ab8:	08003de7 	.word	0x08003de7
 8003abc:	08003e01 	.word	0x08003e01
 8003ac0:	08003e6d 	.word	0x08003e6d
	case 1:
		if (bafer[index_citanja] == 0xFF) //da li je 255
 8003ac4:	4b7e      	ldr	r3, [pc, #504]	; (8003cc0 <parseBafer+0x24c>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b7d      	ldr	r3, [pc, #500]	; (8003cc4 <parseBafer+0x250>)
 8003ace:	5c9b      	ldrb	r3, [r3, r2]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2bff      	cmp	r3, #255	; 0xff
 8003ad4:	f040 81fb 	bne.w	8003ece <parseBafer+0x45a>
				{
			i = 0;
 8003ad8:	4b7b      	ldr	r3, [pc, #492]	; (8003cc8 <parseBafer+0x254>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
			index_citanja = (index_citanja + 1) % 30;
 8003ade:	4b78      	ldr	r3, [pc, #480]	; (8003cc0 <parseBafer+0x24c>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <parseBafer+0x258>)
 8003ae8:	fb83 1302 	smull	r1, r3, r3, r2
 8003aec:	4413      	add	r3, r2
 8003aee:	1119      	asrs	r1, r3, #4
 8003af0:	17d3      	asrs	r3, r2, #31
 8003af2:	1ac9      	subs	r1, r1, r3
 8003af4:	460b      	mov	r3, r1
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a5b      	subs	r3, r3, r1
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	1ad1      	subs	r1, r2, r3
 8003afe:	b2ca      	uxtb	r2, r1
 8003b00:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <parseBafer+0x24c>)
 8003b02:	701a      	strb	r2, [r3, #0]
			velicina--;
 8003b04:	4b6c      	ldr	r3, [pc, #432]	; (8003cb8 <parseBafer+0x244>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <parseBafer+0x244>)
 8003b10:	701a      	strb	r2, [r3, #0]
			korak = 2;
 8003b12:	4b6a      	ldr	r3, [pc, #424]	; (8003cbc <parseBafer+0x248>)
 8003b14:	2202      	movs	r2, #2
 8003b16:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003b18:	e1d9      	b.n	8003ece <parseBafer+0x45a>
	case 2:
		if (bafer[index_citanja] == 0xFF) {
 8003b1a:	4b69      	ldr	r3, [pc, #420]	; (8003cc0 <parseBafer+0x24c>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b68      	ldr	r3, [pc, #416]	; (8003cc4 <parseBafer+0x250>)
 8003b24:	5c9b      	ldrb	r3, [r3, r2]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2bff      	cmp	r3, #255	; 0xff
 8003b2a:	d11d      	bne.n	8003b68 <parseBafer+0xf4>
			index_citanja = (index_citanja + 1) % 30;
 8003b2c:	4b64      	ldr	r3, [pc, #400]	; (8003cc0 <parseBafer+0x24c>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	4b65      	ldr	r3, [pc, #404]	; (8003ccc <parseBafer+0x258>)
 8003b36:	fb83 1302 	smull	r1, r3, r3, r2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	1119      	asrs	r1, r3, #4
 8003b3e:	17d3      	asrs	r3, r2, #31
 8003b40:	1ac9      	subs	r1, r1, r3
 8003b42:	460b      	mov	r3, r1
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	1a5b      	subs	r3, r3, r1
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	1ad1      	subs	r1, r2, r3
 8003b4c:	b2ca      	uxtb	r2, r1
 8003b4e:	4b5c      	ldr	r3, [pc, #368]	; (8003cc0 <parseBafer+0x24c>)
 8003b50:	701a      	strb	r2, [r3, #0]
			velicina--;
 8003b52:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <parseBafer+0x244>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	4b56      	ldr	r3, [pc, #344]	; (8003cb8 <parseBafer+0x244>)
 8003b5e:	701a      	strb	r2, [r3, #0]
			korak = 3;
 8003b60:	4b56      	ldr	r3, [pc, #344]	; (8003cbc <parseBafer+0x248>)
 8003b62:	2203      	movs	r2, #3
 8003b64:	701a      	strb	r2, [r3, #0]
		} else {
			index_citanja = (index_citanja + 1) % 30;
			velicina--;
			korak = 1;
		}
		break;
 8003b66:	e1b3      	b.n	8003ed0 <parseBafer+0x45c>
			index_citanja = (index_citanja + 1) % 30;
 8003b68:	4b55      	ldr	r3, [pc, #340]	; (8003cc0 <parseBafer+0x24c>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	4b56      	ldr	r3, [pc, #344]	; (8003ccc <parseBafer+0x258>)
 8003b72:	fb83 1302 	smull	r1, r3, r3, r2
 8003b76:	4413      	add	r3, r2
 8003b78:	1119      	asrs	r1, r3, #4
 8003b7a:	17d3      	asrs	r3, r2, #31
 8003b7c:	1ac9      	subs	r1, r1, r3
 8003b7e:	460b      	mov	r3, r1
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a5b      	subs	r3, r3, r1
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	1ad1      	subs	r1, r2, r3
 8003b88:	b2ca      	uxtb	r2, r1
 8003b8a:	4b4d      	ldr	r3, [pc, #308]	; (8003cc0 <parseBafer+0x24c>)
 8003b8c:	701a      	strb	r2, [r3, #0]
			velicina--;
 8003b8e:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <parseBafer+0x244>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	4b47      	ldr	r3, [pc, #284]	; (8003cb8 <parseBafer+0x244>)
 8003b9a:	701a      	strb	r2, [r3, #0]
			korak = 1;
 8003b9c:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <parseBafer+0x248>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
		break;
 8003ba2:	e195      	b.n	8003ed0 <parseBafer+0x45c>
	case 3:
		niz_AX[0] = bafer[index_citanja]; //ovde citamo ID
 8003ba4:	4b46      	ldr	r3, [pc, #280]	; (8003cc0 <parseBafer+0x24c>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b45      	ldr	r3, [pc, #276]	; (8003cc4 <parseBafer+0x250>)
 8003bae:	5c9b      	ldrb	r3, [r3, r2]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	4b46      	ldr	r3, [pc, #280]	; (8003cd0 <parseBafer+0x25c>)
 8003bb6:	801a      	strh	r2, [r3, #0]
		index_citanja = (index_citanja + 1) % 30;
 8003bb8:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <parseBafer+0x24c>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	4b42      	ldr	r3, [pc, #264]	; (8003ccc <parseBafer+0x258>)
 8003bc2:	fb83 1302 	smull	r1, r3, r3, r2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	1119      	asrs	r1, r3, #4
 8003bca:	17d3      	asrs	r3, r2, #31
 8003bcc:	1ac9      	subs	r1, r1, r3
 8003bce:	460b      	mov	r3, r1
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a5b      	subs	r3, r3, r1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	1ad1      	subs	r1, r2, r3
 8003bd8:	b2ca      	uxtb	r2, r1
 8003bda:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <parseBafer+0x24c>)
 8003bdc:	701a      	strb	r2, [r3, #0]
		velicina--;
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <parseBafer+0x244>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	4b33      	ldr	r3, [pc, #204]	; (8003cb8 <parseBafer+0x244>)
 8003bea:	701a      	strb	r2, [r3, #0]
		i++;
 8003bec:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <parseBafer+0x254>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <parseBafer+0x254>)
 8003bf6:	701a      	strb	r2, [r3, #0]
		korak = 4;
 8003bf8:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <parseBafer+0x248>)
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	701a      	strb	r2, [r3, #0]
		break;
 8003bfe:	e167      	b.n	8003ed0 <parseBafer+0x45c>
	case 4:
		niz_AX[1] = bafer[index_citanja]; //ovde citamo len
 8003c00:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <parseBafer+0x24c>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <parseBafer+0x250>)
 8003c0a:	5c9b      	ldrb	r3, [r3, r2]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	4b2f      	ldr	r3, [pc, #188]	; (8003cd0 <parseBafer+0x25c>)
 8003c12:	805a      	strh	r2, [r3, #2]
		index_citanja = (index_citanja + 1) % 30;
 8003c14:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <parseBafer+0x24c>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <parseBafer+0x258>)
 8003c1e:	fb83 1302 	smull	r1, r3, r3, r2
 8003c22:	4413      	add	r3, r2
 8003c24:	1119      	asrs	r1, r3, #4
 8003c26:	17d3      	asrs	r3, r2, #31
 8003c28:	1ac9      	subs	r1, r1, r3
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a5b      	subs	r3, r3, r1
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	1ad1      	subs	r1, r2, r3
 8003c34:	b2ca      	uxtb	r2, r1
 8003c36:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <parseBafer+0x24c>)
 8003c38:	701a      	strb	r2, [r3, #0]
		velicina--;
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <parseBafer+0x244>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <parseBafer+0x244>)
 8003c46:	701a      	strb	r2, [r3, #0]
		i++;
 8003c48:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <parseBafer+0x254>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <parseBafer+0x254>)
 8003c52:	701a      	strb	r2, [r3, #0]
		korak = 5;
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <parseBafer+0x248>)
 8003c56:	2205      	movs	r2, #5
 8003c58:	701a      	strb	r2, [r3, #0]
		break;
 8003c5a:	e139      	b.n	8003ed0 <parseBafer+0x45c>
	case 5:
		niz_AX[2] = bafer[index_citanja]; //citamo error
 8003c5c:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <parseBafer+0x24c>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <parseBafer+0x250>)
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <parseBafer+0x25c>)
 8003c6e:	809a      	strh	r2, [r3, #4]
		index_citanja = (index_citanja + 1) % 30;
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <parseBafer+0x24c>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <parseBafer+0x258>)
 8003c7a:	fb83 1302 	smull	r1, r3, r3, r2
 8003c7e:	4413      	add	r3, r2
 8003c80:	1119      	asrs	r1, r3, #4
 8003c82:	17d3      	asrs	r3, r2, #31
 8003c84:	1ac9      	subs	r1, r1, r3
 8003c86:	460b      	mov	r3, r1
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	1a5b      	subs	r3, r3, r1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	1ad1      	subs	r1, r2, r3
 8003c90:	b2ca      	uxtb	r2, r1
 8003c92:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <parseBafer+0x24c>)
 8003c94:	701a      	strb	r2, [r3, #0]
		velicina--;
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <parseBafer+0x244>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <parseBafer+0x244>)
 8003ca2:	701a      	strb	r2, [r3, #0]
		i++;
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <parseBafer+0x254>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <parseBafer+0x254>)
 8003cae:	701a      	strb	r2, [r3, #0]
		korak = 6;
 8003cb0:	4b02      	ldr	r3, [pc, #8]	; (8003cbc <parseBafer+0x248>)
 8003cb2:	2206      	movs	r2, #6
 8003cb4:	701a      	strb	r2, [r3, #0]
		break;
 8003cb6:	e10b      	b.n	8003ed0 <parseBafer+0x45c>
 8003cb8:	20000126 	.word	0x20000126
 8003cbc:	20000010 	.word	0x20000010
 8003cc0:	20000128 	.word	0x20000128
 8003cc4:	20000108 	.word	0x20000108
 8003cc8:	20000142 	.word	0x20000142
 8003ccc:	88888889 	.word	0x88888889
 8003cd0:	2000012c 	.word	0x2000012c
	case 6:
		niz_AX[3] = bafer[index_citanja]; //prvi parametar pozicije
 8003cd4:	4b80      	ldr	r3, [pc, #512]	; (8003ed8 <parseBafer+0x464>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4b7f      	ldr	r3, [pc, #508]	; (8003edc <parseBafer+0x468>)
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <parseBafer+0x46c>)
 8003ce6:	80da      	strh	r2, [r3, #6]
		index_citanja = (index_citanja + 1) % 30;
 8003ce8:	4b7b      	ldr	r3, [pc, #492]	; (8003ed8 <parseBafer+0x464>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	4b7c      	ldr	r3, [pc, #496]	; (8003ee4 <parseBafer+0x470>)
 8003cf2:	fb83 1302 	smull	r1, r3, r3, r2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	1119      	asrs	r1, r3, #4
 8003cfa:	17d3      	asrs	r3, r2, #31
 8003cfc:	1ac9      	subs	r1, r1, r3
 8003cfe:	460b      	mov	r3, r1
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a5b      	subs	r3, r3, r1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	1ad1      	subs	r1, r2, r3
 8003d08:	b2ca      	uxtb	r2, r1
 8003d0a:	4b73      	ldr	r3, [pc, #460]	; (8003ed8 <parseBafer+0x464>)
 8003d0c:	701a      	strb	r2, [r3, #0]
		velicina--;
 8003d0e:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <parseBafer+0x474>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	4b73      	ldr	r3, [pc, #460]	; (8003ee8 <parseBafer+0x474>)
 8003d1a:	701a      	strb	r2, [r3, #0]
		i++;
 8003d1c:	4b73      	ldr	r3, [pc, #460]	; (8003eec <parseBafer+0x478>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	4b71      	ldr	r3, [pc, #452]	; (8003eec <parseBafer+0x478>)
 8003d26:	701a      	strb	r2, [r3, #0]
		korak = 7;
 8003d28:	4b71      	ldr	r3, [pc, #452]	; (8003ef0 <parseBafer+0x47c>)
 8003d2a:	2207      	movs	r2, #7
 8003d2c:	701a      	strb	r2, [r3, #0]
	case 7:
		niz_AX[4] = bafer[index_citanja]; //drugi parametar pozicije
 8003d2e:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <parseBafer+0x464>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b69      	ldr	r3, [pc, #420]	; (8003edc <parseBafer+0x468>)
 8003d38:	5c9b      	ldrb	r3, [r3, r2]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	4b68      	ldr	r3, [pc, #416]	; (8003ee0 <parseBafer+0x46c>)
 8003d40:	811a      	strh	r2, [r3, #8]
		index_citanja = (index_citanja + 1) % 30;
 8003d42:	4b65      	ldr	r3, [pc, #404]	; (8003ed8 <parseBafer+0x464>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	4b66      	ldr	r3, [pc, #408]	; (8003ee4 <parseBafer+0x470>)
 8003d4c:	fb83 1302 	smull	r1, r3, r3, r2
 8003d50:	4413      	add	r3, r2
 8003d52:	1119      	asrs	r1, r3, #4
 8003d54:	17d3      	asrs	r3, r2, #31
 8003d56:	1ac9      	subs	r1, r1, r3
 8003d58:	460b      	mov	r3, r1
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	1a5b      	subs	r3, r3, r1
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	1ad1      	subs	r1, r2, r3
 8003d62:	b2ca      	uxtb	r2, r1
 8003d64:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <parseBafer+0x464>)
 8003d66:	701a      	strb	r2, [r3, #0]
		velicina--;
 8003d68:	4b5f      	ldr	r3, [pc, #380]	; (8003ee8 <parseBafer+0x474>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4b5d      	ldr	r3, [pc, #372]	; (8003ee8 <parseBafer+0x474>)
 8003d74:	701a      	strb	r2, [r3, #0]
		i++;
 8003d76:	4b5d      	ldr	r3, [pc, #372]	; (8003eec <parseBafer+0x478>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4b5b      	ldr	r3, [pc, #364]	; (8003eec <parseBafer+0x478>)
 8003d80:	701a      	strb	r2, [r3, #0]
		korak = 8;
 8003d82:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <parseBafer+0x47c>)
 8003d84:	2208      	movs	r2, #8
 8003d86:	701a      	strb	r2, [r3, #0]
		break;
 8003d88:	e0a2      	b.n	8003ed0 <parseBafer+0x45c>
	case 8:
		niz_AX[5] = bafer[index_citanja]; //checksum
 8003d8a:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <parseBafer+0x464>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b52      	ldr	r3, [pc, #328]	; (8003edc <parseBafer+0x468>)
 8003d94:	5c9b      	ldrb	r3, [r3, r2]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <parseBafer+0x46c>)
 8003d9c:	815a      	strh	r2, [r3, #10]
		index_citanja = (index_citanja + 1) % 30;
 8003d9e:	4b4e      	ldr	r3, [pc, #312]	; (8003ed8 <parseBafer+0x464>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	4b4f      	ldr	r3, [pc, #316]	; (8003ee4 <parseBafer+0x470>)
 8003da8:	fb83 1302 	smull	r1, r3, r3, r2
 8003dac:	4413      	add	r3, r2
 8003dae:	1119      	asrs	r1, r3, #4
 8003db0:	17d3      	asrs	r3, r2, #31
 8003db2:	1ac9      	subs	r1, r1, r3
 8003db4:	460b      	mov	r3, r1
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a5b      	subs	r3, r3, r1
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	1ad1      	subs	r1, r2, r3
 8003dbe:	b2ca      	uxtb	r2, r1
 8003dc0:	4b45      	ldr	r3, [pc, #276]	; (8003ed8 <parseBafer+0x464>)
 8003dc2:	701a      	strb	r2, [r3, #0]
		velicina--;
 8003dc4:	4b48      	ldr	r3, [pc, #288]	; (8003ee8 <parseBafer+0x474>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <parseBafer+0x474>)
 8003dd0:	701a      	strb	r2, [r3, #0]
		i++;
 8003dd2:	4b46      	ldr	r3, [pc, #280]	; (8003eec <parseBafer+0x478>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4b44      	ldr	r3, [pc, #272]	; (8003eec <parseBafer+0x478>)
 8003ddc:	701a      	strb	r2, [r3, #0]
		korak = 9;
 8003dde:	4b44      	ldr	r3, [pc, #272]	; (8003ef0 <parseBafer+0x47c>)
 8003de0:	2209      	movs	r2, #9
 8003de2:	701a      	strb	r2, [r3, #0]
		break;
 8003de4:	e074      	b.n	8003ed0 <parseBafer+0x45c>
	case 9:
		if (niz_AX[2] == 0) {
 8003de6:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <parseBafer+0x46c>)
 8003de8:	889b      	ldrh	r3, [r3, #4]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <parseBafer+0x384>
			korak = 10;
 8003df0:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <parseBafer+0x47c>)
 8003df2:	220a      	movs	r2, #10
 8003df4:	701a      	strb	r2, [r3, #0]
		} else {
			korak = 1;
		}
		break;
 8003df6:	e06b      	b.n	8003ed0 <parseBafer+0x45c>
			korak = 1;
 8003df8:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <parseBafer+0x47c>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
		break;
 8003dfe:	e067      	b.n	8003ed0 <parseBafer+0x45c>

	case 10:
		cs = niz_AX[0] + niz_AX[1] + niz_AX[2] + niz_AX[3] + niz_AX[4];
 8003e00:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <parseBafer+0x46c>)
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <parseBafer+0x46c>)
 8003e0a:	885b      	ldrh	r3, [r3, #2]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <parseBafer+0x46c>)
 8003e16:	889b      	ldrh	r3, [r3, #4]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	4b2f      	ldr	r3, [pc, #188]	; (8003ee0 <parseBafer+0x46c>)
 8003e22:	88db      	ldrh	r3, [r3, #6]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <parseBafer+0x46c>)
 8003e2e:	891b      	ldrh	r3, [r3, #8]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4413      	add	r3, r2
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	4b2e      	ldr	r3, [pc, #184]	; (8003ef4 <parseBafer+0x480>)
 8003e3a:	701a      	strb	r2, [r3, #0]
		cs = ~cs;
 8003e3c:	4b2d      	ldr	r3, [pc, #180]	; (8003ef4 <parseBafer+0x480>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <parseBafer+0x480>)
 8003e48:	701a      	strb	r2, [r3, #0]
		if (cs == niz_AX[5]) {
 8003e4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <parseBafer+0x480>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <parseBafer+0x46c>)
 8003e54:	895b      	ldrh	r3, [r3, #10]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d103      	bne.n	8003e64 <parseBafer+0x3f0>
			korak = 11;
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <parseBafer+0x47c>)
 8003e5e:	220b      	movs	r2, #11
 8003e60:	701a      	strb	r2, [r3, #0]
		} else {
			korak = 1;
		}
		break;
 8003e62:	e035      	b.n	8003ed0 <parseBafer+0x45c>
			korak = 1;
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <parseBafer+0x47c>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
		break;
 8003e6a:	e031      	b.n	8003ed0 <parseBafer+0x45c>

	case 11:
		p1 = niz_AX[3];
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <parseBafer+0x46c>)
 8003e6e:	88db      	ldrh	r3, [r3, #6]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <parseBafer+0x484>)
 8003e74:	801a      	strh	r2, [r3, #0]
		p2 = niz_AX[4];
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <parseBafer+0x46c>)
 8003e78:	891b      	ldrh	r3, [r3, #8]
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	; (8003efc <parseBafer+0x488>)
 8003e7e:	801a      	strh	r2, [r3, #0]

		p = p1 | (p2 << 8);
 8003e80:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <parseBafer+0x488>)
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	b21a      	sxth	r2, r3
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <parseBafer+0x484>)
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b21b      	sxth	r3, r3
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <parseBafer+0x48c>)
 8003e9a:	801a      	strh	r2, [r3, #0]

		ugao = p * 300 / 1023;
 8003e9c:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <parseBafer+0x48c>)
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003ea8:	fb03 f302 	mul.w	r3, r3, r2
 8003eac:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <parseBafer+0x490>)
 8003eae:	fb82 1203 	smull	r1, r2, r2, r3
 8003eb2:	441a      	add	r2, r3
 8003eb4:	1252      	asrs	r2, r2, #9
 8003eb6:	17db      	asrs	r3, r3, #31
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <parseBafer+0x494>)
 8003ebe:	801a      	strh	r2, [r3, #0]

		korak = 1;
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <parseBafer+0x47c>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
		break;
 8003ec6:	bf00      	nop
 8003ec8:	e002      	b.n	8003ed0 <parseBafer+0x45c>
		return;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <parseBafer+0x45c>
		break;
 8003ece:	bf00      	nop
	}
}
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	20000128 	.word	0x20000128
 8003edc:	20000108 	.word	0x20000108
 8003ee0:	2000012c 	.word	0x2000012c
 8003ee4:	88888889 	.word	0x88888889
 8003ee8:	20000126 	.word	0x20000126
 8003eec:	20000142 	.word	0x20000142
 8003ef0:	20000010 	.word	0x20000010
 8003ef4:	20000138 	.word	0x20000138
 8003ef8:	2000013c 	.word	0x2000013c
 8003efc:	2000013e 	.word	0x2000013e
 8003f00:	20000140 	.word	0x20000140
 8003f04:	80200803 	.word	0x80200803
 8003f08:	2000013a 	.word	0x2000013a

08003f0c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003f10:	f000 f970 	bl	80041f4 <HAL_Init>

	/* USER CODE BEGIN Init */
	gpio_init();
 8003f14:	f7ff fa82 	bl	800341c <gpio_init>
	sick_init();
 8003f18:	f7fe fe00 	bl	8002b1c <sick_init>
	tajmer_init();
 8003f1c:	f7ff fb28 	bl	8003570 <tajmer_init>
	uart_init();
 8003f20:	f7ff fc30 	bl	8003784 <uart_init>
	step_init();
 8003f24:	f7fe ffb6 	bl	8002e94 <step_init>
	maxxoni_init();
 8003f28:	f7fc ffba 	bl	8000ea0 <maxxoni_init>
	odometrija_init();
 8003f2c:	f7fd fb20 	bl	8001570 <odometrija_init>
	pid_init();
 8003f30:	f7fd fc5a 	bl	80017e8 <pid_init>
	enkoder_init();
 8003f34:	f7ff f84c 	bl	8002fd0 <enkoder_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003f38:	f000 f82c 	bl	8003f94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003f3c:	f000 f894 	bl	8004068 <MX_GPIO_Init>
		 tajmer_delay(2000);
		 steper_pun_ugao();
		 tajmer_delay(2000);
		 */
		//SIKOVE
		promenljiva1 = sickLB();
 8003f40:	f7fe ff74 	bl	8002e2c <sickLB>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <main+0x74>)
 8003f4a:	701a      	strb	r2, [r3, #0]
		promenljiva2 = sickLF();
 8003f4c:	f7fe ff20 	bl	8002d90 <sickLF>
 8003f50:	4603      	mov	r3, r0
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <main+0x78>)
 8003f56:	701a      	strb	r2, [r3, #0]
		promenljiva3 = sickRB();
 8003f58:	f7fe ff82 	bl	8002e60 <sickRB>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <main+0x7c>)
 8003f62:	701a      	strb	r2, [r3, #0]
		promenljiva4 = sickRF();
 8003f64:	f7fe ff48 	bl	8002df8 <sickRF>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <main+0x80>)
 8003f6e:	701a      	strb	r2, [r3, #0]
		promenljiva5 = sickMID();
 8003f70:	f7fe ff28 	bl	8002dc4 <sickMID>
 8003f74:	4603      	mov	r3, r0
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <main+0x84>)
 8003f7a:	701a      	strb	r2, [r3, #0]
		promenljiva1 = sickLB();
 8003f7c:	e7e0      	b.n	8003f40 <main+0x34>
 8003f7e:	bf00      	nop
 8003f80:	20000198 	.word	0x20000198
 8003f84:	20000197 	.word	0x20000197
 8003f88:	20000195 	.word	0x20000195
 8003f8c:	20000196 	.word	0x20000196
 8003f90:	20000194 	.word	0x20000194

08003f94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b094      	sub	sp, #80	; 0x50
 8003f98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003f9a:	f107 0320 	add.w	r3, r7, #32
 8003f9e:	2230      	movs	r2, #48	; 0x30
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 feb0 	bl	8004d08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003fa8:	f107 030c 	add.w	r3, r7, #12
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	4b28      	ldr	r3, [pc, #160]	; (8004060 <SystemClock_Config+0xcc>)
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	4a27      	ldr	r2, [pc, #156]	; (8004060 <SystemClock_Config+0xcc>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <SystemClock_Config+0xcc>)
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <SystemClock_Config+0xd0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003fe0:	4a20      	ldr	r2, [pc, #128]	; (8004064 <SystemClock_Config+0xd0>)
 8003fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <SystemClock_Config+0xd0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004000:	2302      	movs	r3, #2
 8004002:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004004:	2300      	movs	r3, #0
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004008:	2308      	movs	r3, #8
 800400a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800400c:	2354      	movs	r3, #84	; 0x54
 800400e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004010:	2302      	movs	r3, #2
 8004012:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004014:	2304      	movs	r3, #4
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004018:	f107 0320 	add.w	r3, r7, #32
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fa41 	bl	80044a4 <HAL_RCC_OscConfig>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <SystemClock_Config+0x98>
		Error_Handler();
 8004028:	f000 f846 	bl	80040b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800402c:	230f      	movs	r3, #15
 800402e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004030:	2302      	movs	r3, #2
 8004032:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800403c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	2102      	movs	r1, #2
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fc9b 	bl	8004984 <HAL_RCC_ClockConfig>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <SystemClock_Config+0xc4>
		Error_Handler();
 8004054:	f000 f830 	bl	80040b8 <Error_Handler>
	}
}
 8004058:	bf00      	nop
 800405a:	3750      	adds	r7, #80	; 0x50
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	40007000 	.word	0x40007000

08004068 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <MX_GPIO_Init+0x4c>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4a0f      	ldr	r2, [pc, #60]	; (80040b4 <MX_GPIO_Init+0x4c>)
 8004078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407c:	6313      	str	r3, [r2, #48]	; 0x30
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <MX_GPIO_Init+0x4c>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004086:	607b      	str	r3, [r7, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <MX_GPIO_Init+0x4c>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	4a08      	ldr	r2, [pc, #32]	; (80040b4 <MX_GPIO_Init+0x4c>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	6313      	str	r3, [r2, #48]	; 0x30
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <MX_GPIO_Init+0x4c>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]

}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800

080040b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <HAL_MspInit+0x4c>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	4a0f      	ldr	r2, [pc, #60]	; (8004114 <HAL_MspInit+0x4c>)
 80040d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040dc:	6453      	str	r3, [r2, #68]	; 0x44
 80040de:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <HAL_MspInit+0x4c>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <HAL_MspInit+0x4c>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a08      	ldr	r2, [pc, #32]	; (8004114 <HAL_MspInit+0x4c>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_MspInit+0x4c>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800

08004118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800412a:	e7fe      	b.n	800412a <HardFault_Handler+0x4>

0800412c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004130:	e7fe      	b.n	8004130 <MemManage_Handler+0x4>

08004132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004136:	e7fe      	b.n	8004136 <BusFault_Handler+0x4>

08004138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800413c:	e7fe      	b.n	800413c <UsageFault_Handler+0x4>

0800413e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800416c:	f000 f894 	bl	8004298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004170:	bf00      	nop
 8004172:	bd80      	pop	{r7, pc}

08004174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004178:	4b08      	ldr	r3, [pc, #32]	; (800419c <SystemInit+0x28>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	4a07      	ldr	r2, [pc, #28]	; (800419c <SystemInit+0x28>)
 8004180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <SystemInit+0x28>)
 800418a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800418e:	609a      	str	r2, [r3, #8]
#endif
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <Reset_Handler>:
 80041a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041d8 <LoopFillZerobss+0x14>
 80041a4:	2100      	movs	r1, #0
 80041a6:	e003      	b.n	80041b0 <LoopCopyDataInit>

080041a8 <CopyDataInit>:
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <LoopFillZerobss+0x18>)
 80041aa:	585b      	ldr	r3, [r3, r1]
 80041ac:	5043      	str	r3, [r0, r1]
 80041ae:	3104      	adds	r1, #4

080041b0 <LoopCopyDataInit>:
 80041b0:	480b      	ldr	r0, [pc, #44]	; (80041e0 <LoopFillZerobss+0x1c>)
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <LoopFillZerobss+0x20>)
 80041b4:	1842      	adds	r2, r0, r1
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d3f6      	bcc.n	80041a8 <CopyDataInit>
 80041ba:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <LoopFillZerobss+0x24>)
 80041bc:	e002      	b.n	80041c4 <LoopFillZerobss>

080041be <FillZerobss>:
 80041be:	2300      	movs	r3, #0
 80041c0:	f842 3b04 	str.w	r3, [r2], #4

080041c4 <LoopFillZerobss>:
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <LoopFillZerobss+0x28>)
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d3f9      	bcc.n	80041be <FillZerobss>
 80041ca:	f7ff ffd3 	bl	8004174 <SystemInit>
 80041ce:	f000 fd77 	bl	8004cc0 <__libc_init_array>
 80041d2:	f7ff fe9b 	bl	8003f0c <main>
 80041d6:	4770      	bx	lr
 80041d8:	20018000 	.word	0x20018000
 80041dc:	08007408 	.word	0x08007408
 80041e0:	20000000 	.word	0x20000000
 80041e4:	20000088 	.word	0x20000088
 80041e8:	20000088 	.word	0x20000088
 80041ec:	200001a0 	.word	0x200001a0

080041f0 <ADC_IRQHandler>:
 80041f0:	e7fe      	b.n	80041f0 <ADC_IRQHandler>
	...

080041f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <HAL_Init+0x40>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <HAL_Init+0x40>)
 80041fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_Init+0x40>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_Init+0x40>)
 800420a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800420e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <HAL_Init+0x40>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a07      	ldr	r2, [pc, #28]	; (8004234 <HAL_Init+0x40>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800421c:	2003      	movs	r0, #3
 800421e:	f000 f90d 	bl	800443c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004222:	2000      	movs	r0, #0
 8004224:	f000 f808 	bl	8004238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004228:	f7ff ff4e 	bl	80040c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023c00 	.word	0x40023c00

08004238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_InitTick+0x54>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <HAL_InitTick+0x58>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4619      	mov	r1, r3
 800424a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f917 	bl	800448a <HAL_SYSTICK_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e00e      	b.n	8004284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b0f      	cmp	r3, #15
 800426a:	d80a      	bhi.n	8004282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800426c:	2200      	movs	r2, #0
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004274:	f000 f8ed 	bl	8004452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004278:	4a06      	ldr	r2, [pc, #24]	; (8004294 <HAL_InitTick+0x5c>)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000014 	.word	0x20000014
 8004290:	2000001c 	.word	0x2000001c
 8004294:	20000018 	.word	0x20000018

08004298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_IncTick+0x20>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_IncTick+0x24>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <HAL_IncTick+0x24>)
 80042aa:	6013      	str	r3, [r2, #0]
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	2000001c 	.word	0x2000001c
 80042bc:	2000019c 	.word	0x2000019c

080042c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return uwTick;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_GetTick+0x14>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000019c 	.word	0x2000019c

080042d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <__NVIC_SetPriorityGrouping+0x44>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042f4:	4013      	ands	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800430a:	4a04      	ldr	r2, [pc, #16]	; (800431c <__NVIC_SetPriorityGrouping+0x44>)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	60d3      	str	r3, [r2, #12]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <__NVIC_GetPriorityGrouping+0x18>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	f003 0307 	and.w	r3, r3, #7
}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	6039      	str	r1, [r7, #0]
 8004346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434c:	2b00      	cmp	r3, #0
 800434e:	db0a      	blt.n	8004366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	b2da      	uxtb	r2, r3
 8004354:	490c      	ldr	r1, [pc, #48]	; (8004388 <__NVIC_SetPriority+0x4c>)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	0112      	lsls	r2, r2, #4
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	440b      	add	r3, r1
 8004360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004364:	e00a      	b.n	800437c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	4908      	ldr	r1, [pc, #32]	; (800438c <__NVIC_SetPriority+0x50>)
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	3b04      	subs	r3, #4
 8004374:	0112      	lsls	r2, r2, #4
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	440b      	add	r3, r1
 800437a:	761a      	strb	r2, [r3, #24]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	e000e100 	.word	0xe000e100
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004390:	b480      	push	{r7}
 8004392:	b089      	sub	sp, #36	; 0x24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f1c3 0307 	rsb	r3, r3, #7
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	bf28      	it	cs
 80043ae:	2304      	movcs	r3, #4
 80043b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3304      	adds	r3, #4
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d902      	bls.n	80043c0 <NVIC_EncodePriority+0x30>
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3b03      	subs	r3, #3
 80043be:	e000      	b.n	80043c2 <NVIC_EncodePriority+0x32>
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43da      	mvns	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	401a      	ands	r2, r3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	fa01 f303 	lsl.w	r3, r1, r3
 80043e2:	43d9      	mvns	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e8:	4313      	orrs	r3, r2
         );
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3724      	adds	r7, #36	; 0x24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3b01      	subs	r3, #1
 8004404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004408:	d301      	bcc.n	800440e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800440a:	2301      	movs	r3, #1
 800440c:	e00f      	b.n	800442e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <SysTick_Config+0x40>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3b01      	subs	r3, #1
 8004414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004416:	210f      	movs	r1, #15
 8004418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800441c:	f7ff ff8e 	bl	800433c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <SysTick_Config+0x40>)
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <SysTick_Config+0x40>)
 8004428:	2207      	movs	r2, #7
 800442a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	e000e010 	.word	0xe000e010

0800443c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ff47 	bl	80042d8 <__NVIC_SetPriorityGrouping>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004464:	f7ff ff5c 	bl	8004320 <__NVIC_GetPriorityGrouping>
 8004468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	6978      	ldr	r0, [r7, #20]
 8004470:	f7ff ff8e 	bl	8004390 <NVIC_EncodePriority>
 8004474:	4602      	mov	r2, r0
 8004476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff5d 	bl	800433c <__NVIC_SetPriority>
}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ffb0 	bl	80043f8 <SysTick_Config>
 8004498:	4603      	mov	r3, r0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e25b      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d075      	beq.n	80045ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044c2:	4ba3      	ldr	r3, [pc, #652]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d00c      	beq.n	80044e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ce:	4ba0      	ldr	r3, [pc, #640]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d112      	bne.n	8004500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044da:	4b9d      	ldr	r3, [pc, #628]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e6:	d10b      	bne.n	8004500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	4b99      	ldr	r3, [pc, #612]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d05b      	beq.n	80045ac <HAL_RCC_OscConfig+0x108>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d157      	bne.n	80045ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e236      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004508:	d106      	bne.n	8004518 <HAL_RCC_OscConfig+0x74>
 800450a:	4b91      	ldr	r3, [pc, #580]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a90      	ldr	r2, [pc, #576]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e01d      	b.n	8004554 <HAL_RCC_OscConfig+0xb0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x98>
 8004522:	4b8b      	ldr	r3, [pc, #556]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a8a      	ldr	r2, [pc, #552]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b88      	ldr	r3, [pc, #544]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a87      	ldr	r2, [pc, #540]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e00b      	b.n	8004554 <HAL_RCC_OscConfig+0xb0>
 800453c:	4b84      	ldr	r3, [pc, #528]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a83      	ldr	r2, [pc, #524]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b81      	ldr	r3, [pc, #516]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a80      	ldr	r2, [pc, #512]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 800454e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d013      	beq.n	8004584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7ff feb0 	bl	80042c0 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004564:	f7ff feac 	bl	80042c0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e1fb      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004576:	4b76      	ldr	r3, [pc, #472]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0xc0>
 8004582:	e014      	b.n	80045ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7ff fe9c 	bl	80042c0 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800458c:	f7ff fe98 	bl	80042c0 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e1e7      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459e:	4b6c      	ldr	r3, [pc, #432]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0xe8>
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d063      	beq.n	8004682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ba:	4b65      	ldr	r3, [pc, #404]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c6:	4b62      	ldr	r3, [pc, #392]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d11c      	bne.n	800460c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d2:	4b5f      	ldr	r3, [pc, #380]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d116      	bne.n	800460c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045de:	4b5c      	ldr	r3, [pc, #368]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <HAL_RCC_OscConfig+0x152>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d001      	beq.n	80045f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e1bb      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f6:	4b56      	ldr	r3, [pc, #344]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4952      	ldr	r1, [pc, #328]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460a:	e03a      	b.n	8004682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d020      	beq.n	8004656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004614:	4b4f      	ldr	r3, [pc, #316]	; (8004754 <HAL_RCC_OscConfig+0x2b0>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7ff fe51 	bl	80042c0 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004622:	f7ff fe4d 	bl	80042c0 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e19c      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004634:	4b46      	ldr	r3, [pc, #280]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4940      	ldr	r1, [pc, #256]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]
 8004654:	e015      	b.n	8004682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004656:	4b3f      	ldr	r3, [pc, #252]	; (8004754 <HAL_RCC_OscConfig+0x2b0>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7ff fe30 	bl	80042c0 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004664:	f7ff fe2c 	bl	80042c0 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e17b      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004676:	4b36      	ldr	r3, [pc, #216]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d030      	beq.n	80046f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d016      	beq.n	80046c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004696:	4b30      	ldr	r3, [pc, #192]	; (8004758 <HAL_RCC_OscConfig+0x2b4>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7ff fe10 	bl	80042c0 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a4:	f7ff fe0c 	bl	80042c0 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e15b      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b6:	4b26      	ldr	r3, [pc, #152]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x200>
 80046c2:	e015      	b.n	80046f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c4:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x2b4>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ca:	f7ff fdf9 	bl	80042c0 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d2:	f7ff fdf5 	bl	80042c0 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e144      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a0 	beq.w	800483e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004702:	4b13      	ldr	r3, [pc, #76]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4a0e      	ldr	r2, [pc, #56]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471c:	6413      	str	r3, [r2, #64]	; 0x40
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_OscConfig+0x2b8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d121      	bne.n	800477e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473a:	4b08      	ldr	r3, [pc, #32]	; (800475c <HAL_RCC_OscConfig+0x2b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a07      	ldr	r2, [pc, #28]	; (800475c <HAL_RCC_OscConfig+0x2b8>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004746:	f7ff fdbb 	bl	80042c0 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	e011      	b.n	8004772 <HAL_RCC_OscConfig+0x2ce>
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	42470000 	.word	0x42470000
 8004758:	42470e80 	.word	0x42470e80
 800475c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004760:	f7ff fdae 	bl	80042c0 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e0fd      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004772:	4b81      	ldr	r3, [pc, #516]	; (8004978 <HAL_RCC_OscConfig+0x4d4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d106      	bne.n	8004794 <HAL_RCC_OscConfig+0x2f0>
 8004786:	4b7d      	ldr	r3, [pc, #500]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	4a7c      	ldr	r2, [pc, #496]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	6713      	str	r3, [r2, #112]	; 0x70
 8004792:	e01c      	b.n	80047ce <HAL_RCC_OscConfig+0x32a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b05      	cmp	r3, #5
 800479a:	d10c      	bne.n	80047b6 <HAL_RCC_OscConfig+0x312>
 800479c:	4b77      	ldr	r3, [pc, #476]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a76      	ldr	r2, [pc, #472]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
 80047a8:	4b74      	ldr	r3, [pc, #464]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	4a73      	ldr	r2, [pc, #460]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6713      	str	r3, [r2, #112]	; 0x70
 80047b4:	e00b      	b.n	80047ce <HAL_RCC_OscConfig+0x32a>
 80047b6:	4b71      	ldr	r3, [pc, #452]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	4a70      	ldr	r2, [pc, #448]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	6713      	str	r3, [r2, #112]	; 0x70
 80047c2:	4b6e      	ldr	r3, [pc, #440]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	4a6d      	ldr	r2, [pc, #436]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d015      	beq.n	8004802 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d6:	f7ff fd73 	bl	80042c0 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047dc:	e00a      	b.n	80047f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f7ff fd6f 	bl	80042c0 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e0bc      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f4:	4b61      	ldr	r3, [pc, #388]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ee      	beq.n	80047de <HAL_RCC_OscConfig+0x33a>
 8004800:	e014      	b.n	800482c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004802:	f7ff fd5d 	bl	80042c0 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7ff fd59 	bl	80042c0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0a6      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004820:	4b56      	ldr	r3, [pc, #344]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1ee      	bne.n	800480a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800482c:	7dfb      	ldrb	r3, [r7, #23]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d105      	bne.n	800483e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004832:	4b52      	ldr	r3, [pc, #328]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	4a51      	ldr	r2, [pc, #324]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 8004838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8092 	beq.w	800496c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004848:	4b4c      	ldr	r3, [pc, #304]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 030c 	and.w	r3, r3, #12
 8004850:	2b08      	cmp	r3, #8
 8004852:	d05c      	beq.n	800490e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d141      	bne.n	80048e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485c:	4b48      	ldr	r3, [pc, #288]	; (8004980 <HAL_RCC_OscConfig+0x4dc>)
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7ff fd2d 	bl	80042c0 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800486a:	f7ff fd29 	bl	80042c0 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e078      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487c:	4b3f      	ldr	r3, [pc, #252]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f0      	bne.n	800486a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	019b      	lsls	r3, r3, #6
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	3b01      	subs	r3, #1
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	061b      	lsls	r3, r3, #24
 80048ac:	4933      	ldr	r1, [pc, #204]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b2:	4b33      	ldr	r3, [pc, #204]	; (8004980 <HAL_RCC_OscConfig+0x4dc>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7ff fd02 	bl	80042c0 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c0:	f7ff fcfe 	bl	80042c0 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e04d      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d2:	4b2a      	ldr	r3, [pc, #168]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x41c>
 80048de:	e045      	b.n	800496c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e0:	4b27      	ldr	r3, [pc, #156]	; (8004980 <HAL_RCC_OscConfig+0x4dc>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e6:	f7ff fceb 	bl	80042c0 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ee:	f7ff fce7 	bl	80042c0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e036      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <HAL_RCC_OscConfig+0x44a>
 800490c:	e02e      	b.n	800496c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e029      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <HAL_RCC_OscConfig+0x4d8>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	429a      	cmp	r2, r3
 800492c:	d11c      	bne.n	8004968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d115      	bne.n	8004968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004942:	4013      	ands	r3, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004948:	4293      	cmp	r3, r2
 800494a:	d10d      	bne.n	8004968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d106      	bne.n	8004968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40007000 	.word	0x40007000
 800497c:	40023800 	.word	0x40023800
 8004980:	42470060 	.word	0x42470060

08004984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0cc      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004998:	4b68      	ldr	r3, [pc, #416]	; (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d90c      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b65      	ldr	r3, [pc, #404]	; (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b63      	ldr	r3, [pc, #396]	; (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0b8      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d020      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d8:	4b59      	ldr	r3, [pc, #356]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a58      	ldr	r2, [pc, #352]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f0:	4b53      	ldr	r3, [pc, #332]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4a52      	ldr	r2, [pc, #328]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049fc:	4b50      	ldr	r3, [pc, #320]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	494d      	ldr	r1, [pc, #308]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d044      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a22:	4b47      	ldr	r3, [pc, #284]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d119      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e07f      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d003      	beq.n	8004a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a42:	4b3f      	ldr	r3, [pc, #252]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e06f      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a52:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e067      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a62:	4b37      	ldr	r3, [pc, #220]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f023 0203 	bic.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4934      	ldr	r1, [pc, #208]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a74:	f7ff fc24 	bl	80042c0 <HAL_GetTick>
 8004a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7c:	f7ff fc20 	bl	80042c0 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e04f      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 020c 	and.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d1eb      	bne.n	8004a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d20c      	bcs.n	8004acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e032      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad8:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4916      	ldr	r1, [pc, #88]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af6:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	490e      	ldr	r1, [pc, #56]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b0a:	f000 f821 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8004b0e:	4601      	mov	r1, r0
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <HAL_RCC_ClockConfig+0x1c0>)
 8004b1c:	5cd3      	ldrb	r3, [r2, r3]
 8004b1e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b22:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b26:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCC_ClockConfig+0x1c8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fb84 	bl	8004238 <HAL_InitTick>

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40023c00 	.word	0x40023c00
 8004b40:	40023800 	.word	0x40023800
 8004b44:	08006e18 	.word	0x08006e18
 8004b48:	20000014 	.word	0x20000014
 8004b4c:	20000018 	.word	0x20000018

08004b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b66:	4b50      	ldr	r3, [pc, #320]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d007      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0x32>
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d008      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x38>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 808d 	bne.w	8004c96 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	; (8004cac <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b7e:	60bb      	str	r3, [r7, #8]
       break;
 8004b80:	e08c      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b82:	4b4b      	ldr	r3, [pc, #300]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b84:	60bb      	str	r3, [r7, #8]
      break;
 8004b86:	e089      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b88:	4b47      	ldr	r3, [pc, #284]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b92:	4b45      	ldr	r3, [pc, #276]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d023      	beq.n	8004be6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9e:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	099b      	lsrs	r3, r3, #6
 8004ba4:	f04f 0400 	mov.w	r4, #0
 8004ba8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	ea03 0501 	and.w	r5, r3, r1
 8004bb4:	ea04 0602 	and.w	r6, r4, r2
 8004bb8:	4a3d      	ldr	r2, [pc, #244]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bba:	fb02 f106 	mul.w	r1, r2, r6
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	fb02 f205 	mul.w	r2, r2, r5
 8004bc4:	440a      	add	r2, r1
 8004bc6:	493a      	ldr	r1, [pc, #232]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bc8:	fba5 0101 	umull	r0, r1, r5, r1
 8004bcc:	1853      	adds	r3, r2, r1
 8004bce:	4619      	mov	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f04f 0400 	mov.w	r4, #0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4623      	mov	r3, r4
 8004bda:	f7fb ffe1 	bl	8000ba0 <__aeabi_uldivmod>
 8004bde:	4603      	mov	r3, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e049      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be6:	4b30      	ldr	r3, [pc, #192]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	f04f 0400 	mov.w	r4, #0
 8004bf0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	ea03 0501 	and.w	r5, r3, r1
 8004bfc:	ea04 0602 	and.w	r6, r4, r2
 8004c00:	4629      	mov	r1, r5
 8004c02:	4632      	mov	r2, r6
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	f04f 0400 	mov.w	r4, #0
 8004c0c:	0154      	lsls	r4, r2, #5
 8004c0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c12:	014b      	lsls	r3, r1, #5
 8004c14:	4619      	mov	r1, r3
 8004c16:	4622      	mov	r2, r4
 8004c18:	1b49      	subs	r1, r1, r5
 8004c1a:	eb62 0206 	sbc.w	r2, r2, r6
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	f04f 0400 	mov.w	r4, #0
 8004c26:	0194      	lsls	r4, r2, #6
 8004c28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c2c:	018b      	lsls	r3, r1, #6
 8004c2e:	1a5b      	subs	r3, r3, r1
 8004c30:	eb64 0402 	sbc.w	r4, r4, r2
 8004c34:	f04f 0100 	mov.w	r1, #0
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	00e2      	lsls	r2, r4, #3
 8004c3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c42:	00d9      	lsls	r1, r3, #3
 8004c44:	460b      	mov	r3, r1
 8004c46:	4614      	mov	r4, r2
 8004c48:	195b      	adds	r3, r3, r5
 8004c4a:	eb44 0406 	adc.w	r4, r4, r6
 8004c4e:	f04f 0100 	mov.w	r1, #0
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	02a2      	lsls	r2, r4, #10
 8004c58:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c5c:	0299      	lsls	r1, r3, #10
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4614      	mov	r4, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	4621      	mov	r1, r4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f04f 0400 	mov.w	r4, #0
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	f7fb ff96 	bl	8000ba0 <__aeabi_uldivmod>
 8004c74:	4603      	mov	r3, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	3301      	adds	r3, #1
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c92:	60bb      	str	r3, [r7, #8]
      break;
 8004c94:	e002      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_GetSysClockFreq+0x15c>)
 8004c98:	60bb      	str	r3, [r7, #8]
      break;
 8004c9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	00f42400 	.word	0x00f42400
 8004cb0:	017d7840 	.word	0x017d7840

08004cb4 <__errno>:
 8004cb4:	4b01      	ldr	r3, [pc, #4]	; (8004cbc <__errno+0x8>)
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000020 	.word	0x20000020

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4e0d      	ldr	r6, [pc, #52]	; (8004cf8 <__libc_init_array+0x38>)
 8004cc4:	4c0d      	ldr	r4, [pc, #52]	; (8004cfc <__libc_init_array+0x3c>)
 8004cc6:	1ba4      	subs	r4, r4, r6
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	2500      	movs	r5, #0
 8004ccc:	42a5      	cmp	r5, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	4e0b      	ldr	r6, [pc, #44]	; (8004d00 <__libc_init_array+0x40>)
 8004cd2:	4c0c      	ldr	r4, [pc, #48]	; (8004d04 <__libc_init_array+0x44>)
 8004cd4:	f002 f894 	bl	8006e00 <_init>
 8004cd8:	1ba4      	subs	r4, r4, r6
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	2500      	movs	r5, #0
 8004cde:	42a5      	cmp	r5, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ce8:	4798      	blx	r3
 8004cea:	3501      	adds	r5, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cf2:	4798      	blx	r3
 8004cf4:	3501      	adds	r5, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	08007400 	.word	0x08007400
 8004cfc:	08007400 	.word	0x08007400
 8004d00:	08007400 	.word	0x08007400
 8004d04:	08007404 	.word	0x08007404

08004d08 <memset>:
 8004d08:	4402      	add	r2, r0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d100      	bne.n	8004d12 <memset+0xa>
 8004d10:	4770      	bx	lr
 8004d12:	f803 1b01 	strb.w	r1, [r3], #1
 8004d16:	e7f9      	b.n	8004d0c <memset+0x4>

08004d18 <cos>:
 8004d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d1a:	ec51 0b10 	vmov	r0, r1, d0
 8004d1e:	4a1e      	ldr	r2, [pc, #120]	; (8004d98 <cos+0x80>)
 8004d20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d24:	4293      	cmp	r3, r2
 8004d26:	dc06      	bgt.n	8004d36 <cos+0x1e>
 8004d28:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004d90 <cos+0x78>
 8004d2c:	f000 fddc 	bl	80058e8 <__kernel_cos>
 8004d30:	ec51 0b10 	vmov	r0, r1, d0
 8004d34:	e007      	b.n	8004d46 <cos+0x2e>
 8004d36:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <cos+0x84>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	dd09      	ble.n	8004d50 <cos+0x38>
 8004d3c:	ee10 2a10 	vmov	r2, s0
 8004d40:	460b      	mov	r3, r1
 8004d42:	f7fb fa4d 	bl	80001e0 <__aeabi_dsub>
 8004d46:	ec41 0b10 	vmov	d0, r0, r1
 8004d4a:	b005      	add	sp, #20
 8004d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d50:	4668      	mov	r0, sp
 8004d52:	f000 f94d 	bl	8004ff0 <__ieee754_rem_pio2>
 8004d56:	f000 0003 	and.w	r0, r0, #3
 8004d5a:	2801      	cmp	r0, #1
 8004d5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d60:	ed9d 0b00 	vldr	d0, [sp]
 8004d64:	d007      	beq.n	8004d76 <cos+0x5e>
 8004d66:	2802      	cmp	r0, #2
 8004d68:	d00e      	beq.n	8004d88 <cos+0x70>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d0de      	beq.n	8004d2c <cos+0x14>
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f001 f9c2 	bl	80060f8 <__kernel_sin>
 8004d74:	e7dc      	b.n	8004d30 <cos+0x18>
 8004d76:	f001 f9bf 	bl	80060f8 <__kernel_sin>
 8004d7a:	ec53 2b10 	vmov	r2, r3, d0
 8004d7e:	ee10 0a10 	vmov	r0, s0
 8004d82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004d86:	e7de      	b.n	8004d46 <cos+0x2e>
 8004d88:	f000 fdae 	bl	80058e8 <__kernel_cos>
 8004d8c:	e7f5      	b.n	8004d7a <cos+0x62>
 8004d8e:	bf00      	nop
	...
 8004d98:	3fe921fb 	.word	0x3fe921fb
 8004d9c:	7fefffff 	.word	0x7fefffff

08004da0 <sin>:
 8004da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004da2:	ec51 0b10 	vmov	r0, r1, d0
 8004da6:	4a20      	ldr	r2, [pc, #128]	; (8004e28 <sin+0x88>)
 8004da8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004dac:	4293      	cmp	r3, r2
 8004dae:	dc07      	bgt.n	8004dc0 <sin+0x20>
 8004db0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004e20 <sin+0x80>
 8004db4:	2000      	movs	r0, #0
 8004db6:	f001 f99f 	bl	80060f8 <__kernel_sin>
 8004dba:	ec51 0b10 	vmov	r0, r1, d0
 8004dbe:	e007      	b.n	8004dd0 <sin+0x30>
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <sin+0x8c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	dd09      	ble.n	8004dda <sin+0x3a>
 8004dc6:	ee10 2a10 	vmov	r2, s0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	f7fb fa08 	bl	80001e0 <__aeabi_dsub>
 8004dd0:	ec41 0b10 	vmov	d0, r0, r1
 8004dd4:	b005      	add	sp, #20
 8004dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dda:	4668      	mov	r0, sp
 8004ddc:	f000 f908 	bl	8004ff0 <__ieee754_rem_pio2>
 8004de0:	f000 0003 	and.w	r0, r0, #3
 8004de4:	2801      	cmp	r0, #1
 8004de6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004dea:	ed9d 0b00 	vldr	d0, [sp]
 8004dee:	d004      	beq.n	8004dfa <sin+0x5a>
 8004df0:	2802      	cmp	r0, #2
 8004df2:	d005      	beq.n	8004e00 <sin+0x60>
 8004df4:	b970      	cbnz	r0, 8004e14 <sin+0x74>
 8004df6:	2001      	movs	r0, #1
 8004df8:	e7dd      	b.n	8004db6 <sin+0x16>
 8004dfa:	f000 fd75 	bl	80058e8 <__kernel_cos>
 8004dfe:	e7dc      	b.n	8004dba <sin+0x1a>
 8004e00:	2001      	movs	r0, #1
 8004e02:	f001 f979 	bl	80060f8 <__kernel_sin>
 8004e06:	ec53 2b10 	vmov	r2, r3, d0
 8004e0a:	ee10 0a10 	vmov	r0, s0
 8004e0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004e12:	e7dd      	b.n	8004dd0 <sin+0x30>
 8004e14:	f000 fd68 	bl	80058e8 <__kernel_cos>
 8004e18:	e7f5      	b.n	8004e06 <sin+0x66>
 8004e1a:	bf00      	nop
 8004e1c:	f3af 8000 	nop.w
	...
 8004e28:	3fe921fb 	.word	0x3fe921fb
 8004e2c:	7fefffff 	.word	0x7fefffff

08004e30 <cosf>:
 8004e30:	ee10 3a10 	vmov	r3, s0
 8004e34:	b507      	push	{r0, r1, r2, lr}
 8004e36:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <cosf+0x78>)
 8004e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	dc04      	bgt.n	8004e4a <cosf+0x1a>
 8004e40:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8004eac <cosf+0x7c>
 8004e44:	f001 fa12 	bl	800626c <__kernel_cosf>
 8004e48:	e004      	b.n	8004e54 <cosf+0x24>
 8004e4a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004e4e:	db04      	blt.n	8004e5a <cosf+0x2a>
 8004e50:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004e54:	b003      	add	sp, #12
 8004e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e5a:	4668      	mov	r0, sp
 8004e5c:	f000 fc18 	bl	8005690 <__ieee754_rem_pio2f>
 8004e60:	f000 0003 	and.w	r0, r0, #3
 8004e64:	2801      	cmp	r0, #1
 8004e66:	d007      	beq.n	8004e78 <cosf+0x48>
 8004e68:	2802      	cmp	r0, #2
 8004e6a:	d00e      	beq.n	8004e8a <cosf+0x5a>
 8004e6c:	b9a0      	cbnz	r0, 8004e98 <cosf+0x68>
 8004e6e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004e72:	ed9d 0a00 	vldr	s0, [sp]
 8004e76:	e7e5      	b.n	8004e44 <cosf+0x14>
 8004e78:	eddd 0a01 	vldr	s1, [sp, #4]
 8004e7c:	ed9d 0a00 	vldr	s0, [sp]
 8004e80:	f001 fcd4 	bl	800682c <__kernel_sinf>
 8004e84:	eeb1 0a40 	vneg.f32	s0, s0
 8004e88:	e7e4      	b.n	8004e54 <cosf+0x24>
 8004e8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8004e8e:	ed9d 0a00 	vldr	s0, [sp]
 8004e92:	f001 f9eb 	bl	800626c <__kernel_cosf>
 8004e96:	e7f5      	b.n	8004e84 <cosf+0x54>
 8004e98:	2001      	movs	r0, #1
 8004e9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8004e9e:	ed9d 0a00 	vldr	s0, [sp]
 8004ea2:	f001 fcc3 	bl	800682c <__kernel_sinf>
 8004ea6:	e7d5      	b.n	8004e54 <cosf+0x24>
 8004ea8:	3f490fd8 	.word	0x3f490fd8
 8004eac:	00000000 	.word	0x00000000

08004eb0 <sinf>:
 8004eb0:	ee10 3a10 	vmov	r3, s0
 8004eb4:	b507      	push	{r0, r1, r2, lr}
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <sinf+0x7c>)
 8004eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	dc05      	bgt.n	8004ecc <sinf+0x1c>
 8004ec0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004f30 <sinf+0x80>
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f001 fcb1 	bl	800682c <__kernel_sinf>
 8004eca:	e004      	b.n	8004ed6 <sinf+0x26>
 8004ecc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004ed0:	db04      	blt.n	8004edc <sinf+0x2c>
 8004ed2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004ed6:	b003      	add	sp, #12
 8004ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004edc:	4668      	mov	r0, sp
 8004ede:	f000 fbd7 	bl	8005690 <__ieee754_rem_pio2f>
 8004ee2:	f000 0003 	and.w	r0, r0, #3
 8004ee6:	2801      	cmp	r0, #1
 8004ee8:	d008      	beq.n	8004efc <sinf+0x4c>
 8004eea:	2802      	cmp	r0, #2
 8004eec:	d00d      	beq.n	8004f0a <sinf+0x5a>
 8004eee:	b9b0      	cbnz	r0, 8004f1e <sinf+0x6e>
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	eddd 0a01 	vldr	s1, [sp, #4]
 8004ef6:	ed9d 0a00 	vldr	s0, [sp]
 8004efa:	e7e4      	b.n	8004ec6 <sinf+0x16>
 8004efc:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f00:	ed9d 0a00 	vldr	s0, [sp]
 8004f04:	f001 f9b2 	bl	800626c <__kernel_cosf>
 8004f08:	e7e5      	b.n	8004ed6 <sinf+0x26>
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f10:	ed9d 0a00 	vldr	s0, [sp]
 8004f14:	f001 fc8a 	bl	800682c <__kernel_sinf>
 8004f18:	eeb1 0a40 	vneg.f32	s0, s0
 8004f1c:	e7db      	b.n	8004ed6 <sinf+0x26>
 8004f1e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f22:	ed9d 0a00 	vldr	s0, [sp]
 8004f26:	f001 f9a1 	bl	800626c <__kernel_cosf>
 8004f2a:	e7f5      	b.n	8004f18 <sinf+0x68>
 8004f2c:	3f490fd8 	.word	0x3f490fd8
 8004f30:	00000000 	.word	0x00000000

08004f34 <sqrt>:
 8004f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f38:	ed2d 8b02 	vpush	{d8}
 8004f3c:	b08b      	sub	sp, #44	; 0x2c
 8004f3e:	ec55 4b10 	vmov	r4, r5, d0
 8004f42:	f000 fa47 	bl	80053d4 <__ieee754_sqrt>
 8004f46:	4b26      	ldr	r3, [pc, #152]	; (8004fe0 <sqrt+0xac>)
 8004f48:	eeb0 8a40 	vmov.f32	s16, s0
 8004f4c:	eef0 8a60 	vmov.f32	s17, s1
 8004f50:	f993 6000 	ldrsb.w	r6, [r3]
 8004f54:	1c73      	adds	r3, r6, #1
 8004f56:	d02a      	beq.n	8004fae <sqrt+0x7a>
 8004f58:	4622      	mov	r2, r4
 8004f5a:	462b      	mov	r3, r5
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	4629      	mov	r1, r5
 8004f60:	f7fb fd90 	bl	8000a84 <__aeabi_dcmpun>
 8004f64:	4607      	mov	r7, r0
 8004f66:	bb10      	cbnz	r0, 8004fae <sqrt+0x7a>
 8004f68:	f04f 0800 	mov.w	r8, #0
 8004f6c:	f04f 0900 	mov.w	r9, #0
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	4620      	mov	r0, r4
 8004f76:	4629      	mov	r1, r5
 8004f78:	f7fb fd5c 	bl	8000a34 <__aeabi_dcmplt>
 8004f7c:	b1b8      	cbz	r0, 8004fae <sqrt+0x7a>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	4b18      	ldr	r3, [pc, #96]	; (8004fe4 <sqrt+0xb0>)
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	9708      	str	r7, [sp, #32]
 8004f88:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004f8c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004f90:	b9b6      	cbnz	r6, 8004fc0 <sqrt+0x8c>
 8004f92:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004f96:	4668      	mov	r0, sp
 8004f98:	f001 fd1e 	bl	80069d8 <matherr>
 8004f9c:	b1d0      	cbz	r0, 8004fd4 <sqrt+0xa0>
 8004f9e:	9b08      	ldr	r3, [sp, #32]
 8004fa0:	b11b      	cbz	r3, 8004faa <sqrt+0x76>
 8004fa2:	f7ff fe87 	bl	8004cb4 <__errno>
 8004fa6:	9b08      	ldr	r3, [sp, #32]
 8004fa8:	6003      	str	r3, [r0, #0]
 8004faa:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004fae:	eeb0 0a48 	vmov.f32	s0, s16
 8004fb2:	eef0 0a68 	vmov.f32	s1, s17
 8004fb6:	b00b      	add	sp, #44	; 0x2c
 8004fb8:	ecbd 8b02 	vpop	{d8}
 8004fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	4640      	mov	r0, r8
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	f7fb fbec 	bl	80007a4 <__aeabi_ddiv>
 8004fcc:	2e02      	cmp	r6, #2
 8004fce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004fd2:	d1e0      	bne.n	8004f96 <sqrt+0x62>
 8004fd4:	f7ff fe6e 	bl	8004cb4 <__errno>
 8004fd8:	2321      	movs	r3, #33	; 0x21
 8004fda:	6003      	str	r3, [r0, #0]
 8004fdc:	e7df      	b.n	8004f9e <sqrt+0x6a>
 8004fde:	bf00      	nop
 8004fe0:	20000084 	.word	0x20000084
 8004fe4:	08006e28 	.word	0x08006e28

08004fe8 <atan2f>:
 8004fe8:	f000 baa4 	b.w	8005534 <__ieee754_atan2f>
 8004fec:	0000      	movs	r0, r0
	...

08004ff0 <__ieee754_rem_pio2>:
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	ec57 6b10 	vmov	r6, r7, d0
 8004ff8:	4bc3      	ldr	r3, [pc, #780]	; (8005308 <__ieee754_rem_pio2+0x318>)
 8004ffa:	b08d      	sub	sp, #52	; 0x34
 8004ffc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005000:	4598      	cmp	r8, r3
 8005002:	4604      	mov	r4, r0
 8005004:	9704      	str	r7, [sp, #16]
 8005006:	dc07      	bgt.n	8005018 <__ieee754_rem_pio2+0x28>
 8005008:	2200      	movs	r2, #0
 800500a:	2300      	movs	r3, #0
 800500c:	ed84 0b00 	vstr	d0, [r4]
 8005010:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005014:	2500      	movs	r5, #0
 8005016:	e027      	b.n	8005068 <__ieee754_rem_pio2+0x78>
 8005018:	4bbc      	ldr	r3, [pc, #752]	; (800530c <__ieee754_rem_pio2+0x31c>)
 800501a:	4598      	cmp	r8, r3
 800501c:	dc75      	bgt.n	800510a <__ieee754_rem_pio2+0x11a>
 800501e:	9b04      	ldr	r3, [sp, #16]
 8005020:	4dbb      	ldr	r5, [pc, #748]	; (8005310 <__ieee754_rem_pio2+0x320>)
 8005022:	2b00      	cmp	r3, #0
 8005024:	ee10 0a10 	vmov	r0, s0
 8005028:	a3a9      	add	r3, pc, #676	; (adr r3, 80052d0 <__ieee754_rem_pio2+0x2e0>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	4639      	mov	r1, r7
 8005030:	dd36      	ble.n	80050a0 <__ieee754_rem_pio2+0xb0>
 8005032:	f7fb f8d5 	bl	80001e0 <__aeabi_dsub>
 8005036:	45a8      	cmp	r8, r5
 8005038:	4606      	mov	r6, r0
 800503a:	460f      	mov	r7, r1
 800503c:	d018      	beq.n	8005070 <__ieee754_rem_pio2+0x80>
 800503e:	a3a6      	add	r3, pc, #664	; (adr r3, 80052d8 <__ieee754_rem_pio2+0x2e8>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb f8cc 	bl	80001e0 <__aeabi_dsub>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	e9c4 2300 	strd	r2, r3, [r4]
 8005050:	4630      	mov	r0, r6
 8005052:	4639      	mov	r1, r7
 8005054:	f7fb f8c4 	bl	80001e0 <__aeabi_dsub>
 8005058:	a39f      	add	r3, pc, #636	; (adr r3, 80052d8 <__ieee754_rem_pio2+0x2e8>)
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f7fb f8bf 	bl	80001e0 <__aeabi_dsub>
 8005062:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005066:	2501      	movs	r5, #1
 8005068:	4628      	mov	r0, r5
 800506a:	b00d      	add	sp, #52	; 0x34
 800506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005070:	a39b      	add	r3, pc, #620	; (adr r3, 80052e0 <__ieee754_rem_pio2+0x2f0>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f7fb f8b3 	bl	80001e0 <__aeabi_dsub>
 800507a:	a39b      	add	r3, pc, #620	; (adr r3, 80052e8 <__ieee754_rem_pio2+0x2f8>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	4606      	mov	r6, r0
 8005082:	460f      	mov	r7, r1
 8005084:	f7fb f8ac 	bl	80001e0 <__aeabi_dsub>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	e9c4 2300 	strd	r2, r3, [r4]
 8005090:	4630      	mov	r0, r6
 8005092:	4639      	mov	r1, r7
 8005094:	f7fb f8a4 	bl	80001e0 <__aeabi_dsub>
 8005098:	a393      	add	r3, pc, #588	; (adr r3, 80052e8 <__ieee754_rem_pio2+0x2f8>)
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	e7de      	b.n	800505e <__ieee754_rem_pio2+0x6e>
 80050a0:	f7fb f8a0 	bl	80001e4 <__adddf3>
 80050a4:	45a8      	cmp	r8, r5
 80050a6:	4606      	mov	r6, r0
 80050a8:	460f      	mov	r7, r1
 80050aa:	d016      	beq.n	80050da <__ieee754_rem_pio2+0xea>
 80050ac:	a38a      	add	r3, pc, #552	; (adr r3, 80052d8 <__ieee754_rem_pio2+0x2e8>)
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f7fb f897 	bl	80001e4 <__adddf3>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	e9c4 2300 	strd	r2, r3, [r4]
 80050be:	4630      	mov	r0, r6
 80050c0:	4639      	mov	r1, r7
 80050c2:	f7fb f88d 	bl	80001e0 <__aeabi_dsub>
 80050c6:	a384      	add	r3, pc, #528	; (adr r3, 80052d8 <__ieee754_rem_pio2+0x2e8>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb f88a 	bl	80001e4 <__adddf3>
 80050d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80050d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80050d8:	e7c6      	b.n	8005068 <__ieee754_rem_pio2+0x78>
 80050da:	a381      	add	r3, pc, #516	; (adr r3, 80052e0 <__ieee754_rem_pio2+0x2f0>)
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f7fb f880 	bl	80001e4 <__adddf3>
 80050e4:	a380      	add	r3, pc, #512	; (adr r3, 80052e8 <__ieee754_rem_pio2+0x2f8>)
 80050e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ea:	4606      	mov	r6, r0
 80050ec:	460f      	mov	r7, r1
 80050ee:	f7fb f879 	bl	80001e4 <__adddf3>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	e9c4 2300 	strd	r2, r3, [r4]
 80050fa:	4630      	mov	r0, r6
 80050fc:	4639      	mov	r1, r7
 80050fe:	f7fb f86f 	bl	80001e0 <__aeabi_dsub>
 8005102:	a379      	add	r3, pc, #484	; (adr r3, 80052e8 <__ieee754_rem_pio2+0x2f8>)
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	e7e0      	b.n	80050cc <__ieee754_rem_pio2+0xdc>
 800510a:	4b82      	ldr	r3, [pc, #520]	; (8005314 <__ieee754_rem_pio2+0x324>)
 800510c:	4598      	cmp	r8, r3
 800510e:	f300 80d0 	bgt.w	80052b2 <__ieee754_rem_pio2+0x2c2>
 8005112:	f001 fbd3 	bl	80068bc <fabs>
 8005116:	ec57 6b10 	vmov	r6, r7, d0
 800511a:	ee10 0a10 	vmov	r0, s0
 800511e:	a374      	add	r3, pc, #464	; (adr r3, 80052f0 <__ieee754_rem_pio2+0x300>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	4639      	mov	r1, r7
 8005126:	f7fb fa13 	bl	8000550 <__aeabi_dmul>
 800512a:	2200      	movs	r2, #0
 800512c:	4b7a      	ldr	r3, [pc, #488]	; (8005318 <__ieee754_rem_pio2+0x328>)
 800512e:	f7fb f859 	bl	80001e4 <__adddf3>
 8005132:	f7fb fcbd 	bl	8000ab0 <__aeabi_d2iz>
 8005136:	4605      	mov	r5, r0
 8005138:	f7fb f9a0 	bl	800047c <__aeabi_i2d>
 800513c:	a364      	add	r3, pc, #400	; (adr r3, 80052d0 <__ieee754_rem_pio2+0x2e0>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005146:	f7fb fa03 	bl	8000550 <__aeabi_dmul>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4630      	mov	r0, r6
 8005150:	4639      	mov	r1, r7
 8005152:	f7fb f845 	bl	80001e0 <__aeabi_dsub>
 8005156:	a360      	add	r3, pc, #384	; (adr r3, 80052d8 <__ieee754_rem_pio2+0x2e8>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	4682      	mov	sl, r0
 800515e:	468b      	mov	fp, r1
 8005160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005164:	f7fb f9f4 	bl	8000550 <__aeabi_dmul>
 8005168:	2d1f      	cmp	r5, #31
 800516a:	4606      	mov	r6, r0
 800516c:	460f      	mov	r7, r1
 800516e:	dc0c      	bgt.n	800518a <__ieee754_rem_pio2+0x19a>
 8005170:	1e6a      	subs	r2, r5, #1
 8005172:	4b6a      	ldr	r3, [pc, #424]	; (800531c <__ieee754_rem_pio2+0x32c>)
 8005174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005178:	4543      	cmp	r3, r8
 800517a:	d006      	beq.n	800518a <__ieee754_rem_pio2+0x19a>
 800517c:	4632      	mov	r2, r6
 800517e:	463b      	mov	r3, r7
 8005180:	4650      	mov	r0, sl
 8005182:	4659      	mov	r1, fp
 8005184:	f7fb f82c 	bl	80001e0 <__aeabi_dsub>
 8005188:	e00e      	b.n	80051a8 <__ieee754_rem_pio2+0x1b8>
 800518a:	4632      	mov	r2, r6
 800518c:	463b      	mov	r3, r7
 800518e:	4650      	mov	r0, sl
 8005190:	4659      	mov	r1, fp
 8005192:	f7fb f825 	bl	80001e0 <__aeabi_dsub>
 8005196:	ea4f 5328 	mov.w	r3, r8, asr #20
 800519a:	9305      	str	r3, [sp, #20]
 800519c:	9a05      	ldr	r2, [sp, #20]
 800519e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	dc02      	bgt.n	80051ae <__ieee754_rem_pio2+0x1be>
 80051a8:	e9c4 0100 	strd	r0, r1, [r4]
 80051ac:	e039      	b.n	8005222 <__ieee754_rem_pio2+0x232>
 80051ae:	a34c      	add	r3, pc, #304	; (adr r3, 80052e0 <__ieee754_rem_pio2+0x2f0>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051b8:	f7fb f9ca 	bl	8000550 <__aeabi_dmul>
 80051bc:	4606      	mov	r6, r0
 80051be:	460f      	mov	r7, r1
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4650      	mov	r0, sl
 80051c6:	4659      	mov	r1, fp
 80051c8:	f7fb f80a 	bl	80001e0 <__aeabi_dsub>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4680      	mov	r8, r0
 80051d2:	4689      	mov	r9, r1
 80051d4:	4650      	mov	r0, sl
 80051d6:	4659      	mov	r1, fp
 80051d8:	f7fb f802 	bl	80001e0 <__aeabi_dsub>
 80051dc:	4632      	mov	r2, r6
 80051de:	463b      	mov	r3, r7
 80051e0:	f7fa fffe 	bl	80001e0 <__aeabi_dsub>
 80051e4:	a340      	add	r3, pc, #256	; (adr r3, 80052e8 <__ieee754_rem_pio2+0x2f8>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	4606      	mov	r6, r0
 80051ec:	460f      	mov	r7, r1
 80051ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051f2:	f7fb f9ad 	bl	8000550 <__aeabi_dmul>
 80051f6:	4632      	mov	r2, r6
 80051f8:	463b      	mov	r3, r7
 80051fa:	f7fa fff1 	bl	80001e0 <__aeabi_dsub>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4606      	mov	r6, r0
 8005204:	460f      	mov	r7, r1
 8005206:	4640      	mov	r0, r8
 8005208:	4649      	mov	r1, r9
 800520a:	f7fa ffe9 	bl	80001e0 <__aeabi_dsub>
 800520e:	9a05      	ldr	r2, [sp, #20]
 8005210:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b31      	cmp	r3, #49	; 0x31
 8005218:	dc20      	bgt.n	800525c <__ieee754_rem_pio2+0x26c>
 800521a:	e9c4 0100 	strd	r0, r1, [r4]
 800521e:	46c2      	mov	sl, r8
 8005220:	46cb      	mov	fp, r9
 8005222:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005226:	4650      	mov	r0, sl
 8005228:	4642      	mov	r2, r8
 800522a:	464b      	mov	r3, r9
 800522c:	4659      	mov	r1, fp
 800522e:	f7fa ffd7 	bl	80001e0 <__aeabi_dsub>
 8005232:	463b      	mov	r3, r7
 8005234:	4632      	mov	r2, r6
 8005236:	f7fa ffd3 	bl	80001e0 <__aeabi_dsub>
 800523a:	9b04      	ldr	r3, [sp, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005242:	f6bf af11 	bge.w	8005068 <__ieee754_rem_pio2+0x78>
 8005246:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800524a:	6063      	str	r3, [r4, #4]
 800524c:	f8c4 8000 	str.w	r8, [r4]
 8005250:	60a0      	str	r0, [r4, #8]
 8005252:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005256:	60e3      	str	r3, [r4, #12]
 8005258:	426d      	negs	r5, r5
 800525a:	e705      	b.n	8005068 <__ieee754_rem_pio2+0x78>
 800525c:	a326      	add	r3, pc, #152	; (adr r3, 80052f8 <__ieee754_rem_pio2+0x308>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005266:	f7fb f973 	bl	8000550 <__aeabi_dmul>
 800526a:	4606      	mov	r6, r0
 800526c:	460f      	mov	r7, r1
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4640      	mov	r0, r8
 8005274:	4649      	mov	r1, r9
 8005276:	f7fa ffb3 	bl	80001e0 <__aeabi_dsub>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4682      	mov	sl, r0
 8005280:	468b      	mov	fp, r1
 8005282:	4640      	mov	r0, r8
 8005284:	4649      	mov	r1, r9
 8005286:	f7fa ffab 	bl	80001e0 <__aeabi_dsub>
 800528a:	4632      	mov	r2, r6
 800528c:	463b      	mov	r3, r7
 800528e:	f7fa ffa7 	bl	80001e0 <__aeabi_dsub>
 8005292:	a31b      	add	r3, pc, #108	; (adr r3, 8005300 <__ieee754_rem_pio2+0x310>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	4606      	mov	r6, r0
 800529a:	460f      	mov	r7, r1
 800529c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052a0:	f7fb f956 	bl	8000550 <__aeabi_dmul>
 80052a4:	4632      	mov	r2, r6
 80052a6:	463b      	mov	r3, r7
 80052a8:	f7fa ff9a 	bl	80001e0 <__aeabi_dsub>
 80052ac:	4606      	mov	r6, r0
 80052ae:	460f      	mov	r7, r1
 80052b0:	e764      	b.n	800517c <__ieee754_rem_pio2+0x18c>
 80052b2:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <__ieee754_rem_pio2+0x330>)
 80052b4:	4598      	cmp	r8, r3
 80052b6:	dd35      	ble.n	8005324 <__ieee754_rem_pio2+0x334>
 80052b8:	ee10 2a10 	vmov	r2, s0
 80052bc:	463b      	mov	r3, r7
 80052be:	4630      	mov	r0, r6
 80052c0:	4639      	mov	r1, r7
 80052c2:	f7fa ff8d 	bl	80001e0 <__aeabi_dsub>
 80052c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80052ca:	e9c4 0100 	strd	r0, r1, [r4]
 80052ce:	e6a1      	b.n	8005014 <__ieee754_rem_pio2+0x24>
 80052d0:	54400000 	.word	0x54400000
 80052d4:	3ff921fb 	.word	0x3ff921fb
 80052d8:	1a626331 	.word	0x1a626331
 80052dc:	3dd0b461 	.word	0x3dd0b461
 80052e0:	1a600000 	.word	0x1a600000
 80052e4:	3dd0b461 	.word	0x3dd0b461
 80052e8:	2e037073 	.word	0x2e037073
 80052ec:	3ba3198a 	.word	0x3ba3198a
 80052f0:	6dc9c883 	.word	0x6dc9c883
 80052f4:	3fe45f30 	.word	0x3fe45f30
 80052f8:	2e000000 	.word	0x2e000000
 80052fc:	3ba3198a 	.word	0x3ba3198a
 8005300:	252049c1 	.word	0x252049c1
 8005304:	397b839a 	.word	0x397b839a
 8005308:	3fe921fb 	.word	0x3fe921fb
 800530c:	4002d97b 	.word	0x4002d97b
 8005310:	3ff921fb 	.word	0x3ff921fb
 8005314:	413921fb 	.word	0x413921fb
 8005318:	3fe00000 	.word	0x3fe00000
 800531c:	08006e30 	.word	0x08006e30
 8005320:	7fefffff 	.word	0x7fefffff
 8005324:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005328:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800532c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005330:	4630      	mov	r0, r6
 8005332:	460f      	mov	r7, r1
 8005334:	f7fb fbbc 	bl	8000ab0 <__aeabi_d2iz>
 8005338:	f7fb f8a0 	bl	800047c <__aeabi_i2d>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4630      	mov	r0, r6
 8005342:	4639      	mov	r1, r7
 8005344:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005348:	f7fa ff4a 	bl	80001e0 <__aeabi_dsub>
 800534c:	2200      	movs	r2, #0
 800534e:	4b1f      	ldr	r3, [pc, #124]	; (80053cc <__ieee754_rem_pio2+0x3dc>)
 8005350:	f7fb f8fe 	bl	8000550 <__aeabi_dmul>
 8005354:	460f      	mov	r7, r1
 8005356:	4606      	mov	r6, r0
 8005358:	f7fb fbaa 	bl	8000ab0 <__aeabi_d2iz>
 800535c:	f7fb f88e 	bl	800047c <__aeabi_i2d>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4630      	mov	r0, r6
 8005366:	4639      	mov	r1, r7
 8005368:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800536c:	f7fa ff38 	bl	80001e0 <__aeabi_dsub>
 8005370:	2200      	movs	r2, #0
 8005372:	4b16      	ldr	r3, [pc, #88]	; (80053cc <__ieee754_rem_pio2+0x3dc>)
 8005374:	f7fb f8ec 	bl	8000550 <__aeabi_dmul>
 8005378:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800537c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005380:	f04f 0803 	mov.w	r8, #3
 8005384:	2600      	movs	r6, #0
 8005386:	2700      	movs	r7, #0
 8005388:	4632      	mov	r2, r6
 800538a:	463b      	mov	r3, r7
 800538c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005390:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8005394:	f7fb fb44 	bl	8000a20 <__aeabi_dcmpeq>
 8005398:	b9b0      	cbnz	r0, 80053c8 <__ieee754_rem_pio2+0x3d8>
 800539a:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <__ieee754_rem_pio2+0x3e0>)
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	2302      	movs	r3, #2
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	462a      	mov	r2, r5
 80053a4:	4643      	mov	r3, r8
 80053a6:	4621      	mov	r1, r4
 80053a8:	a806      	add	r0, sp, #24
 80053aa:	f000 fb65 	bl	8005a78 <__kernel_rem_pio2>
 80053ae:	9b04      	ldr	r3, [sp, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	4605      	mov	r5, r0
 80053b4:	f6bf ae58 	bge.w	8005068 <__ieee754_rem_pio2+0x78>
 80053b8:	6863      	ldr	r3, [r4, #4]
 80053ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80053be:	6063      	str	r3, [r4, #4]
 80053c0:	68e3      	ldr	r3, [r4, #12]
 80053c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80053c6:	e746      	b.n	8005256 <__ieee754_rem_pio2+0x266>
 80053c8:	46d0      	mov	r8, sl
 80053ca:	e7dd      	b.n	8005388 <__ieee754_rem_pio2+0x398>
 80053cc:	41700000 	.word	0x41700000
 80053d0:	08006eb0 	.word	0x08006eb0

080053d4 <__ieee754_sqrt>:
 80053d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d8:	4955      	ldr	r1, [pc, #340]	; (8005530 <__ieee754_sqrt+0x15c>)
 80053da:	ec55 4b10 	vmov	r4, r5, d0
 80053de:	43a9      	bics	r1, r5
 80053e0:	462b      	mov	r3, r5
 80053e2:	462a      	mov	r2, r5
 80053e4:	d112      	bne.n	800540c <__ieee754_sqrt+0x38>
 80053e6:	ee10 2a10 	vmov	r2, s0
 80053ea:	ee10 0a10 	vmov	r0, s0
 80053ee:	4629      	mov	r1, r5
 80053f0:	f7fb f8ae 	bl	8000550 <__aeabi_dmul>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4620      	mov	r0, r4
 80053fa:	4629      	mov	r1, r5
 80053fc:	f7fa fef2 	bl	80001e4 <__adddf3>
 8005400:	4604      	mov	r4, r0
 8005402:	460d      	mov	r5, r1
 8005404:	ec45 4b10 	vmov	d0, r4, r5
 8005408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800540c:	2d00      	cmp	r5, #0
 800540e:	ee10 0a10 	vmov	r0, s0
 8005412:	4621      	mov	r1, r4
 8005414:	dc0f      	bgt.n	8005436 <__ieee754_sqrt+0x62>
 8005416:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800541a:	4330      	orrs	r0, r6
 800541c:	d0f2      	beq.n	8005404 <__ieee754_sqrt+0x30>
 800541e:	b155      	cbz	r5, 8005436 <__ieee754_sqrt+0x62>
 8005420:	ee10 2a10 	vmov	r2, s0
 8005424:	4620      	mov	r0, r4
 8005426:	4629      	mov	r1, r5
 8005428:	f7fa feda 	bl	80001e0 <__aeabi_dsub>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	f7fb f9b8 	bl	80007a4 <__aeabi_ddiv>
 8005434:	e7e4      	b.n	8005400 <__ieee754_sqrt+0x2c>
 8005436:	151b      	asrs	r3, r3, #20
 8005438:	d073      	beq.n	8005522 <__ieee754_sqrt+0x14e>
 800543a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800543e:	07dd      	lsls	r5, r3, #31
 8005440:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005444:	bf48      	it	mi
 8005446:	0fc8      	lsrmi	r0, r1, #31
 8005448:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800544c:	bf44      	itt	mi
 800544e:	0049      	lslmi	r1, r1, #1
 8005450:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8005454:	2500      	movs	r5, #0
 8005456:	1058      	asrs	r0, r3, #1
 8005458:	0fcb      	lsrs	r3, r1, #31
 800545a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800545e:	0049      	lsls	r1, r1, #1
 8005460:	2316      	movs	r3, #22
 8005462:	462c      	mov	r4, r5
 8005464:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005468:	19a7      	adds	r7, r4, r6
 800546a:	4297      	cmp	r7, r2
 800546c:	bfde      	ittt	le
 800546e:	19bc      	addle	r4, r7, r6
 8005470:	1bd2      	suble	r2, r2, r7
 8005472:	19ad      	addle	r5, r5, r6
 8005474:	0fcf      	lsrs	r7, r1, #31
 8005476:	3b01      	subs	r3, #1
 8005478:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800547c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005480:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005484:	d1f0      	bne.n	8005468 <__ieee754_sqrt+0x94>
 8005486:	f04f 0c20 	mov.w	ip, #32
 800548a:	469e      	mov	lr, r3
 800548c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005490:	42a2      	cmp	r2, r4
 8005492:	eb06 070e 	add.w	r7, r6, lr
 8005496:	dc02      	bgt.n	800549e <__ieee754_sqrt+0xca>
 8005498:	d112      	bne.n	80054c0 <__ieee754_sqrt+0xec>
 800549a:	428f      	cmp	r7, r1
 800549c:	d810      	bhi.n	80054c0 <__ieee754_sqrt+0xec>
 800549e:	2f00      	cmp	r7, #0
 80054a0:	eb07 0e06 	add.w	lr, r7, r6
 80054a4:	da42      	bge.n	800552c <__ieee754_sqrt+0x158>
 80054a6:	f1be 0f00 	cmp.w	lr, #0
 80054aa:	db3f      	blt.n	800552c <__ieee754_sqrt+0x158>
 80054ac:	f104 0801 	add.w	r8, r4, #1
 80054b0:	1b12      	subs	r2, r2, r4
 80054b2:	428f      	cmp	r7, r1
 80054b4:	bf88      	it	hi
 80054b6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80054ba:	1bc9      	subs	r1, r1, r7
 80054bc:	4433      	add	r3, r6
 80054be:	4644      	mov	r4, r8
 80054c0:	0052      	lsls	r2, r2, #1
 80054c2:	f1bc 0c01 	subs.w	ip, ip, #1
 80054c6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80054ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80054ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80054d2:	d1dd      	bne.n	8005490 <__ieee754_sqrt+0xbc>
 80054d4:	430a      	orrs	r2, r1
 80054d6:	d006      	beq.n	80054e6 <__ieee754_sqrt+0x112>
 80054d8:	1c5c      	adds	r4, r3, #1
 80054da:	bf13      	iteet	ne
 80054dc:	3301      	addne	r3, #1
 80054de:	3501      	addeq	r5, #1
 80054e0:	4663      	moveq	r3, ip
 80054e2:	f023 0301 	bicne.w	r3, r3, #1
 80054e6:	106a      	asrs	r2, r5, #1
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	07e9      	lsls	r1, r5, #31
 80054ec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80054f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80054f4:	bf48      	it	mi
 80054f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80054fa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80054fe:	461c      	mov	r4, r3
 8005500:	e780      	b.n	8005404 <__ieee754_sqrt+0x30>
 8005502:	0aca      	lsrs	r2, r1, #11
 8005504:	3815      	subs	r0, #21
 8005506:	0549      	lsls	r1, r1, #21
 8005508:	2a00      	cmp	r2, #0
 800550a:	d0fa      	beq.n	8005502 <__ieee754_sqrt+0x12e>
 800550c:	02d6      	lsls	r6, r2, #11
 800550e:	d50a      	bpl.n	8005526 <__ieee754_sqrt+0x152>
 8005510:	f1c3 0420 	rsb	r4, r3, #32
 8005514:	fa21 f404 	lsr.w	r4, r1, r4
 8005518:	1e5d      	subs	r5, r3, #1
 800551a:	4099      	lsls	r1, r3
 800551c:	4322      	orrs	r2, r4
 800551e:	1b43      	subs	r3, r0, r5
 8005520:	e78b      	b.n	800543a <__ieee754_sqrt+0x66>
 8005522:	4618      	mov	r0, r3
 8005524:	e7f0      	b.n	8005508 <__ieee754_sqrt+0x134>
 8005526:	0052      	lsls	r2, r2, #1
 8005528:	3301      	adds	r3, #1
 800552a:	e7ef      	b.n	800550c <__ieee754_sqrt+0x138>
 800552c:	46a0      	mov	r8, r4
 800552e:	e7bf      	b.n	80054b0 <__ieee754_sqrt+0xdc>
 8005530:	7ff00000 	.word	0x7ff00000

08005534 <__ieee754_atan2f>:
 8005534:	ee10 2a90 	vmov	r2, s1
 8005538:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800553c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005540:	b510      	push	{r4, lr}
 8005542:	eef0 7a40 	vmov.f32	s15, s0
 8005546:	dc06      	bgt.n	8005556 <__ieee754_atan2f+0x22>
 8005548:	ee10 0a10 	vmov	r0, s0
 800554c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005550:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005554:	dd04      	ble.n	8005560 <__ieee754_atan2f+0x2c>
 8005556:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800555a:	eeb0 0a67 	vmov.f32	s0, s15
 800555e:	bd10      	pop	{r4, pc}
 8005560:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8005564:	d103      	bne.n	800556e <__ieee754_atan2f+0x3a>
 8005566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800556a:	f001 baaf 	b.w	8006acc <atanf>
 800556e:	1794      	asrs	r4, r2, #30
 8005570:	f004 0402 	and.w	r4, r4, #2
 8005574:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005578:	b943      	cbnz	r3, 800558c <__ieee754_atan2f+0x58>
 800557a:	2c02      	cmp	r4, #2
 800557c:	d06e      	beq.n	800565c <__ieee754_atan2f+0x128>
 800557e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005664 <__ieee754_atan2f+0x130>
 8005582:	2c03      	cmp	r4, #3
 8005584:	bf08      	it	eq
 8005586:	eef0 7a47 	vmoveq.f32	s15, s14
 800558a:	e7e6      	b.n	800555a <__ieee754_atan2f+0x26>
 800558c:	b941      	cbnz	r1, 80055a0 <__ieee754_atan2f+0x6c>
 800558e:	eddf 7a36 	vldr	s15, [pc, #216]	; 8005668 <__ieee754_atan2f+0x134>
 8005592:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800566c <__ieee754_atan2f+0x138>
 8005596:	2800      	cmp	r0, #0
 8005598:	bfb8      	it	lt
 800559a:	eef0 7a47 	vmovlt.f32	s15, s14
 800559e:	e7dc      	b.n	800555a <__ieee754_atan2f+0x26>
 80055a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80055a4:	d122      	bne.n	80055ec <__ieee754_atan2f+0xb8>
 80055a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80055aa:	d112      	bne.n	80055d2 <__ieee754_atan2f+0x9e>
 80055ac:	2c02      	cmp	r4, #2
 80055ae:	d00a      	beq.n	80055c6 <__ieee754_atan2f+0x92>
 80055b0:	2c03      	cmp	r4, #3
 80055b2:	d00b      	beq.n	80055cc <__ieee754_atan2f+0x98>
 80055b4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005670 <__ieee754_atan2f+0x13c>
 80055b8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005674 <__ieee754_atan2f+0x140>
 80055bc:	2c01      	cmp	r4, #1
 80055be:	bf18      	it	ne
 80055c0:	eef0 7a47 	vmovne.f32	s15, s14
 80055c4:	e7c9      	b.n	800555a <__ieee754_atan2f+0x26>
 80055c6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8005678 <__ieee754_atan2f+0x144>
 80055ca:	e7c6      	b.n	800555a <__ieee754_atan2f+0x26>
 80055cc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800567c <__ieee754_atan2f+0x148>
 80055d0:	e7c3      	b.n	800555a <__ieee754_atan2f+0x26>
 80055d2:	2c02      	cmp	r4, #2
 80055d4:	d042      	beq.n	800565c <__ieee754_atan2f+0x128>
 80055d6:	2c03      	cmp	r4, #3
 80055d8:	d005      	beq.n	80055e6 <__ieee754_atan2f+0xb2>
 80055da:	2c01      	cmp	r4, #1
 80055dc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8005680 <__ieee754_atan2f+0x14c>
 80055e0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005684 <__ieee754_atan2f+0x150>
 80055e4:	e7eb      	b.n	80055be <__ieee754_atan2f+0x8a>
 80055e6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005664 <__ieee754_atan2f+0x130>
 80055ea:	e7b6      	b.n	800555a <__ieee754_atan2f+0x26>
 80055ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80055f0:	d0cd      	beq.n	800558e <__ieee754_atan2f+0x5a>
 80055f2:	1a5b      	subs	r3, r3, r1
 80055f4:	15db      	asrs	r3, r3, #23
 80055f6:	2b3c      	cmp	r3, #60	; 0x3c
 80055f8:	dc1a      	bgt.n	8005630 <__ieee754_atan2f+0xfc>
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	da01      	bge.n	8005602 <__ieee754_atan2f+0xce>
 80055fe:	333c      	adds	r3, #60	; 0x3c
 8005600:	db19      	blt.n	8005636 <__ieee754_atan2f+0x102>
 8005602:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8005606:	f001 fb35 	bl	8006c74 <fabsf>
 800560a:	f001 fa5f 	bl	8006acc <atanf>
 800560e:	eef0 7a40 	vmov.f32	s15, s0
 8005612:	2c01      	cmp	r4, #1
 8005614:	d012      	beq.n	800563c <__ieee754_atan2f+0x108>
 8005616:	2c02      	cmp	r4, #2
 8005618:	d017      	beq.n	800564a <__ieee754_atan2f+0x116>
 800561a:	2c00      	cmp	r4, #0
 800561c:	d09d      	beq.n	800555a <__ieee754_atan2f+0x26>
 800561e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005688 <__ieee754_atan2f+0x154>
 8005622:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005626:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800568c <__ieee754_atan2f+0x158>
 800562a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800562e:	e794      	b.n	800555a <__ieee754_atan2f+0x26>
 8005630:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005668 <__ieee754_atan2f+0x134>
 8005634:	e7ed      	b.n	8005612 <__ieee754_atan2f+0xde>
 8005636:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005684 <__ieee754_atan2f+0x150>
 800563a:	e7ea      	b.n	8005612 <__ieee754_atan2f+0xde>
 800563c:	ee17 3a90 	vmov	r3, s15
 8005640:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	e787      	b.n	800555a <__ieee754_atan2f+0x26>
 800564a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005688 <__ieee754_atan2f+0x154>
 800564e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005652:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800568c <__ieee754_atan2f+0x158>
 8005656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800565a:	e77e      	b.n	800555a <__ieee754_atan2f+0x26>
 800565c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800568c <__ieee754_atan2f+0x158>
 8005660:	e77b      	b.n	800555a <__ieee754_atan2f+0x26>
 8005662:	bf00      	nop
 8005664:	c0490fdb 	.word	0xc0490fdb
 8005668:	3fc90fdb 	.word	0x3fc90fdb
 800566c:	bfc90fdb 	.word	0xbfc90fdb
 8005670:	bf490fdb 	.word	0xbf490fdb
 8005674:	3f490fdb 	.word	0x3f490fdb
 8005678:	4016cbe4 	.word	0x4016cbe4
 800567c:	c016cbe4 	.word	0xc016cbe4
 8005680:	80000000 	.word	0x80000000
 8005684:	00000000 	.word	0x00000000
 8005688:	33bbbd2e 	.word	0x33bbbd2e
 800568c:	40490fdb 	.word	0x40490fdb

08005690 <__ieee754_rem_pio2f>:
 8005690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005692:	ee10 6a10 	vmov	r6, s0
 8005696:	4b86      	ldr	r3, [pc, #536]	; (80058b0 <__ieee754_rem_pio2f+0x220>)
 8005698:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800569c:	429c      	cmp	r4, r3
 800569e:	b087      	sub	sp, #28
 80056a0:	4605      	mov	r5, r0
 80056a2:	dc05      	bgt.n	80056b0 <__ieee754_rem_pio2f+0x20>
 80056a4:	2300      	movs	r3, #0
 80056a6:	ed85 0a00 	vstr	s0, [r5]
 80056aa:	6043      	str	r3, [r0, #4]
 80056ac:	2000      	movs	r0, #0
 80056ae:	e020      	b.n	80056f2 <__ieee754_rem_pio2f+0x62>
 80056b0:	4b80      	ldr	r3, [pc, #512]	; (80058b4 <__ieee754_rem_pio2f+0x224>)
 80056b2:	429c      	cmp	r4, r3
 80056b4:	dc38      	bgt.n	8005728 <__ieee754_rem_pio2f+0x98>
 80056b6:	2e00      	cmp	r6, #0
 80056b8:	f024 040f 	bic.w	r4, r4, #15
 80056bc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80058b8 <__ieee754_rem_pio2f+0x228>
 80056c0:	4b7e      	ldr	r3, [pc, #504]	; (80058bc <__ieee754_rem_pio2f+0x22c>)
 80056c2:	dd18      	ble.n	80056f6 <__ieee754_rem_pio2f+0x66>
 80056c4:	429c      	cmp	r4, r3
 80056c6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80056ca:	bf09      	itett	eq
 80056cc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80058c0 <__ieee754_rem_pio2f+0x230>
 80056d0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80058c4 <__ieee754_rem_pio2f+0x234>
 80056d4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80056d8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80058c8 <__ieee754_rem_pio2f+0x238>
 80056dc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80056e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80056e4:	edc0 6a00 	vstr	s13, [r0]
 80056e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056ec:	edc0 7a01 	vstr	s15, [r0, #4]
 80056f0:	2001      	movs	r0, #1
 80056f2:	b007      	add	sp, #28
 80056f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f6:	429c      	cmp	r4, r3
 80056f8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80056fc:	bf09      	itett	eq
 80056fe:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80058c0 <__ieee754_rem_pio2f+0x230>
 8005702:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80058c4 <__ieee754_rem_pio2f+0x234>
 8005706:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800570a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80058c8 <__ieee754_rem_pio2f+0x238>
 800570e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005712:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005716:	edc0 6a00 	vstr	s13, [r0]
 800571a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800571e:	edc0 7a01 	vstr	s15, [r0, #4]
 8005722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005726:	e7e4      	b.n	80056f2 <__ieee754_rem_pio2f+0x62>
 8005728:	4b68      	ldr	r3, [pc, #416]	; (80058cc <__ieee754_rem_pio2f+0x23c>)
 800572a:	429c      	cmp	r4, r3
 800572c:	dc71      	bgt.n	8005812 <__ieee754_rem_pio2f+0x182>
 800572e:	f001 faa1 	bl	8006c74 <fabsf>
 8005732:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80058d0 <__ieee754_rem_pio2f+0x240>
 8005736:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800573a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800573e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005742:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8005746:	ee17 0a90 	vmov	r0, s15
 800574a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80058b8 <__ieee754_rem_pio2f+0x228>
 800574e:	eeb1 7a46 	vneg.f32	s14, s12
 8005752:	eea7 0a27 	vfma.f32	s0, s14, s15
 8005756:	281f      	cmp	r0, #31
 8005758:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80058c4 <__ieee754_rem_pio2f+0x234>
 800575c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005760:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005764:	ee16 3a90 	vmov	r3, s13
 8005768:	dc1c      	bgt.n	80057a4 <__ieee754_rem_pio2f+0x114>
 800576a:	1e47      	subs	r7, r0, #1
 800576c:	4959      	ldr	r1, [pc, #356]	; (80058d4 <__ieee754_rem_pio2f+0x244>)
 800576e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8005772:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8005776:	428a      	cmp	r2, r1
 8005778:	d014      	beq.n	80057a4 <__ieee754_rem_pio2f+0x114>
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	ed95 7a00 	vldr	s14, [r5]
 8005780:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005784:	2e00      	cmp	r6, #0
 8005786:	ee30 0a67 	vsub.f32	s0, s0, s15
 800578a:	ed85 0a01 	vstr	s0, [r5, #4]
 800578e:	dab0      	bge.n	80056f2 <__ieee754_rem_pio2f+0x62>
 8005790:	eeb1 7a47 	vneg.f32	s14, s14
 8005794:	eeb1 0a40 	vneg.f32	s0, s0
 8005798:	ed85 7a00 	vstr	s14, [r5]
 800579c:	ed85 0a01 	vstr	s0, [r5, #4]
 80057a0:	4240      	negs	r0, r0
 80057a2:	e7a6      	b.n	80056f2 <__ieee754_rem_pio2f+0x62>
 80057a4:	15e4      	asrs	r4, r4, #23
 80057a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80057aa:	1aa2      	subs	r2, r4, r2
 80057ac:	2a08      	cmp	r2, #8
 80057ae:	dde4      	ble.n	800577a <__ieee754_rem_pio2f+0xea>
 80057b0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80058c0 <__ieee754_rem_pio2f+0x230>
 80057b4:	eef0 6a40 	vmov.f32	s13, s0
 80057b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80057bc:	ee30 0a66 	vsub.f32	s0, s0, s13
 80057c0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80057c4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80058c8 <__ieee754_rem_pio2f+0x238>
 80057c8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80057cc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80057d0:	eef0 7a40 	vmov.f32	s15, s0
 80057d4:	ee15 3a90 	vmov	r3, s11
 80057d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80057dc:	1aa4      	subs	r4, r4, r2
 80057de:	2c19      	cmp	r4, #25
 80057e0:	dc04      	bgt.n	80057ec <__ieee754_rem_pio2f+0x15c>
 80057e2:	edc5 5a00 	vstr	s11, [r5]
 80057e6:	eeb0 0a66 	vmov.f32	s0, s13
 80057ea:	e7c7      	b.n	800577c <__ieee754_rem_pio2f+0xec>
 80057ec:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80058d8 <__ieee754_rem_pio2f+0x248>
 80057f0:	eeb0 0a66 	vmov.f32	s0, s13
 80057f4:	eea7 0a25 	vfma.f32	s0, s14, s11
 80057f8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80057fc:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005800:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80058dc <__ieee754_rem_pio2f+0x24c>
 8005804:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8005808:	ee30 7a67 	vsub.f32	s14, s0, s15
 800580c:	ed85 7a00 	vstr	s14, [r5]
 8005810:	e7b4      	b.n	800577c <__ieee754_rem_pio2f+0xec>
 8005812:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005816:	db06      	blt.n	8005826 <__ieee754_rem_pio2f+0x196>
 8005818:	ee70 7a40 	vsub.f32	s15, s0, s0
 800581c:	edc0 7a01 	vstr	s15, [r0, #4]
 8005820:	edc0 7a00 	vstr	s15, [r0]
 8005824:	e742      	b.n	80056ac <__ieee754_rem_pio2f+0x1c>
 8005826:	15e2      	asrs	r2, r4, #23
 8005828:	3a86      	subs	r2, #134	; 0x86
 800582a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005836:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80058e0 <__ieee754_rem_pio2f+0x250>
 800583a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800583e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005842:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005846:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800584a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800584e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005856:	ed8d 7a04 	vstr	s14, [sp, #16]
 800585a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800585e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005866:	edcd 7a05 	vstr	s15, [sp, #20]
 800586a:	d11e      	bne.n	80058aa <__ieee754_rem_pio2f+0x21a>
 800586c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2302      	movne	r3, #2
 800587a:	491a      	ldr	r1, [pc, #104]	; (80058e4 <__ieee754_rem_pio2f+0x254>)
 800587c:	9101      	str	r1, [sp, #4]
 800587e:	2102      	movs	r1, #2
 8005880:	9100      	str	r1, [sp, #0]
 8005882:	a803      	add	r0, sp, #12
 8005884:	4629      	mov	r1, r5
 8005886:	f000 fd4f 	bl	8006328 <__kernel_rem_pio2f>
 800588a:	2e00      	cmp	r6, #0
 800588c:	f6bf af31 	bge.w	80056f2 <__ieee754_rem_pio2f+0x62>
 8005890:	edd5 7a00 	vldr	s15, [r5]
 8005894:	eef1 7a67 	vneg.f32	s15, s15
 8005898:	edc5 7a00 	vstr	s15, [r5]
 800589c:	edd5 7a01 	vldr	s15, [r5, #4]
 80058a0:	eef1 7a67 	vneg.f32	s15, s15
 80058a4:	edc5 7a01 	vstr	s15, [r5, #4]
 80058a8:	e77a      	b.n	80057a0 <__ieee754_rem_pio2f+0x110>
 80058aa:	2303      	movs	r3, #3
 80058ac:	e7e5      	b.n	800587a <__ieee754_rem_pio2f+0x1ea>
 80058ae:	bf00      	nop
 80058b0:	3f490fd8 	.word	0x3f490fd8
 80058b4:	4016cbe3 	.word	0x4016cbe3
 80058b8:	3fc90f80 	.word	0x3fc90f80
 80058bc:	3fc90fd0 	.word	0x3fc90fd0
 80058c0:	37354400 	.word	0x37354400
 80058c4:	37354443 	.word	0x37354443
 80058c8:	2e85a308 	.word	0x2e85a308
 80058cc:	43490f80 	.word	0x43490f80
 80058d0:	3f22f984 	.word	0x3f22f984
 80058d4:	08006fb8 	.word	0x08006fb8
 80058d8:	2e85a300 	.word	0x2e85a300
 80058dc:	248d3132 	.word	0x248d3132
 80058e0:	43800000 	.word	0x43800000
 80058e4:	08007038 	.word	0x08007038

080058e8 <__kernel_cos>:
 80058e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	ec59 8b10 	vmov	r8, r9, d0
 80058f0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80058f4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80058f8:	ed2d 8b02 	vpush	{d8}
 80058fc:	eeb0 8a41 	vmov.f32	s16, s2
 8005900:	eef0 8a61 	vmov.f32	s17, s3
 8005904:	da07      	bge.n	8005916 <__kernel_cos+0x2e>
 8005906:	ee10 0a10 	vmov	r0, s0
 800590a:	4649      	mov	r1, r9
 800590c:	f7fb f8d0 	bl	8000ab0 <__aeabi_d2iz>
 8005910:	2800      	cmp	r0, #0
 8005912:	f000 8089 	beq.w	8005a28 <__kernel_cos+0x140>
 8005916:	4642      	mov	r2, r8
 8005918:	464b      	mov	r3, r9
 800591a:	4640      	mov	r0, r8
 800591c:	4649      	mov	r1, r9
 800591e:	f7fa fe17 	bl	8000550 <__aeabi_dmul>
 8005922:	2200      	movs	r2, #0
 8005924:	4b4e      	ldr	r3, [pc, #312]	; (8005a60 <__kernel_cos+0x178>)
 8005926:	4604      	mov	r4, r0
 8005928:	460d      	mov	r5, r1
 800592a:	f7fa fe11 	bl	8000550 <__aeabi_dmul>
 800592e:	a340      	add	r3, pc, #256	; (adr r3, 8005a30 <__kernel_cos+0x148>)
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	4682      	mov	sl, r0
 8005936:	468b      	mov	fp, r1
 8005938:	4620      	mov	r0, r4
 800593a:	4629      	mov	r1, r5
 800593c:	f7fa fe08 	bl	8000550 <__aeabi_dmul>
 8005940:	a33d      	add	r3, pc, #244	; (adr r3, 8005a38 <__kernel_cos+0x150>)
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	f7fa fc4d 	bl	80001e4 <__adddf3>
 800594a:	4622      	mov	r2, r4
 800594c:	462b      	mov	r3, r5
 800594e:	f7fa fdff 	bl	8000550 <__aeabi_dmul>
 8005952:	a33b      	add	r3, pc, #236	; (adr r3, 8005a40 <__kernel_cos+0x158>)
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f7fa fc42 	bl	80001e0 <__aeabi_dsub>
 800595c:	4622      	mov	r2, r4
 800595e:	462b      	mov	r3, r5
 8005960:	f7fa fdf6 	bl	8000550 <__aeabi_dmul>
 8005964:	a338      	add	r3, pc, #224	; (adr r3, 8005a48 <__kernel_cos+0x160>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f7fa fc3b 	bl	80001e4 <__adddf3>
 800596e:	4622      	mov	r2, r4
 8005970:	462b      	mov	r3, r5
 8005972:	f7fa fded 	bl	8000550 <__aeabi_dmul>
 8005976:	a336      	add	r3, pc, #216	; (adr r3, 8005a50 <__kernel_cos+0x168>)
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f7fa fc30 	bl	80001e0 <__aeabi_dsub>
 8005980:	4622      	mov	r2, r4
 8005982:	462b      	mov	r3, r5
 8005984:	f7fa fde4 	bl	8000550 <__aeabi_dmul>
 8005988:	a333      	add	r3, pc, #204	; (adr r3, 8005a58 <__kernel_cos+0x170>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f7fa fc29 	bl	80001e4 <__adddf3>
 8005992:	4622      	mov	r2, r4
 8005994:	462b      	mov	r3, r5
 8005996:	f7fa fddb 	bl	8000550 <__aeabi_dmul>
 800599a:	4622      	mov	r2, r4
 800599c:	462b      	mov	r3, r5
 800599e:	f7fa fdd7 	bl	8000550 <__aeabi_dmul>
 80059a2:	ec53 2b18 	vmov	r2, r3, d8
 80059a6:	4604      	mov	r4, r0
 80059a8:	460d      	mov	r5, r1
 80059aa:	4640      	mov	r0, r8
 80059ac:	4649      	mov	r1, r9
 80059ae:	f7fa fdcf 	bl	8000550 <__aeabi_dmul>
 80059b2:	460b      	mov	r3, r1
 80059b4:	4602      	mov	r2, r0
 80059b6:	4629      	mov	r1, r5
 80059b8:	4620      	mov	r0, r4
 80059ba:	f7fa fc11 	bl	80001e0 <__aeabi_dsub>
 80059be:	4b29      	ldr	r3, [pc, #164]	; (8005a64 <__kernel_cos+0x17c>)
 80059c0:	429e      	cmp	r6, r3
 80059c2:	4680      	mov	r8, r0
 80059c4:	4689      	mov	r9, r1
 80059c6:	dc11      	bgt.n	80059ec <__kernel_cos+0x104>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4650      	mov	r0, sl
 80059ce:	4659      	mov	r1, fp
 80059d0:	f7fa fc06 	bl	80001e0 <__aeabi_dsub>
 80059d4:	460b      	mov	r3, r1
 80059d6:	4924      	ldr	r1, [pc, #144]	; (8005a68 <__kernel_cos+0x180>)
 80059d8:	4602      	mov	r2, r0
 80059da:	2000      	movs	r0, #0
 80059dc:	f7fa fc00 	bl	80001e0 <__aeabi_dsub>
 80059e0:	ecbd 8b02 	vpop	{d8}
 80059e4:	ec41 0b10 	vmov	d0, r0, r1
 80059e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ec:	4b1f      	ldr	r3, [pc, #124]	; (8005a6c <__kernel_cos+0x184>)
 80059ee:	491e      	ldr	r1, [pc, #120]	; (8005a68 <__kernel_cos+0x180>)
 80059f0:	429e      	cmp	r6, r3
 80059f2:	bfcc      	ite	gt
 80059f4:	4d1e      	ldrgt	r5, [pc, #120]	; (8005a70 <__kernel_cos+0x188>)
 80059f6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80059fa:	2400      	movs	r4, #0
 80059fc:	4622      	mov	r2, r4
 80059fe:	462b      	mov	r3, r5
 8005a00:	2000      	movs	r0, #0
 8005a02:	f7fa fbed 	bl	80001e0 <__aeabi_dsub>
 8005a06:	4622      	mov	r2, r4
 8005a08:	4606      	mov	r6, r0
 8005a0a:	460f      	mov	r7, r1
 8005a0c:	462b      	mov	r3, r5
 8005a0e:	4650      	mov	r0, sl
 8005a10:	4659      	mov	r1, fp
 8005a12:	f7fa fbe5 	bl	80001e0 <__aeabi_dsub>
 8005a16:	4642      	mov	r2, r8
 8005a18:	464b      	mov	r3, r9
 8005a1a:	f7fa fbe1 	bl	80001e0 <__aeabi_dsub>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4630      	mov	r0, r6
 8005a24:	4639      	mov	r1, r7
 8005a26:	e7d9      	b.n	80059dc <__kernel_cos+0xf4>
 8005a28:	2000      	movs	r0, #0
 8005a2a:	490f      	ldr	r1, [pc, #60]	; (8005a68 <__kernel_cos+0x180>)
 8005a2c:	e7d8      	b.n	80059e0 <__kernel_cos+0xf8>
 8005a2e:	bf00      	nop
 8005a30:	be8838d4 	.word	0xbe8838d4
 8005a34:	bda8fae9 	.word	0xbda8fae9
 8005a38:	bdb4b1c4 	.word	0xbdb4b1c4
 8005a3c:	3e21ee9e 	.word	0x3e21ee9e
 8005a40:	809c52ad 	.word	0x809c52ad
 8005a44:	3e927e4f 	.word	0x3e927e4f
 8005a48:	19cb1590 	.word	0x19cb1590
 8005a4c:	3efa01a0 	.word	0x3efa01a0
 8005a50:	16c15177 	.word	0x16c15177
 8005a54:	3f56c16c 	.word	0x3f56c16c
 8005a58:	5555554c 	.word	0x5555554c
 8005a5c:	3fa55555 	.word	0x3fa55555
 8005a60:	3fe00000 	.word	0x3fe00000
 8005a64:	3fd33332 	.word	0x3fd33332
 8005a68:	3ff00000 	.word	0x3ff00000
 8005a6c:	3fe90000 	.word	0x3fe90000
 8005a70:	3fd20000 	.word	0x3fd20000
 8005a74:	00000000 	.word	0x00000000

08005a78 <__kernel_rem_pio2>:
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	ed2d 8b02 	vpush	{d8}
 8005a80:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005a84:	1ed4      	subs	r4, r2, #3
 8005a86:	9308      	str	r3, [sp, #32]
 8005a88:	9101      	str	r1, [sp, #4]
 8005a8a:	4bc5      	ldr	r3, [pc, #788]	; (8005da0 <__kernel_rem_pio2+0x328>)
 8005a8c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005a8e:	9009      	str	r0, [sp, #36]	; 0x24
 8005a90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a94:	9304      	str	r3, [sp, #16]
 8005a96:	9b08      	ldr	r3, [sp, #32]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	9307      	str	r3, [sp, #28]
 8005a9c:	2318      	movs	r3, #24
 8005a9e:	fb94 f4f3 	sdiv	r4, r4, r3
 8005aa2:	f06f 0317 	mvn.w	r3, #23
 8005aa6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005aaa:	fb04 3303 	mla	r3, r4, r3, r3
 8005aae:	eb03 0a02 	add.w	sl, r3, r2
 8005ab2:	9b04      	ldr	r3, [sp, #16]
 8005ab4:	9a07      	ldr	r2, [sp, #28]
 8005ab6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005d90 <__kernel_rem_pio2+0x318>
 8005aba:	eb03 0802 	add.w	r8, r3, r2
 8005abe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005ac0:	1aa7      	subs	r7, r4, r2
 8005ac2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005ac6:	ae22      	add	r6, sp, #136	; 0x88
 8005ac8:	2500      	movs	r5, #0
 8005aca:	4545      	cmp	r5, r8
 8005acc:	dd13      	ble.n	8005af6 <__kernel_rem_pio2+0x7e>
 8005ace:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005d90 <__kernel_rem_pio2+0x318>
 8005ad2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	9b04      	ldr	r3, [sp, #16]
 8005ada:	429e      	cmp	r6, r3
 8005adc:	dc32      	bgt.n	8005b44 <__kernel_rem_pio2+0xcc>
 8005ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae0:	9302      	str	r3, [sp, #8]
 8005ae2:	9b08      	ldr	r3, [sp, #32]
 8005ae4:	199d      	adds	r5, r3, r6
 8005ae6:	ab22      	add	r3, sp, #136	; 0x88
 8005ae8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005aec:	9306      	str	r3, [sp, #24]
 8005aee:	ec59 8b18 	vmov	r8, r9, d8
 8005af2:	2700      	movs	r7, #0
 8005af4:	e01f      	b.n	8005b36 <__kernel_rem_pio2+0xbe>
 8005af6:	42ef      	cmn	r7, r5
 8005af8:	d407      	bmi.n	8005b0a <__kernel_rem_pio2+0x92>
 8005afa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005afe:	f7fa fcbd 	bl	800047c <__aeabi_i2d>
 8005b02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005b06:	3501      	adds	r5, #1
 8005b08:	e7df      	b.n	8005aca <__kernel_rem_pio2+0x52>
 8005b0a:	ec51 0b18 	vmov	r0, r1, d8
 8005b0e:	e7f8      	b.n	8005b02 <__kernel_rem_pio2+0x8a>
 8005b10:	9906      	ldr	r1, [sp, #24]
 8005b12:	9d02      	ldr	r5, [sp, #8]
 8005b14:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005b18:	9106      	str	r1, [sp, #24]
 8005b1a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005b1e:	9502      	str	r5, [sp, #8]
 8005b20:	f7fa fd16 	bl	8000550 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4640      	mov	r0, r8
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	f7fa fb5a 	bl	80001e4 <__adddf3>
 8005b30:	3701      	adds	r7, #1
 8005b32:	4680      	mov	r8, r0
 8005b34:	4689      	mov	r9, r1
 8005b36:	9b07      	ldr	r3, [sp, #28]
 8005b38:	429f      	cmp	r7, r3
 8005b3a:	dde9      	ble.n	8005b10 <__kernel_rem_pio2+0x98>
 8005b3c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005b40:	3601      	adds	r6, #1
 8005b42:	e7c9      	b.n	8005ad8 <__kernel_rem_pio2+0x60>
 8005b44:	9b04      	ldr	r3, [sp, #16]
 8005b46:	aa0e      	add	r2, sp, #56	; 0x38
 8005b48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8005b4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005b50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005b54:	9c04      	ldr	r4, [sp, #16]
 8005b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b58:	ab9a      	add	r3, sp, #616	; 0x268
 8005b5a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005b5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005b66:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005b6a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005b6e:	ab9a      	add	r3, sp, #616	; 0x268
 8005b70:	445b      	add	r3, fp
 8005b72:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005b76:	2500      	movs	r5, #0
 8005b78:	1b63      	subs	r3, r4, r5
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dc78      	bgt.n	8005c70 <__kernel_rem_pio2+0x1f8>
 8005b7e:	4650      	mov	r0, sl
 8005b80:	ec49 8b10 	vmov	d0, r8, r9
 8005b84:	f000 ff2c 	bl	80069e0 <scalbn>
 8005b88:	ec57 6b10 	vmov	r6, r7, d0
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005b92:	ee10 0a10 	vmov	r0, s0
 8005b96:	4639      	mov	r1, r7
 8005b98:	f7fa fcda 	bl	8000550 <__aeabi_dmul>
 8005b9c:	ec41 0b10 	vmov	d0, r0, r1
 8005ba0:	f000 fe96 	bl	80068d0 <floor>
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	ec51 0b10 	vmov	r0, r1, d0
 8005baa:	4b7e      	ldr	r3, [pc, #504]	; (8005da4 <__kernel_rem_pio2+0x32c>)
 8005bac:	f7fa fcd0 	bl	8000550 <__aeabi_dmul>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	4639      	mov	r1, r7
 8005bb8:	f7fa fb12 	bl	80001e0 <__aeabi_dsub>
 8005bbc:	460f      	mov	r7, r1
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	f7fa ff76 	bl	8000ab0 <__aeabi_d2iz>
 8005bc4:	9006      	str	r0, [sp, #24]
 8005bc6:	f7fa fc59 	bl	800047c <__aeabi_i2d>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4630      	mov	r0, r6
 8005bd0:	4639      	mov	r1, r7
 8005bd2:	f7fa fb05 	bl	80001e0 <__aeabi_dsub>
 8005bd6:	f1ba 0f00 	cmp.w	sl, #0
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460f      	mov	r7, r1
 8005bde:	dd6c      	ble.n	8005cba <__kernel_rem_pio2+0x242>
 8005be0:	1e62      	subs	r2, r4, #1
 8005be2:	ab0e      	add	r3, sp, #56	; 0x38
 8005be4:	f1ca 0118 	rsb	r1, sl, #24
 8005be8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005bec:	9d06      	ldr	r5, [sp, #24]
 8005bee:	fa40 f301 	asr.w	r3, r0, r1
 8005bf2:	441d      	add	r5, r3
 8005bf4:	408b      	lsls	r3, r1
 8005bf6:	1ac0      	subs	r0, r0, r3
 8005bf8:	ab0e      	add	r3, sp, #56	; 0x38
 8005bfa:	9506      	str	r5, [sp, #24]
 8005bfc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005c00:	f1ca 0317 	rsb	r3, sl, #23
 8005c04:	fa40 f303 	asr.w	r3, r0, r3
 8005c08:	9302      	str	r3, [sp, #8]
 8005c0a:	9b02      	ldr	r3, [sp, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dd62      	ble.n	8005cd6 <__kernel_rem_pio2+0x25e>
 8005c10:	9b06      	ldr	r3, [sp, #24]
 8005c12:	2200      	movs	r2, #0
 8005c14:	3301      	adds	r3, #1
 8005c16:	9306      	str	r3, [sp, #24]
 8005c18:	4615      	mov	r5, r2
 8005c1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005c1e:	4294      	cmp	r4, r2
 8005c20:	f300 8095 	bgt.w	8005d4e <__kernel_rem_pio2+0x2d6>
 8005c24:	f1ba 0f00 	cmp.w	sl, #0
 8005c28:	dd07      	ble.n	8005c3a <__kernel_rem_pio2+0x1c2>
 8005c2a:	f1ba 0f01 	cmp.w	sl, #1
 8005c2e:	f000 80a2 	beq.w	8005d76 <__kernel_rem_pio2+0x2fe>
 8005c32:	f1ba 0f02 	cmp.w	sl, #2
 8005c36:	f000 80c1 	beq.w	8005dbc <__kernel_rem_pio2+0x344>
 8005c3a:	9b02      	ldr	r3, [sp, #8]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d14a      	bne.n	8005cd6 <__kernel_rem_pio2+0x25e>
 8005c40:	4632      	mov	r2, r6
 8005c42:	463b      	mov	r3, r7
 8005c44:	2000      	movs	r0, #0
 8005c46:	4958      	ldr	r1, [pc, #352]	; (8005da8 <__kernel_rem_pio2+0x330>)
 8005c48:	f7fa faca 	bl	80001e0 <__aeabi_dsub>
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	460f      	mov	r7, r1
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	d040      	beq.n	8005cd6 <__kernel_rem_pio2+0x25e>
 8005c54:	4650      	mov	r0, sl
 8005c56:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005d98 <__kernel_rem_pio2+0x320>
 8005c5a:	f000 fec1 	bl	80069e0 <scalbn>
 8005c5e:	4630      	mov	r0, r6
 8005c60:	4639      	mov	r1, r7
 8005c62:	ec53 2b10 	vmov	r2, r3, d0
 8005c66:	f7fa fabb 	bl	80001e0 <__aeabi_dsub>
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	460f      	mov	r7, r1
 8005c6e:	e032      	b.n	8005cd6 <__kernel_rem_pio2+0x25e>
 8005c70:	2200      	movs	r2, #0
 8005c72:	4b4e      	ldr	r3, [pc, #312]	; (8005dac <__kernel_rem_pio2+0x334>)
 8005c74:	4640      	mov	r0, r8
 8005c76:	4649      	mov	r1, r9
 8005c78:	f7fa fc6a 	bl	8000550 <__aeabi_dmul>
 8005c7c:	f7fa ff18 	bl	8000ab0 <__aeabi_d2iz>
 8005c80:	f7fa fbfc 	bl	800047c <__aeabi_i2d>
 8005c84:	2200      	movs	r2, #0
 8005c86:	4b4a      	ldr	r3, [pc, #296]	; (8005db0 <__kernel_rem_pio2+0x338>)
 8005c88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c8c:	f7fa fc60 	bl	8000550 <__aeabi_dmul>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4640      	mov	r0, r8
 8005c96:	4649      	mov	r1, r9
 8005c98:	f7fa faa2 	bl	80001e0 <__aeabi_dsub>
 8005c9c:	f7fa ff08 	bl	8000ab0 <__aeabi_d2iz>
 8005ca0:	ab0e      	add	r3, sp, #56	; 0x38
 8005ca2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005ca6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cae:	f7fa fa99 	bl	80001e4 <__adddf3>
 8005cb2:	3501      	adds	r5, #1
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	e75e      	b.n	8005b78 <__kernel_rem_pio2+0x100>
 8005cba:	d105      	bne.n	8005cc8 <__kernel_rem_pio2+0x250>
 8005cbc:	1e63      	subs	r3, r4, #1
 8005cbe:	aa0e      	add	r2, sp, #56	; 0x38
 8005cc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005cc4:	15c3      	asrs	r3, r0, #23
 8005cc6:	e79f      	b.n	8005c08 <__kernel_rem_pio2+0x190>
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4b3a      	ldr	r3, [pc, #232]	; (8005db4 <__kernel_rem_pio2+0x33c>)
 8005ccc:	f7fa fec6 	bl	8000a5c <__aeabi_dcmpge>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d139      	bne.n	8005d48 <__kernel_rem_pio2+0x2d0>
 8005cd4:	9002      	str	r0, [sp, #8]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4630      	mov	r0, r6
 8005cdc:	4639      	mov	r1, r7
 8005cde:	f7fa fe9f 	bl	8000a20 <__aeabi_dcmpeq>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	f000 80c7 	beq.w	8005e76 <__kernel_rem_pio2+0x3fe>
 8005ce8:	1e65      	subs	r5, r4, #1
 8005cea:	462b      	mov	r3, r5
 8005cec:	2200      	movs	r2, #0
 8005cee:	9904      	ldr	r1, [sp, #16]
 8005cf0:	428b      	cmp	r3, r1
 8005cf2:	da6a      	bge.n	8005dca <__kernel_rem_pio2+0x352>
 8005cf4:	2a00      	cmp	r2, #0
 8005cf6:	f000 8088 	beq.w	8005e0a <__kernel_rem_pio2+0x392>
 8005cfa:	ab0e      	add	r3, sp, #56	; 0x38
 8005cfc:	f1aa 0a18 	sub.w	sl, sl, #24
 8005d00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 80b4 	beq.w	8005e72 <__kernel_rem_pio2+0x3fa>
 8005d0a:	4650      	mov	r0, sl
 8005d0c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005d98 <__kernel_rem_pio2+0x320>
 8005d10:	f000 fe66 	bl	80069e0 <scalbn>
 8005d14:	00ec      	lsls	r4, r5, #3
 8005d16:	ab72      	add	r3, sp, #456	; 0x1c8
 8005d18:	191e      	adds	r6, r3, r4
 8005d1a:	ec59 8b10 	vmov	r8, r9, d0
 8005d1e:	f106 0a08 	add.w	sl, r6, #8
 8005d22:	462f      	mov	r7, r5
 8005d24:	2f00      	cmp	r7, #0
 8005d26:	f280 80df 	bge.w	8005ee8 <__kernel_rem_pio2+0x470>
 8005d2a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005d90 <__kernel_rem_pio2+0x318>
 8005d2e:	f04f 0a00 	mov.w	sl, #0
 8005d32:	eba5 030a 	sub.w	r3, r5, sl
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f2c0 810a 	blt.w	8005f50 <__kernel_rem_pio2+0x4d8>
 8005d3c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005db8 <__kernel_rem_pio2+0x340>
 8005d40:	ec59 8b18 	vmov	r8, r9, d8
 8005d44:	2700      	movs	r7, #0
 8005d46:	e0f5      	b.n	8005f34 <__kernel_rem_pio2+0x4bc>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	9302      	str	r3, [sp, #8]
 8005d4c:	e760      	b.n	8005c10 <__kernel_rem_pio2+0x198>
 8005d4e:	ab0e      	add	r3, sp, #56	; 0x38
 8005d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d54:	b94d      	cbnz	r5, 8005d6a <__kernel_rem_pio2+0x2f2>
 8005d56:	b12b      	cbz	r3, 8005d64 <__kernel_rem_pio2+0x2ec>
 8005d58:	a80e      	add	r0, sp, #56	; 0x38
 8005d5a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005d5e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005d62:	2301      	movs	r3, #1
 8005d64:	3201      	adds	r2, #1
 8005d66:	461d      	mov	r5, r3
 8005d68:	e759      	b.n	8005c1e <__kernel_rem_pio2+0x1a6>
 8005d6a:	a80e      	add	r0, sp, #56	; 0x38
 8005d6c:	1acb      	subs	r3, r1, r3
 8005d6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005d72:	462b      	mov	r3, r5
 8005d74:	e7f6      	b.n	8005d64 <__kernel_rem_pio2+0x2ec>
 8005d76:	1e62      	subs	r2, r4, #1
 8005d78:	ab0e      	add	r3, sp, #56	; 0x38
 8005d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005d82:	a90e      	add	r1, sp, #56	; 0x38
 8005d84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005d88:	e757      	b.n	8005c3a <__kernel_rem_pio2+0x1c2>
 8005d8a:	bf00      	nop
 8005d8c:	f3af 8000 	nop.w
	...
 8005d9c:	3ff00000 	.word	0x3ff00000
 8005da0:	08007390 	.word	0x08007390
 8005da4:	40200000 	.word	0x40200000
 8005da8:	3ff00000 	.word	0x3ff00000
 8005dac:	3e700000 	.word	0x3e700000
 8005db0:	41700000 	.word	0x41700000
 8005db4:	3fe00000 	.word	0x3fe00000
 8005db8:	08007350 	.word	0x08007350
 8005dbc:	1e62      	subs	r2, r4, #1
 8005dbe:	ab0e      	add	r3, sp, #56	; 0x38
 8005dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005dc8:	e7db      	b.n	8005d82 <__kernel_rem_pio2+0x30a>
 8005dca:	a90e      	add	r1, sp, #56	; 0x38
 8005dcc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	e78b      	b.n	8005cee <__kernel_rem_pio2+0x276>
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	d0fa      	beq.n	8005dd6 <__kernel_rem_pio2+0x35e>
 8005de0:	9a08      	ldr	r2, [sp, #32]
 8005de2:	4422      	add	r2, r4
 8005de4:	00d2      	lsls	r2, r2, #3
 8005de6:	a922      	add	r1, sp, #136	; 0x88
 8005de8:	18e3      	adds	r3, r4, r3
 8005dea:	9206      	str	r2, [sp, #24]
 8005dec:	440a      	add	r2, r1
 8005dee:	9302      	str	r3, [sp, #8]
 8005df0:	f10b 0108 	add.w	r1, fp, #8
 8005df4:	f102 0308 	add.w	r3, r2, #8
 8005df8:	1c66      	adds	r6, r4, #1
 8005dfa:	910a      	str	r1, [sp, #40]	; 0x28
 8005dfc:	2500      	movs	r5, #0
 8005dfe:	930d      	str	r3, [sp, #52]	; 0x34
 8005e00:	9b02      	ldr	r3, [sp, #8]
 8005e02:	42b3      	cmp	r3, r6
 8005e04:	da04      	bge.n	8005e10 <__kernel_rem_pio2+0x398>
 8005e06:	461c      	mov	r4, r3
 8005e08:	e6a6      	b.n	8005b58 <__kernel_rem_pio2+0xe0>
 8005e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e7e3      	b.n	8005dd8 <__kernel_rem_pio2+0x360>
 8005e10:	9b06      	ldr	r3, [sp, #24]
 8005e12:	18ef      	adds	r7, r5, r3
 8005e14:	ab22      	add	r3, sp, #136	; 0x88
 8005e16:	441f      	add	r7, r3
 8005e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005e1e:	f7fa fb2d 	bl	800047c <__aeabi_i2d>
 8005e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e24:	461c      	mov	r4, r3
 8005e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e28:	e9c7 0100 	strd	r0, r1, [r7]
 8005e2c:	eb03 0b05 	add.w	fp, r3, r5
 8005e30:	2700      	movs	r7, #0
 8005e32:	f04f 0800 	mov.w	r8, #0
 8005e36:	f04f 0900 	mov.w	r9, #0
 8005e3a:	9b07      	ldr	r3, [sp, #28]
 8005e3c:	429f      	cmp	r7, r3
 8005e3e:	dd08      	ble.n	8005e52 <__kernel_rem_pio2+0x3da>
 8005e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e42:	aa72      	add	r2, sp, #456	; 0x1c8
 8005e44:	18eb      	adds	r3, r5, r3
 8005e46:	4413      	add	r3, r2
 8005e48:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005e4c:	3601      	adds	r6, #1
 8005e4e:	3508      	adds	r5, #8
 8005e50:	e7d6      	b.n	8005e00 <__kernel_rem_pio2+0x388>
 8005e52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005e56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005e5a:	f7fa fb79 	bl	8000550 <__aeabi_dmul>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4640      	mov	r0, r8
 8005e64:	4649      	mov	r1, r9
 8005e66:	f7fa f9bd 	bl	80001e4 <__adddf3>
 8005e6a:	3701      	adds	r7, #1
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	4689      	mov	r9, r1
 8005e70:	e7e3      	b.n	8005e3a <__kernel_rem_pio2+0x3c2>
 8005e72:	3d01      	subs	r5, #1
 8005e74:	e741      	b.n	8005cfa <__kernel_rem_pio2+0x282>
 8005e76:	f1ca 0000 	rsb	r0, sl, #0
 8005e7a:	ec47 6b10 	vmov	d0, r6, r7
 8005e7e:	f000 fdaf 	bl	80069e0 <scalbn>
 8005e82:	ec57 6b10 	vmov	r6, r7, d0
 8005e86:	2200      	movs	r2, #0
 8005e88:	4b99      	ldr	r3, [pc, #612]	; (80060f0 <__kernel_rem_pio2+0x678>)
 8005e8a:	ee10 0a10 	vmov	r0, s0
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f7fa fde4 	bl	8000a5c <__aeabi_dcmpge>
 8005e94:	b1f8      	cbz	r0, 8005ed6 <__kernel_rem_pio2+0x45e>
 8005e96:	2200      	movs	r2, #0
 8005e98:	4b96      	ldr	r3, [pc, #600]	; (80060f4 <__kernel_rem_pio2+0x67c>)
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	4639      	mov	r1, r7
 8005e9e:	f7fa fb57 	bl	8000550 <__aeabi_dmul>
 8005ea2:	f7fa fe05 	bl	8000ab0 <__aeabi_d2iz>
 8005ea6:	4680      	mov	r8, r0
 8005ea8:	f7fa fae8 	bl	800047c <__aeabi_i2d>
 8005eac:	2200      	movs	r2, #0
 8005eae:	4b90      	ldr	r3, [pc, #576]	; (80060f0 <__kernel_rem_pio2+0x678>)
 8005eb0:	f7fa fb4e 	bl	8000550 <__aeabi_dmul>
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	4639      	mov	r1, r7
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f7fa f990 	bl	80001e0 <__aeabi_dsub>
 8005ec0:	f7fa fdf6 	bl	8000ab0 <__aeabi_d2iz>
 8005ec4:	1c65      	adds	r5, r4, #1
 8005ec6:	ab0e      	add	r3, sp, #56	; 0x38
 8005ec8:	f10a 0a18 	add.w	sl, sl, #24
 8005ecc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005ed0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005ed4:	e719      	b.n	8005d0a <__kernel_rem_pio2+0x292>
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	4639      	mov	r1, r7
 8005eda:	f7fa fde9 	bl	8000ab0 <__aeabi_d2iz>
 8005ede:	ab0e      	add	r3, sp, #56	; 0x38
 8005ee0:	4625      	mov	r5, r4
 8005ee2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005ee6:	e710      	b.n	8005d0a <__kernel_rem_pio2+0x292>
 8005ee8:	ab0e      	add	r3, sp, #56	; 0x38
 8005eea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005eee:	f7fa fac5 	bl	800047c <__aeabi_i2d>
 8005ef2:	4642      	mov	r2, r8
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	f7fa fb2b 	bl	8000550 <__aeabi_dmul>
 8005efa:	2200      	movs	r2, #0
 8005efc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005f00:	4b7c      	ldr	r3, [pc, #496]	; (80060f4 <__kernel_rem_pio2+0x67c>)
 8005f02:	4640      	mov	r0, r8
 8005f04:	4649      	mov	r1, r9
 8005f06:	f7fa fb23 	bl	8000550 <__aeabi_dmul>
 8005f0a:	3f01      	subs	r7, #1
 8005f0c:	4680      	mov	r8, r0
 8005f0e:	4689      	mov	r9, r1
 8005f10:	e708      	b.n	8005d24 <__kernel_rem_pio2+0x2ac>
 8005f12:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005f1e:	f7fa fb17 	bl	8000550 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4640      	mov	r0, r8
 8005f28:	4649      	mov	r1, r9
 8005f2a:	f7fa f95b 	bl	80001e4 <__adddf3>
 8005f2e:	3701      	adds	r7, #1
 8005f30:	4680      	mov	r8, r0
 8005f32:	4689      	mov	r9, r1
 8005f34:	9b04      	ldr	r3, [sp, #16]
 8005f36:	429f      	cmp	r7, r3
 8005f38:	dc01      	bgt.n	8005f3e <__kernel_rem_pio2+0x4c6>
 8005f3a:	45ba      	cmp	sl, r7
 8005f3c:	dae9      	bge.n	8005f12 <__kernel_rem_pio2+0x49a>
 8005f3e:	ab4a      	add	r3, sp, #296	; 0x128
 8005f40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f44:	e9c3 8900 	strd	r8, r9, [r3]
 8005f48:	f10a 0a01 	add.w	sl, sl, #1
 8005f4c:	3e08      	subs	r6, #8
 8005f4e:	e6f0      	b.n	8005d32 <__kernel_rem_pio2+0x2ba>
 8005f50:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d85b      	bhi.n	800600e <__kernel_rem_pio2+0x596>
 8005f56:	e8df f003 	tbb	[pc, r3]
 8005f5a:	264a      	.short	0x264a
 8005f5c:	0226      	.short	0x0226
 8005f5e:	ab9a      	add	r3, sp, #616	; 0x268
 8005f60:	441c      	add	r4, r3
 8005f62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005f66:	46a2      	mov	sl, r4
 8005f68:	46ab      	mov	fp, r5
 8005f6a:	f1bb 0f00 	cmp.w	fp, #0
 8005f6e:	dc6c      	bgt.n	800604a <__kernel_rem_pio2+0x5d2>
 8005f70:	46a2      	mov	sl, r4
 8005f72:	46ab      	mov	fp, r5
 8005f74:	f1bb 0f01 	cmp.w	fp, #1
 8005f78:	f300 8086 	bgt.w	8006088 <__kernel_rem_pio2+0x610>
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	2100      	movs	r1, #0
 8005f80:	2d01      	cmp	r5, #1
 8005f82:	f300 80a0 	bgt.w	80060c6 <__kernel_rem_pio2+0x64e>
 8005f86:	9b02      	ldr	r3, [sp, #8]
 8005f88:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005f8c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 809e 	bne.w	80060d2 <__kernel_rem_pio2+0x65a>
 8005f96:	9b01      	ldr	r3, [sp, #4]
 8005f98:	e9c3 7800 	strd	r7, r8, [r3]
 8005f9c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005fa0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005fa4:	e033      	b.n	800600e <__kernel_rem_pio2+0x596>
 8005fa6:	3408      	adds	r4, #8
 8005fa8:	ab4a      	add	r3, sp, #296	; 0x128
 8005faa:	441c      	add	r4, r3
 8005fac:	462e      	mov	r6, r5
 8005fae:	2000      	movs	r0, #0
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	da3a      	bge.n	800602c <__kernel_rem_pio2+0x5b4>
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d03d      	beq.n	8006038 <__kernel_rem_pio2+0x5c0>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fc2:	9c01      	ldr	r4, [sp, #4]
 8005fc4:	e9c4 2300 	strd	r2, r3, [r4]
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005fd0:	f7fa f906 	bl	80001e0 <__aeabi_dsub>
 8005fd4:	ae4c      	add	r6, sp, #304	; 0x130
 8005fd6:	2401      	movs	r4, #1
 8005fd8:	42a5      	cmp	r5, r4
 8005fda:	da30      	bge.n	800603e <__kernel_rem_pio2+0x5c6>
 8005fdc:	9b02      	ldr	r3, [sp, #8]
 8005fde:	b113      	cbz	r3, 8005fe6 <__kernel_rem_pio2+0x56e>
 8005fe0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	9b01      	ldr	r3, [sp, #4]
 8005fe8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005fec:	e00f      	b.n	800600e <__kernel_rem_pio2+0x596>
 8005fee:	ab9a      	add	r3, sp, #616	; 0x268
 8005ff0:	441c      	add	r4, r3
 8005ff2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	2d00      	cmp	r5, #0
 8005ffc:	da10      	bge.n	8006020 <__kernel_rem_pio2+0x5a8>
 8005ffe:	9b02      	ldr	r3, [sp, #8]
 8006000:	b113      	cbz	r3, 8006008 <__kernel_rem_pio2+0x590>
 8006002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006006:	4619      	mov	r1, r3
 8006008:	9b01      	ldr	r3, [sp, #4]
 800600a:	e9c3 0100 	strd	r0, r1, [r3]
 800600e:	9b06      	ldr	r3, [sp, #24]
 8006010:	f003 0007 	and.w	r0, r3, #7
 8006014:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006018:	ecbd 8b02 	vpop	{d8}
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006024:	f7fa f8de 	bl	80001e4 <__adddf3>
 8006028:	3d01      	subs	r5, #1
 800602a:	e7e6      	b.n	8005ffa <__kernel_rem_pio2+0x582>
 800602c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006030:	f7fa f8d8 	bl	80001e4 <__adddf3>
 8006034:	3e01      	subs	r6, #1
 8006036:	e7bc      	b.n	8005fb2 <__kernel_rem_pio2+0x53a>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	e7c1      	b.n	8005fc2 <__kernel_rem_pio2+0x54a>
 800603e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006042:	f7fa f8cf 	bl	80001e4 <__adddf3>
 8006046:	3401      	adds	r4, #1
 8006048:	e7c6      	b.n	8005fd8 <__kernel_rem_pio2+0x560>
 800604a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800604e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006052:	4640      	mov	r0, r8
 8006054:	ec53 2b17 	vmov	r2, r3, d7
 8006058:	4649      	mov	r1, r9
 800605a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800605e:	f7fa f8c1 	bl	80001e4 <__adddf3>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4606      	mov	r6, r0
 8006068:	460f      	mov	r7, r1
 800606a:	4640      	mov	r0, r8
 800606c:	4649      	mov	r1, r9
 800606e:	f7fa f8b7 	bl	80001e0 <__aeabi_dsub>
 8006072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006076:	f7fa f8b5 	bl	80001e4 <__adddf3>
 800607a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800607e:	e9ca 0100 	strd	r0, r1, [sl]
 8006082:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006086:	e770      	b.n	8005f6a <__kernel_rem_pio2+0x4f2>
 8006088:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800608c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006090:	4630      	mov	r0, r6
 8006092:	ec53 2b17 	vmov	r2, r3, d7
 8006096:	4639      	mov	r1, r7
 8006098:	ed8d 7b04 	vstr	d7, [sp, #16]
 800609c:	f7fa f8a2 	bl	80001e4 <__adddf3>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4680      	mov	r8, r0
 80060a6:	4689      	mov	r9, r1
 80060a8:	4630      	mov	r0, r6
 80060aa:	4639      	mov	r1, r7
 80060ac:	f7fa f898 	bl	80001e0 <__aeabi_dsub>
 80060b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b4:	f7fa f896 	bl	80001e4 <__adddf3>
 80060b8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80060bc:	e9ca 0100 	strd	r0, r1, [sl]
 80060c0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80060c4:	e756      	b.n	8005f74 <__kernel_rem_pio2+0x4fc>
 80060c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80060ca:	f7fa f88b 	bl	80001e4 <__adddf3>
 80060ce:	3d01      	subs	r5, #1
 80060d0:	e756      	b.n	8005f80 <__kernel_rem_pio2+0x508>
 80060d2:	9b01      	ldr	r3, [sp, #4]
 80060d4:	9a01      	ldr	r2, [sp, #4]
 80060d6:	601f      	str	r7, [r3, #0]
 80060d8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80060dc:	605c      	str	r4, [r3, #4]
 80060de:	609d      	str	r5, [r3, #8]
 80060e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80060e4:	60d3      	str	r3, [r2, #12]
 80060e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060ea:	6110      	str	r0, [r2, #16]
 80060ec:	6153      	str	r3, [r2, #20]
 80060ee:	e78e      	b.n	800600e <__kernel_rem_pio2+0x596>
 80060f0:	41700000 	.word	0x41700000
 80060f4:	3e700000 	.word	0x3e700000

080060f8 <__kernel_sin>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	ec55 4b10 	vmov	r4, r5, d0
 8006100:	b085      	sub	sp, #20
 8006102:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006106:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800610a:	ed8d 1b00 	vstr	d1, [sp]
 800610e:	9002      	str	r0, [sp, #8]
 8006110:	da06      	bge.n	8006120 <__kernel_sin+0x28>
 8006112:	ee10 0a10 	vmov	r0, s0
 8006116:	4629      	mov	r1, r5
 8006118:	f7fa fcca 	bl	8000ab0 <__aeabi_d2iz>
 800611c:	2800      	cmp	r0, #0
 800611e:	d051      	beq.n	80061c4 <__kernel_sin+0xcc>
 8006120:	4622      	mov	r2, r4
 8006122:	462b      	mov	r3, r5
 8006124:	4620      	mov	r0, r4
 8006126:	4629      	mov	r1, r5
 8006128:	f7fa fa12 	bl	8000550 <__aeabi_dmul>
 800612c:	4682      	mov	sl, r0
 800612e:	468b      	mov	fp, r1
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa fa0a 	bl	8000550 <__aeabi_dmul>
 800613c:	a341      	add	r3, pc, #260	; (adr r3, 8006244 <__kernel_sin+0x14c>)
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	4680      	mov	r8, r0
 8006144:	4689      	mov	r9, r1
 8006146:	4650      	mov	r0, sl
 8006148:	4659      	mov	r1, fp
 800614a:	f7fa fa01 	bl	8000550 <__aeabi_dmul>
 800614e:	a33f      	add	r3, pc, #252	; (adr r3, 800624c <__kernel_sin+0x154>)
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f7fa f844 	bl	80001e0 <__aeabi_dsub>
 8006158:	4652      	mov	r2, sl
 800615a:	465b      	mov	r3, fp
 800615c:	f7fa f9f8 	bl	8000550 <__aeabi_dmul>
 8006160:	a33c      	add	r3, pc, #240	; (adr r3, 8006254 <__kernel_sin+0x15c>)
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f7fa f83d 	bl	80001e4 <__adddf3>
 800616a:	4652      	mov	r2, sl
 800616c:	465b      	mov	r3, fp
 800616e:	f7fa f9ef 	bl	8000550 <__aeabi_dmul>
 8006172:	a33a      	add	r3, pc, #232	; (adr r3, 800625c <__kernel_sin+0x164>)
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	f7fa f832 	bl	80001e0 <__aeabi_dsub>
 800617c:	4652      	mov	r2, sl
 800617e:	465b      	mov	r3, fp
 8006180:	f7fa f9e6 	bl	8000550 <__aeabi_dmul>
 8006184:	a337      	add	r3, pc, #220	; (adr r3, 8006264 <__kernel_sin+0x16c>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f7fa f82b 	bl	80001e4 <__adddf3>
 800618e:	9b02      	ldr	r3, [sp, #8]
 8006190:	4606      	mov	r6, r0
 8006192:	460f      	mov	r7, r1
 8006194:	b9db      	cbnz	r3, 80061ce <__kernel_sin+0xd6>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4650      	mov	r0, sl
 800619c:	4659      	mov	r1, fp
 800619e:	f7fa f9d7 	bl	8000550 <__aeabi_dmul>
 80061a2:	a325      	add	r3, pc, #148	; (adr r3, 8006238 <__kernel_sin+0x140>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa f81a 	bl	80001e0 <__aeabi_dsub>
 80061ac:	4642      	mov	r2, r8
 80061ae:	464b      	mov	r3, r9
 80061b0:	f7fa f9ce 	bl	8000550 <__aeabi_dmul>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4620      	mov	r0, r4
 80061ba:	4629      	mov	r1, r5
 80061bc:	f7fa f812 	bl	80001e4 <__adddf3>
 80061c0:	4604      	mov	r4, r0
 80061c2:	460d      	mov	r5, r1
 80061c4:	ec45 4b10 	vmov	d0, r4, r5
 80061c8:	b005      	add	sp, #20
 80061ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ce:	2200      	movs	r2, #0
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <__kernel_sin+0x148>)
 80061d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061d6:	f7fa f9bb 	bl	8000550 <__aeabi_dmul>
 80061da:	4632      	mov	r2, r6
 80061dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061e0:	463b      	mov	r3, r7
 80061e2:	4640      	mov	r0, r8
 80061e4:	4649      	mov	r1, r9
 80061e6:	f7fa f9b3 	bl	8000550 <__aeabi_dmul>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f2:	f7f9 fff5 	bl	80001e0 <__aeabi_dsub>
 80061f6:	4652      	mov	r2, sl
 80061f8:	465b      	mov	r3, fp
 80061fa:	f7fa f9a9 	bl	8000550 <__aeabi_dmul>
 80061fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006202:	f7f9 ffed 	bl	80001e0 <__aeabi_dsub>
 8006206:	a30c      	add	r3, pc, #48	; (adr r3, 8006238 <__kernel_sin+0x140>)
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	4606      	mov	r6, r0
 800620e:	460f      	mov	r7, r1
 8006210:	4640      	mov	r0, r8
 8006212:	4649      	mov	r1, r9
 8006214:	f7fa f99c 	bl	8000550 <__aeabi_dmul>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4630      	mov	r0, r6
 800621e:	4639      	mov	r1, r7
 8006220:	f7f9 ffe0 	bl	80001e4 <__adddf3>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4620      	mov	r0, r4
 800622a:	4629      	mov	r1, r5
 800622c:	f7f9 ffd8 	bl	80001e0 <__aeabi_dsub>
 8006230:	e7c6      	b.n	80061c0 <__kernel_sin+0xc8>
 8006232:	bf00      	nop
 8006234:	f3af 8000 	nop.w
 8006238:	55555549 	.word	0x55555549
 800623c:	3fc55555 	.word	0x3fc55555
 8006240:	3fe00000 	.word	0x3fe00000
 8006244:	5acfd57c 	.word	0x5acfd57c
 8006248:	3de5d93a 	.word	0x3de5d93a
 800624c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006250:	3e5ae5e6 	.word	0x3e5ae5e6
 8006254:	57b1fe7d 	.word	0x57b1fe7d
 8006258:	3ec71de3 	.word	0x3ec71de3
 800625c:	19c161d5 	.word	0x19c161d5
 8006260:	3f2a01a0 	.word	0x3f2a01a0
 8006264:	1110f8a6 	.word	0x1110f8a6
 8006268:	3f811111 	.word	0x3f811111

0800626c <__kernel_cosf>:
 800626c:	ee10 3a10 	vmov	r3, s0
 8006270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006274:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006278:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800627c:	da05      	bge.n	800628a <__kernel_cosf+0x1e>
 800627e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006282:	ee17 2a90 	vmov	r2, s15
 8006286:	2a00      	cmp	r2, #0
 8006288:	d03b      	beq.n	8006302 <__kernel_cosf+0x96>
 800628a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800628e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006292:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006308 <__kernel_cosf+0x9c>
 8006296:	4a1d      	ldr	r2, [pc, #116]	; (800630c <__kernel_cosf+0xa0>)
 8006298:	ee66 7a07 	vmul.f32	s15, s12, s14
 800629c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006310 <__kernel_cosf+0xa4>
 80062a0:	eea6 7a25 	vfma.f32	s14, s12, s11
 80062a4:	4293      	cmp	r3, r2
 80062a6:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8006314 <__kernel_cosf+0xa8>
 80062aa:	eee7 5a06 	vfma.f32	s11, s14, s12
 80062ae:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006318 <__kernel_cosf+0xac>
 80062b2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80062b6:	eddf 5a19 	vldr	s11, [pc, #100]	; 800631c <__kernel_cosf+0xb0>
 80062ba:	eee7 5a06 	vfma.f32	s11, s14, s12
 80062be:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006320 <__kernel_cosf+0xb4>
 80062c2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80062c6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80062ca:	ee27 7a06 	vmul.f32	s14, s14, s12
 80062ce:	eee6 0a07 	vfma.f32	s1, s12, s14
 80062d2:	dc04      	bgt.n	80062de <__kernel_cosf+0x72>
 80062d4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80062d8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80062dc:	4770      	bx	lr
 80062de:	4a11      	ldr	r2, [pc, #68]	; (8006324 <__kernel_cosf+0xb8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bfda      	itte	le
 80062e4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80062e8:	ee07 3a10 	vmovle	s14, r3
 80062ec:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80062f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062f4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80062f8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80062fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006300:	4770      	bx	lr
 8006302:	eeb0 0a66 	vmov.f32	s0, s13
 8006306:	4770      	bx	lr
 8006308:	ad47d74e 	.word	0xad47d74e
 800630c:	3e999999 	.word	0x3e999999
 8006310:	310f74f6 	.word	0x310f74f6
 8006314:	b493f27c 	.word	0xb493f27c
 8006318:	37d00d01 	.word	0x37d00d01
 800631c:	bab60b61 	.word	0xbab60b61
 8006320:	3d2aaaab 	.word	0x3d2aaaab
 8006324:	3f480000 	.word	0x3f480000

08006328 <__kernel_rem_pio2f>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	ed2d 8b04 	vpush	{d8-d9}
 8006330:	b0d7      	sub	sp, #348	; 0x15c
 8006332:	469b      	mov	fp, r3
 8006334:	460e      	mov	r6, r1
 8006336:	4bbe      	ldr	r3, [pc, #760]	; (8006630 <__kernel_rem_pio2f+0x308>)
 8006338:	9964      	ldr	r1, [sp, #400]	; 0x190
 800633a:	9002      	str	r0, [sp, #8]
 800633c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8006340:	9865      	ldr	r0, [sp, #404]	; 0x194
 8006342:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8006640 <__kernel_rem_pio2f+0x318>
 8006346:	1ed1      	subs	r1, r2, #3
 8006348:	2308      	movs	r3, #8
 800634a:	fb91 f1f3 	sdiv	r1, r1, r3
 800634e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006352:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8006356:	1c4c      	adds	r4, r1, #1
 8006358:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800635c:	eba1 050a 	sub.w	r5, r1, sl
 8006360:	aa1a      	add	r2, sp, #104	; 0x68
 8006362:	eb09 070a 	add.w	r7, r9, sl
 8006366:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800636a:	4696      	mov	lr, r2
 800636c:	2300      	movs	r3, #0
 800636e:	42bb      	cmp	r3, r7
 8006370:	dd0f      	ble.n	8006392 <__kernel_rem_pio2f+0x6a>
 8006372:	af42      	add	r7, sp, #264	; 0x108
 8006374:	2200      	movs	r2, #0
 8006376:	454a      	cmp	r2, r9
 8006378:	dc27      	bgt.n	80063ca <__kernel_rem_pio2f+0xa2>
 800637a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800637e:	eb0b 0302 	add.w	r3, fp, r2
 8006382:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8006386:	9d02      	ldr	r5, [sp, #8]
 8006388:	eddf 7aad 	vldr	s15, [pc, #692]	; 8006640 <__kernel_rem_pio2f+0x318>
 800638c:	f04f 0c00 	mov.w	ip, #0
 8006390:	e015      	b.n	80063be <__kernel_rem_pio2f+0x96>
 8006392:	42dd      	cmn	r5, r3
 8006394:	bf5d      	ittte	pl
 8006396:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800639a:	ee07 2a90 	vmovpl	s15, r2
 800639e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80063a2:	eef0 7a47 	vmovmi.f32	s15, s14
 80063a6:	ecee 7a01 	vstmia	lr!, {s15}
 80063aa:	3301      	adds	r3, #1
 80063ac:	e7df      	b.n	800636e <__kernel_rem_pio2f+0x46>
 80063ae:	ecf5 6a01 	vldmia	r5!, {s13}
 80063b2:	ed33 7a01 	vldmdb	r3!, {s14}
 80063b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80063ba:	f10c 0c01 	add.w	ip, ip, #1
 80063be:	45d4      	cmp	ip, sl
 80063c0:	ddf5      	ble.n	80063ae <__kernel_rem_pio2f+0x86>
 80063c2:	ece7 7a01 	vstmia	r7!, {s15}
 80063c6:	3201      	adds	r2, #1
 80063c8:	e7d5      	b.n	8006376 <__kernel_rem_pio2f+0x4e>
 80063ca:	ab06      	add	r3, sp, #24
 80063cc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800663c <__kernel_rem_pio2f+0x314>
 80063d6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8006638 <__kernel_rem_pio2f+0x310>
 80063da:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80063de:	9303      	str	r3, [sp, #12]
 80063e0:	464d      	mov	r5, r9
 80063e2:	ab56      	add	r3, sp, #344	; 0x158
 80063e4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80063e8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80063ec:	3f01      	subs	r7, #1
 80063ee:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80063f2:	00bf      	lsls	r7, r7, #2
 80063f4:	ab56      	add	r3, sp, #344	; 0x158
 80063f6:	19da      	adds	r2, r3, r7
 80063f8:	3a4c      	subs	r2, #76	; 0x4c
 80063fa:	2300      	movs	r3, #0
 80063fc:	1ae9      	subs	r1, r5, r3
 80063fe:	2900      	cmp	r1, #0
 8006400:	dc4c      	bgt.n	800649c <__kernel_rem_pio2f+0x174>
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fc80 	bl	8006d08 <scalbnf>
 8006408:	eeb0 8a40 	vmov.f32	s16, s0
 800640c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8006410:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006414:	f000 fc36 	bl	8006c84 <floorf>
 8006418:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800641c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006420:	2c00      	cmp	r4, #0
 8006422:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006426:	edcd 7a01 	vstr	s15, [sp, #4]
 800642a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800642e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006432:	dd48      	ble.n	80064c6 <__kernel_rem_pio2f+0x19e>
 8006434:	1e69      	subs	r1, r5, #1
 8006436:	ab06      	add	r3, sp, #24
 8006438:	f1c4 0008 	rsb	r0, r4, #8
 800643c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8006440:	9a01      	ldr	r2, [sp, #4]
 8006442:	fa4c f300 	asr.w	r3, ip, r0
 8006446:	441a      	add	r2, r3
 8006448:	4083      	lsls	r3, r0
 800644a:	9201      	str	r2, [sp, #4]
 800644c:	ebac 0203 	sub.w	r2, ip, r3
 8006450:	ab06      	add	r3, sp, #24
 8006452:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8006456:	f1c4 0307 	rsb	r3, r4, #7
 800645a:	fa42 f803 	asr.w	r8, r2, r3
 800645e:	f1b8 0f00 	cmp.w	r8, #0
 8006462:	dd41      	ble.n	80064e8 <__kernel_rem_pio2f+0x1c0>
 8006464:	9b01      	ldr	r3, [sp, #4]
 8006466:	2000      	movs	r0, #0
 8006468:	3301      	adds	r3, #1
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	4601      	mov	r1, r0
 800646e:	4285      	cmp	r5, r0
 8006470:	dc6d      	bgt.n	800654e <__kernel_rem_pio2f+0x226>
 8006472:	2c00      	cmp	r4, #0
 8006474:	dd04      	ble.n	8006480 <__kernel_rem_pio2f+0x158>
 8006476:	2c01      	cmp	r4, #1
 8006478:	d07e      	beq.n	8006578 <__kernel_rem_pio2f+0x250>
 800647a:	2c02      	cmp	r4, #2
 800647c:	f000 8086 	beq.w	800658c <__kernel_rem_pio2f+0x264>
 8006480:	f1b8 0f02 	cmp.w	r8, #2
 8006484:	d130      	bne.n	80064e8 <__kernel_rem_pio2f+0x1c0>
 8006486:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800648a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800648e:	b359      	cbz	r1, 80064e8 <__kernel_rem_pio2f+0x1c0>
 8006490:	4620      	mov	r0, r4
 8006492:	f000 fc39 	bl	8006d08 <scalbnf>
 8006496:	ee38 8a40 	vsub.f32	s16, s16, s0
 800649a:	e025      	b.n	80064e8 <__kernel_rem_pio2f+0x1c0>
 800649c:	ee60 7a28 	vmul.f32	s15, s0, s17
 80064a0:	a806      	add	r0, sp, #24
 80064a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064aa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80064ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80064b2:	ee10 1a10 	vmov	r1, s0
 80064b6:	ed32 0a01 	vldmdb	r2!, {s0}
 80064ba:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80064be:	ee37 0a80 	vadd.f32	s0, s15, s0
 80064c2:	3301      	adds	r3, #1
 80064c4:	e79a      	b.n	80063fc <__kernel_rem_pio2f+0xd4>
 80064c6:	d106      	bne.n	80064d6 <__kernel_rem_pio2f+0x1ae>
 80064c8:	1e6b      	subs	r3, r5, #1
 80064ca:	aa06      	add	r2, sp, #24
 80064cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80064d0:	ea4f 2822 	mov.w	r8, r2, asr #8
 80064d4:	e7c3      	b.n	800645e <__kernel_rem_pio2f+0x136>
 80064d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80064da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80064de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e2:	da31      	bge.n	8006548 <__kernel_rem_pio2f+0x220>
 80064e4:	f04f 0800 	mov.w	r8, #0
 80064e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80064ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f0:	f040 80a8 	bne.w	8006644 <__kernel_rem_pio2f+0x31c>
 80064f4:	1e6b      	subs	r3, r5, #1
 80064f6:	4618      	mov	r0, r3
 80064f8:	2200      	movs	r2, #0
 80064fa:	4548      	cmp	r0, r9
 80064fc:	da4d      	bge.n	800659a <__kernel_rem_pio2f+0x272>
 80064fe:	2a00      	cmp	r2, #0
 8006500:	f000 8087 	beq.w	8006612 <__kernel_rem_pio2f+0x2ea>
 8006504:	aa06      	add	r2, sp, #24
 8006506:	3c08      	subs	r4, #8
 8006508:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800650c:	2900      	cmp	r1, #0
 800650e:	f000 808d 	beq.w	800662c <__kernel_rem_pio2f+0x304>
 8006512:	4620      	mov	r0, r4
 8006514:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006518:	9302      	str	r3, [sp, #8]
 800651a:	f000 fbf5 	bl	8006d08 <scalbnf>
 800651e:	9b02      	ldr	r3, [sp, #8]
 8006520:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800663c <__kernel_rem_pio2f+0x314>
 8006524:	0099      	lsls	r1, r3, #2
 8006526:	aa42      	add	r2, sp, #264	; 0x108
 8006528:	1850      	adds	r0, r2, r1
 800652a:	1d05      	adds	r5, r0, #4
 800652c:	461c      	mov	r4, r3
 800652e:	2c00      	cmp	r4, #0
 8006530:	f280 80b8 	bge.w	80066a4 <__kernel_rem_pio2f+0x37c>
 8006534:	2500      	movs	r5, #0
 8006536:	1b5c      	subs	r4, r3, r5
 8006538:	2c00      	cmp	r4, #0
 800653a:	f2c0 80d8 	blt.w	80066ee <__kernel_rem_pio2f+0x3c6>
 800653e:	4f3d      	ldr	r7, [pc, #244]	; (8006634 <__kernel_rem_pio2f+0x30c>)
 8006540:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8006640 <__kernel_rem_pio2f+0x318>
 8006544:	2400      	movs	r4, #0
 8006546:	e0c6      	b.n	80066d6 <__kernel_rem_pio2f+0x3ae>
 8006548:	f04f 0802 	mov.w	r8, #2
 800654c:	e78a      	b.n	8006464 <__kernel_rem_pio2f+0x13c>
 800654e:	ab06      	add	r3, sp, #24
 8006550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006554:	b949      	cbnz	r1, 800656a <__kernel_rem_pio2f+0x242>
 8006556:	b12b      	cbz	r3, 8006564 <__kernel_rem_pio2f+0x23c>
 8006558:	aa06      	add	r2, sp, #24
 800655a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800655e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006562:	2301      	movs	r3, #1
 8006564:	3001      	adds	r0, #1
 8006566:	4619      	mov	r1, r3
 8006568:	e781      	b.n	800646e <__kernel_rem_pio2f+0x146>
 800656a:	aa06      	add	r2, sp, #24
 800656c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006570:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006574:	460b      	mov	r3, r1
 8006576:	e7f5      	b.n	8006564 <__kernel_rem_pio2f+0x23c>
 8006578:	1e68      	subs	r0, r5, #1
 800657a:	ab06      	add	r3, sp, #24
 800657c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006584:	aa06      	add	r2, sp, #24
 8006586:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800658a:	e779      	b.n	8006480 <__kernel_rem_pio2f+0x158>
 800658c:	1e68      	subs	r0, r5, #1
 800658e:	ab06      	add	r3, sp, #24
 8006590:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006598:	e7f4      	b.n	8006584 <__kernel_rem_pio2f+0x25c>
 800659a:	a906      	add	r1, sp, #24
 800659c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80065a0:	3801      	subs	r0, #1
 80065a2:	430a      	orrs	r2, r1
 80065a4:	e7a9      	b.n	80064fa <__kernel_rem_pio2f+0x1d2>
 80065a6:	f10c 0c01 	add.w	ip, ip, #1
 80065aa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80065ae:	2a00      	cmp	r2, #0
 80065b0:	d0f9      	beq.n	80065a6 <__kernel_rem_pio2f+0x27e>
 80065b2:	eb0b 0305 	add.w	r3, fp, r5
 80065b6:	aa1a      	add	r2, sp, #104	; 0x68
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	1898      	adds	r0, r3, r2
 80065bc:	3004      	adds	r0, #4
 80065be:	1c69      	adds	r1, r5, #1
 80065c0:	3704      	adds	r7, #4
 80065c2:	2200      	movs	r2, #0
 80065c4:	4465      	add	r5, ip
 80065c6:	9005      	str	r0, [sp, #20]
 80065c8:	428d      	cmp	r5, r1
 80065ca:	f6ff af0a 	blt.w	80063e2 <__kernel_rem_pio2f+0xba>
 80065ce:	a81a      	add	r0, sp, #104	; 0x68
 80065d0:	eb02 0c03 	add.w	ip, r2, r3
 80065d4:	4484      	add	ip, r0
 80065d6:	9803      	ldr	r0, [sp, #12]
 80065d8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80065dc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80065e0:	9001      	str	r0, [sp, #4]
 80065e2:	ee07 0a90 	vmov	s15, r0
 80065e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ea:	9805      	ldr	r0, [sp, #20]
 80065ec:	edcc 7a00 	vstr	s15, [ip]
 80065f0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006640 <__kernel_rem_pio2f+0x318>
 80065f4:	eb00 0802 	add.w	r8, r0, r2
 80065f8:	f04f 0c00 	mov.w	ip, #0
 80065fc:	45d4      	cmp	ip, sl
 80065fe:	dd0c      	ble.n	800661a <__kernel_rem_pio2f+0x2f2>
 8006600:	eb02 0c07 	add.w	ip, r2, r7
 8006604:	a842      	add	r0, sp, #264	; 0x108
 8006606:	4484      	add	ip, r0
 8006608:	edcc 7a01 	vstr	s15, [ip, #4]
 800660c:	3101      	adds	r1, #1
 800660e:	3204      	adds	r2, #4
 8006610:	e7da      	b.n	80065c8 <__kernel_rem_pio2f+0x2a0>
 8006612:	9b04      	ldr	r3, [sp, #16]
 8006614:	f04f 0c01 	mov.w	ip, #1
 8006618:	e7c7      	b.n	80065aa <__kernel_rem_pio2f+0x282>
 800661a:	ecfe 6a01 	vldmia	lr!, {s13}
 800661e:	ed38 7a01 	vldmdb	r8!, {s14}
 8006622:	f10c 0c01 	add.w	ip, ip, #1
 8006626:	eee6 7a87 	vfma.f32	s15, s13, s14
 800662a:	e7e7      	b.n	80065fc <__kernel_rem_pio2f+0x2d4>
 800662c:	3b01      	subs	r3, #1
 800662e:	e769      	b.n	8006504 <__kernel_rem_pio2f+0x1dc>
 8006630:	080073cc 	.word	0x080073cc
 8006634:	080073a0 	.word	0x080073a0
 8006638:	43800000 	.word	0x43800000
 800663c:	3b800000 	.word	0x3b800000
 8006640:	00000000 	.word	0x00000000
 8006644:	4260      	negs	r0, r4
 8006646:	eeb0 0a48 	vmov.f32	s0, s16
 800664a:	f000 fb5d 	bl	8006d08 <scalbnf>
 800664e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8006638 <__kernel_rem_pio2f+0x310>
 8006652:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665a:	db1a      	blt.n	8006692 <__kernel_rem_pio2f+0x36a>
 800665c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800663c <__kernel_rem_pio2f+0x314>
 8006660:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006664:	aa06      	add	r2, sp, #24
 8006666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800666a:	a906      	add	r1, sp, #24
 800666c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006670:	3408      	adds	r4, #8
 8006672:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800667a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800667e:	ee10 3a10 	vmov	r3, s0
 8006682:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006686:	1c6b      	adds	r3, r5, #1
 8006688:	ee17 2a90 	vmov	r2, s15
 800668c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006690:	e73f      	b.n	8006512 <__kernel_rem_pio2f+0x1ea>
 8006692:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006696:	aa06      	add	r2, sp, #24
 8006698:	ee10 3a10 	vmov	r3, s0
 800669c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80066a0:	462b      	mov	r3, r5
 80066a2:	e736      	b.n	8006512 <__kernel_rem_pio2f+0x1ea>
 80066a4:	aa06      	add	r2, sp, #24
 80066a6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80066aa:	9202      	str	r2, [sp, #8]
 80066ac:	ee07 2a90 	vmov	s15, r2
 80066b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066b4:	3c01      	subs	r4, #1
 80066b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80066ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 80066be:	ed65 7a01 	vstmdb	r5!, {s15}
 80066c2:	e734      	b.n	800652e <__kernel_rem_pio2f+0x206>
 80066c4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80066c8:	ecf7 6a01 	vldmia	r7!, {s13}
 80066cc:	ed9c 7a00 	vldr	s14, [ip]
 80066d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80066d4:	3401      	adds	r4, #1
 80066d6:	454c      	cmp	r4, r9
 80066d8:	dc01      	bgt.n	80066de <__kernel_rem_pio2f+0x3b6>
 80066da:	42a5      	cmp	r5, r4
 80066dc:	daf2      	bge.n	80066c4 <__kernel_rem_pio2f+0x39c>
 80066de:	aa56      	add	r2, sp, #344	; 0x158
 80066e0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80066e4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80066e8:	3501      	adds	r5, #1
 80066ea:	3804      	subs	r0, #4
 80066ec:	e723      	b.n	8006536 <__kernel_rem_pio2f+0x20e>
 80066ee:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80066f0:	2a03      	cmp	r2, #3
 80066f2:	d84d      	bhi.n	8006790 <__kernel_rem_pio2f+0x468>
 80066f4:	e8df f002 	tbb	[pc, r2]
 80066f8:	021f1f3e 	.word	0x021f1f3e
 80066fc:	aa56      	add	r2, sp, #344	; 0x158
 80066fe:	4411      	add	r1, r2
 8006700:	399c      	subs	r1, #156	; 0x9c
 8006702:	4608      	mov	r0, r1
 8006704:	461c      	mov	r4, r3
 8006706:	2c00      	cmp	r4, #0
 8006708:	dc5f      	bgt.n	80067ca <__kernel_rem_pio2f+0x4a2>
 800670a:	4608      	mov	r0, r1
 800670c:	461c      	mov	r4, r3
 800670e:	2c01      	cmp	r4, #1
 8006710:	dc6b      	bgt.n	80067ea <__kernel_rem_pio2f+0x4c2>
 8006712:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8006640 <__kernel_rem_pio2f+0x318>
 8006716:	2b01      	cmp	r3, #1
 8006718:	dc77      	bgt.n	800680a <__kernel_rem_pio2f+0x4e2>
 800671a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800671e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8006722:	f1b8 0f00 	cmp.w	r8, #0
 8006726:	d176      	bne.n	8006816 <__kernel_rem_pio2f+0x4ee>
 8006728:	edc6 6a00 	vstr	s13, [r6]
 800672c:	ed86 7a01 	vstr	s14, [r6, #4]
 8006730:	edc6 7a02 	vstr	s15, [r6, #8]
 8006734:	e02c      	b.n	8006790 <__kernel_rem_pio2f+0x468>
 8006736:	aa56      	add	r2, sp, #344	; 0x158
 8006738:	4411      	add	r1, r2
 800673a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8006640 <__kernel_rem_pio2f+0x318>
 800673e:	399c      	subs	r1, #156	; 0x9c
 8006740:	4618      	mov	r0, r3
 8006742:	2800      	cmp	r0, #0
 8006744:	da32      	bge.n	80067ac <__kernel_rem_pio2f+0x484>
 8006746:	f1b8 0f00 	cmp.w	r8, #0
 800674a:	d035      	beq.n	80067b8 <__kernel_rem_pio2f+0x490>
 800674c:	eef1 7a47 	vneg.f32	s15, s14
 8006750:	edc6 7a00 	vstr	s15, [r6]
 8006754:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8006758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800675c:	a82f      	add	r0, sp, #188	; 0xbc
 800675e:	2101      	movs	r1, #1
 8006760:	428b      	cmp	r3, r1
 8006762:	da2c      	bge.n	80067be <__kernel_rem_pio2f+0x496>
 8006764:	f1b8 0f00 	cmp.w	r8, #0
 8006768:	d001      	beq.n	800676e <__kernel_rem_pio2f+0x446>
 800676a:	eef1 7a67 	vneg.f32	s15, s15
 800676e:	edc6 7a01 	vstr	s15, [r6, #4]
 8006772:	e00d      	b.n	8006790 <__kernel_rem_pio2f+0x468>
 8006774:	aa56      	add	r2, sp, #344	; 0x158
 8006776:	4411      	add	r1, r2
 8006778:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8006640 <__kernel_rem_pio2f+0x318>
 800677c:	399c      	subs	r1, #156	; 0x9c
 800677e:	2b00      	cmp	r3, #0
 8006780:	da0e      	bge.n	80067a0 <__kernel_rem_pio2f+0x478>
 8006782:	f1b8 0f00 	cmp.w	r8, #0
 8006786:	d001      	beq.n	800678c <__kernel_rem_pio2f+0x464>
 8006788:	eef1 7a67 	vneg.f32	s15, s15
 800678c:	edc6 7a00 	vstr	s15, [r6]
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	f003 0007 	and.w	r0, r3, #7
 8006796:	b057      	add	sp, #348	; 0x15c
 8006798:	ecbd 8b04 	vpop	{d8-d9}
 800679c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a0:	ed31 7a01 	vldmdb	r1!, {s14}
 80067a4:	3b01      	subs	r3, #1
 80067a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067aa:	e7e8      	b.n	800677e <__kernel_rem_pio2f+0x456>
 80067ac:	ed71 7a01 	vldmdb	r1!, {s15}
 80067b0:	3801      	subs	r0, #1
 80067b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067b6:	e7c4      	b.n	8006742 <__kernel_rem_pio2f+0x41a>
 80067b8:	eef0 7a47 	vmov.f32	s15, s14
 80067bc:	e7c8      	b.n	8006750 <__kernel_rem_pio2f+0x428>
 80067be:	ecb0 7a01 	vldmia	r0!, {s14}
 80067c2:	3101      	adds	r1, #1
 80067c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067c8:	e7ca      	b.n	8006760 <__kernel_rem_pio2f+0x438>
 80067ca:	ed50 7a02 	vldr	s15, [r0, #-8]
 80067ce:	ed70 6a01 	vldmdb	r0!, {s13}
 80067d2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80067d6:	3c01      	subs	r4, #1
 80067d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067dc:	ed00 7a01 	vstr	s14, [r0, #-4]
 80067e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e4:	edc0 7a00 	vstr	s15, [r0]
 80067e8:	e78d      	b.n	8006706 <__kernel_rem_pio2f+0x3de>
 80067ea:	ed50 7a02 	vldr	s15, [r0, #-8]
 80067ee:	ed70 6a01 	vldmdb	r0!, {s13}
 80067f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80067f6:	3c01      	subs	r4, #1
 80067f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067fc:	ed00 7a01 	vstr	s14, [r0, #-4]
 8006800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006804:	edc0 7a00 	vstr	s15, [r0]
 8006808:	e781      	b.n	800670e <__kernel_rem_pio2f+0x3e6>
 800680a:	ed31 7a01 	vldmdb	r1!, {s14}
 800680e:	3b01      	subs	r3, #1
 8006810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006814:	e77f      	b.n	8006716 <__kernel_rem_pio2f+0x3ee>
 8006816:	eef1 6a66 	vneg.f32	s13, s13
 800681a:	eeb1 7a47 	vneg.f32	s14, s14
 800681e:	edc6 6a00 	vstr	s13, [r6]
 8006822:	ed86 7a01 	vstr	s14, [r6, #4]
 8006826:	eef1 7a67 	vneg.f32	s15, s15
 800682a:	e781      	b.n	8006730 <__kernel_rem_pio2f+0x408>

0800682c <__kernel_sinf>:
 800682c:	ee10 3a10 	vmov	r3, s0
 8006830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006834:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006838:	da04      	bge.n	8006844 <__kernel_sinf+0x18>
 800683a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800683e:	ee17 3a90 	vmov	r3, s15
 8006842:	b35b      	cbz	r3, 800689c <__kernel_sinf+0x70>
 8006844:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006848:	eddf 7a15 	vldr	s15, [pc, #84]	; 80068a0 <__kernel_sinf+0x74>
 800684c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80068a4 <__kernel_sinf+0x78>
 8006850:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006854:	eddf 7a14 	vldr	s15, [pc, #80]	; 80068a8 <__kernel_sinf+0x7c>
 8006858:	eee6 7a07 	vfma.f32	s15, s12, s14
 800685c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80068ac <__kernel_sinf+0x80>
 8006860:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006864:	eddf 7a12 	vldr	s15, [pc, #72]	; 80068b0 <__kernel_sinf+0x84>
 8006868:	ee60 6a07 	vmul.f32	s13, s0, s14
 800686c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006870:	b930      	cbnz	r0, 8006880 <__kernel_sinf+0x54>
 8006872:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80068b4 <__kernel_sinf+0x88>
 8006876:	eea7 6a27 	vfma.f32	s12, s14, s15
 800687a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800687e:	4770      	bx	lr
 8006880:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006884:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006888:	eee0 7a86 	vfma.f32	s15, s1, s12
 800688c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006890:	eddf 7a09 	vldr	s15, [pc, #36]	; 80068b8 <__kernel_sinf+0x8c>
 8006894:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006898:	ee30 0a60 	vsub.f32	s0, s0, s1
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	2f2ec9d3 	.word	0x2f2ec9d3
 80068a4:	b2d72f34 	.word	0xb2d72f34
 80068a8:	3638ef1b 	.word	0x3638ef1b
 80068ac:	b9500d01 	.word	0xb9500d01
 80068b0:	3c088889 	.word	0x3c088889
 80068b4:	be2aaaab 	.word	0xbe2aaaab
 80068b8:	3e2aaaab 	.word	0x3e2aaaab

080068bc <fabs>:
 80068bc:	ec51 0b10 	vmov	r0, r1, d0
 80068c0:	ee10 2a10 	vmov	r2, s0
 80068c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80068c8:	ec43 2b10 	vmov	d0, r2, r3
 80068cc:	4770      	bx	lr
	...

080068d0 <floor>:
 80068d0:	ec51 0b10 	vmov	r0, r1, d0
 80068d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80068dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80068e0:	2e13      	cmp	r6, #19
 80068e2:	460c      	mov	r4, r1
 80068e4:	ee10 5a10 	vmov	r5, s0
 80068e8:	4680      	mov	r8, r0
 80068ea:	dc34      	bgt.n	8006956 <floor+0x86>
 80068ec:	2e00      	cmp	r6, #0
 80068ee:	da16      	bge.n	800691e <floor+0x4e>
 80068f0:	a335      	add	r3, pc, #212	; (adr r3, 80069c8 <floor+0xf8>)
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f7f9 fc75 	bl	80001e4 <__adddf3>
 80068fa:	2200      	movs	r2, #0
 80068fc:	2300      	movs	r3, #0
 80068fe:	f7fa f8b7 	bl	8000a70 <__aeabi_dcmpgt>
 8006902:	b148      	cbz	r0, 8006918 <floor+0x48>
 8006904:	2c00      	cmp	r4, #0
 8006906:	da59      	bge.n	80069bc <floor+0xec>
 8006908:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800690c:	4a30      	ldr	r2, [pc, #192]	; (80069d0 <floor+0x100>)
 800690e:	432b      	orrs	r3, r5
 8006910:	2500      	movs	r5, #0
 8006912:	42ab      	cmp	r3, r5
 8006914:	bf18      	it	ne
 8006916:	4614      	movne	r4, r2
 8006918:	4621      	mov	r1, r4
 800691a:	4628      	mov	r0, r5
 800691c:	e025      	b.n	800696a <floor+0x9a>
 800691e:	4f2d      	ldr	r7, [pc, #180]	; (80069d4 <floor+0x104>)
 8006920:	4137      	asrs	r7, r6
 8006922:	ea01 0307 	and.w	r3, r1, r7
 8006926:	4303      	orrs	r3, r0
 8006928:	d01f      	beq.n	800696a <floor+0x9a>
 800692a:	a327      	add	r3, pc, #156	; (adr r3, 80069c8 <floor+0xf8>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f7f9 fc58 	bl	80001e4 <__adddf3>
 8006934:	2200      	movs	r2, #0
 8006936:	2300      	movs	r3, #0
 8006938:	f7fa f89a 	bl	8000a70 <__aeabi_dcmpgt>
 800693c:	2800      	cmp	r0, #0
 800693e:	d0eb      	beq.n	8006918 <floor+0x48>
 8006940:	2c00      	cmp	r4, #0
 8006942:	bfbe      	ittt	lt
 8006944:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006948:	fa43 f606 	asrlt.w	r6, r3, r6
 800694c:	19a4      	addlt	r4, r4, r6
 800694e:	ea24 0407 	bic.w	r4, r4, r7
 8006952:	2500      	movs	r5, #0
 8006954:	e7e0      	b.n	8006918 <floor+0x48>
 8006956:	2e33      	cmp	r6, #51	; 0x33
 8006958:	dd0b      	ble.n	8006972 <floor+0xa2>
 800695a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800695e:	d104      	bne.n	800696a <floor+0x9a>
 8006960:	ee10 2a10 	vmov	r2, s0
 8006964:	460b      	mov	r3, r1
 8006966:	f7f9 fc3d 	bl	80001e4 <__adddf3>
 800696a:	ec41 0b10 	vmov	d0, r0, r1
 800696e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006972:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800697a:	fa23 f707 	lsr.w	r7, r3, r7
 800697e:	4207      	tst	r7, r0
 8006980:	d0f3      	beq.n	800696a <floor+0x9a>
 8006982:	a311      	add	r3, pc, #68	; (adr r3, 80069c8 <floor+0xf8>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fc2c 	bl	80001e4 <__adddf3>
 800698c:	2200      	movs	r2, #0
 800698e:	2300      	movs	r3, #0
 8006990:	f7fa f86e 	bl	8000a70 <__aeabi_dcmpgt>
 8006994:	2800      	cmp	r0, #0
 8006996:	d0bf      	beq.n	8006918 <floor+0x48>
 8006998:	2c00      	cmp	r4, #0
 800699a:	da02      	bge.n	80069a2 <floor+0xd2>
 800699c:	2e14      	cmp	r6, #20
 800699e:	d103      	bne.n	80069a8 <floor+0xd8>
 80069a0:	3401      	adds	r4, #1
 80069a2:	ea25 0507 	bic.w	r5, r5, r7
 80069a6:	e7b7      	b.n	8006918 <floor+0x48>
 80069a8:	2301      	movs	r3, #1
 80069aa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80069ae:	fa03 f606 	lsl.w	r6, r3, r6
 80069b2:	4435      	add	r5, r6
 80069b4:	4545      	cmp	r5, r8
 80069b6:	bf38      	it	cc
 80069b8:	18e4      	addcc	r4, r4, r3
 80069ba:	e7f2      	b.n	80069a2 <floor+0xd2>
 80069bc:	2500      	movs	r5, #0
 80069be:	462c      	mov	r4, r5
 80069c0:	e7aa      	b.n	8006918 <floor+0x48>
 80069c2:	bf00      	nop
 80069c4:	f3af 8000 	nop.w
 80069c8:	8800759c 	.word	0x8800759c
 80069cc:	7e37e43c 	.word	0x7e37e43c
 80069d0:	bff00000 	.word	0xbff00000
 80069d4:	000fffff 	.word	0x000fffff

080069d8 <matherr>:
 80069d8:	2000      	movs	r0, #0
 80069da:	4770      	bx	lr
 80069dc:	0000      	movs	r0, r0
	...

080069e0 <scalbn>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	ec55 4b10 	vmov	r4, r5, d0
 80069e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80069ea:	4606      	mov	r6, r0
 80069ec:	462b      	mov	r3, r5
 80069ee:	b9aa      	cbnz	r2, 8006a1c <scalbn+0x3c>
 80069f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80069f4:	4323      	orrs	r3, r4
 80069f6:	d03b      	beq.n	8006a70 <scalbn+0x90>
 80069f8:	4b31      	ldr	r3, [pc, #196]	; (8006ac0 <scalbn+0xe0>)
 80069fa:	4629      	mov	r1, r5
 80069fc:	2200      	movs	r2, #0
 80069fe:	ee10 0a10 	vmov	r0, s0
 8006a02:	f7f9 fda5 	bl	8000550 <__aeabi_dmul>
 8006a06:	4b2f      	ldr	r3, [pc, #188]	; (8006ac4 <scalbn+0xe4>)
 8006a08:	429e      	cmp	r6, r3
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	da12      	bge.n	8006a36 <scalbn+0x56>
 8006a10:	a327      	add	r3, pc, #156	; (adr r3, 8006ab0 <scalbn+0xd0>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7f9 fd9b 	bl	8000550 <__aeabi_dmul>
 8006a1a:	e009      	b.n	8006a30 <scalbn+0x50>
 8006a1c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006a20:	428a      	cmp	r2, r1
 8006a22:	d10c      	bne.n	8006a3e <scalbn+0x5e>
 8006a24:	ee10 2a10 	vmov	r2, s0
 8006a28:	4620      	mov	r0, r4
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	f7f9 fbda 	bl	80001e4 <__adddf3>
 8006a30:	4604      	mov	r4, r0
 8006a32:	460d      	mov	r5, r1
 8006a34:	e01c      	b.n	8006a70 <scalbn+0x90>
 8006a36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	3a36      	subs	r2, #54	; 0x36
 8006a3e:	4432      	add	r2, r6
 8006a40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006a44:	428a      	cmp	r2, r1
 8006a46:	dd0b      	ble.n	8006a60 <scalbn+0x80>
 8006a48:	ec45 4b11 	vmov	d1, r4, r5
 8006a4c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006ab8 <scalbn+0xd8>
 8006a50:	f000 f9ba 	bl	8006dc8 <copysign>
 8006a54:	a318      	add	r3, pc, #96	; (adr r3, 8006ab8 <scalbn+0xd8>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	ec51 0b10 	vmov	r0, r1, d0
 8006a5e:	e7da      	b.n	8006a16 <scalbn+0x36>
 8006a60:	2a00      	cmp	r2, #0
 8006a62:	dd08      	ble.n	8006a76 <scalbn+0x96>
 8006a64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a70:	ec45 4b10 	vmov	d0, r4, r5
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
 8006a76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006a7a:	da0d      	bge.n	8006a98 <scalbn+0xb8>
 8006a7c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006a80:	429e      	cmp	r6, r3
 8006a82:	ec45 4b11 	vmov	d1, r4, r5
 8006a86:	dce1      	bgt.n	8006a4c <scalbn+0x6c>
 8006a88:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006ab0 <scalbn+0xd0>
 8006a8c:	f000 f99c 	bl	8006dc8 <copysign>
 8006a90:	a307      	add	r3, pc, #28	; (adr r3, 8006ab0 <scalbn+0xd0>)
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	e7e0      	b.n	8006a5a <scalbn+0x7a>
 8006a98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a9c:	3236      	adds	r2, #54	; 0x36
 8006a9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006aa2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <scalbn+0xe8>)
 8006aae:	e7b2      	b.n	8006a16 <scalbn+0x36>
 8006ab0:	c2f8f359 	.word	0xc2f8f359
 8006ab4:	01a56e1f 	.word	0x01a56e1f
 8006ab8:	8800759c 	.word	0x8800759c
 8006abc:	7e37e43c 	.word	0x7e37e43c
 8006ac0:	43500000 	.word	0x43500000
 8006ac4:	ffff3cb0 	.word	0xffff3cb0
 8006ac8:	3c900000 	.word	0x3c900000

08006acc <atanf>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	ee10 5a10 	vmov	r5, s0
 8006ad2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006ad6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8006ada:	eef0 7a40 	vmov.f32	s15, s0
 8006ade:	db10      	blt.n	8006b02 <atanf+0x36>
 8006ae0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006ae4:	dd04      	ble.n	8006af0 <atanf+0x24>
 8006ae6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006aea:	eeb0 0a67 	vmov.f32	s0, s15
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8006c28 <atanf+0x15c>
 8006af4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8006c2c <atanf+0x160>
 8006af8:	2d00      	cmp	r5, #0
 8006afa:	bfd8      	it	le
 8006afc:	eef0 7a47 	vmovle.f32	s15, s14
 8006b00:	e7f3      	b.n	8006aea <atanf+0x1e>
 8006b02:	4b4b      	ldr	r3, [pc, #300]	; (8006c30 <atanf+0x164>)
 8006b04:	429c      	cmp	r4, r3
 8006b06:	dc10      	bgt.n	8006b2a <atanf+0x5e>
 8006b08:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8006b0c:	da0a      	bge.n	8006b24 <atanf+0x58>
 8006b0e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006c34 <atanf+0x168>
 8006b12:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b22:	dce2      	bgt.n	8006aea <atanf+0x1e>
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b28:	e013      	b.n	8006b52 <atanf+0x86>
 8006b2a:	f000 f8a3 	bl	8006c74 <fabsf>
 8006b2e:	4b42      	ldr	r3, [pc, #264]	; (8006c38 <atanf+0x16c>)
 8006b30:	429c      	cmp	r4, r3
 8006b32:	dc4f      	bgt.n	8006bd4 <atanf+0x108>
 8006b34:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	dc41      	bgt.n	8006bc0 <atanf+0xf4>
 8006b3c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8006b40:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006b44:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006b48:	2300      	movs	r3, #0
 8006b4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006b58:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006c3c <atanf+0x170>
 8006b5c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8006c40 <atanf+0x174>
 8006b60:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8006c44 <atanf+0x178>
 8006b64:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006b68:	eee6 5a87 	vfma.f32	s11, s13, s14
 8006b6c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006c48 <atanf+0x17c>
 8006b70:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006b74:	eddf 5a35 	vldr	s11, [pc, #212]	; 8006c4c <atanf+0x180>
 8006b78:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006b7c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006c50 <atanf+0x184>
 8006b80:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006b84:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006c54 <atanf+0x188>
 8006b88:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006b8c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006c58 <atanf+0x18c>
 8006b90:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006b94:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006c5c <atanf+0x190>
 8006b98:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006b9c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8006c60 <atanf+0x194>
 8006ba0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006ba4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006c64 <atanf+0x198>
 8006ba8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006bac:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006bb0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bb8:	d121      	bne.n	8006bfe <atanf+0x132>
 8006bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bbe:	e794      	b.n	8006aea <atanf+0x1e>
 8006bc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006bc4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006bc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006bcc:	2301      	movs	r3, #1
 8006bce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006bd2:	e7be      	b.n	8006b52 <atanf+0x86>
 8006bd4:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <atanf+0x19c>)
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	dc0b      	bgt.n	8006bf2 <atanf+0x126>
 8006bda:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8006bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006be2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006be6:	2302      	movs	r3, #2
 8006be8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bf0:	e7af      	b.n	8006b52 <atanf+0x86>
 8006bf2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006bf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e7a9      	b.n	8006b52 <atanf+0x86>
 8006bfe:	4a1b      	ldr	r2, [pc, #108]	; (8006c6c <atanf+0x1a0>)
 8006c00:	491b      	ldr	r1, [pc, #108]	; (8006c70 <atanf+0x1a4>)
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	440b      	add	r3, r1
 8006c08:	edd3 6a00 	vldr	s13, [r3]
 8006c0c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006c10:	2d00      	cmp	r5, #0
 8006c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c16:	ed92 7a00 	vldr	s14, [r2]
 8006c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c1e:	bfb8      	it	lt
 8006c20:	eef1 7a67 	vneglt.f32	s15, s15
 8006c24:	e761      	b.n	8006aea <atanf+0x1e>
 8006c26:	bf00      	nop
 8006c28:	bfc90fdb 	.word	0xbfc90fdb
 8006c2c:	3fc90fdb 	.word	0x3fc90fdb
 8006c30:	3edfffff 	.word	0x3edfffff
 8006c34:	7149f2ca 	.word	0x7149f2ca
 8006c38:	3f97ffff 	.word	0x3f97ffff
 8006c3c:	3c8569d7 	.word	0x3c8569d7
 8006c40:	3d4bda59 	.word	0x3d4bda59
 8006c44:	bd6ef16b 	.word	0xbd6ef16b
 8006c48:	3d886b35 	.word	0x3d886b35
 8006c4c:	3dba2e6e 	.word	0x3dba2e6e
 8006c50:	3e124925 	.word	0x3e124925
 8006c54:	3eaaaaab 	.word	0x3eaaaaab
 8006c58:	bd15a221 	.word	0xbd15a221
 8006c5c:	bd9d8795 	.word	0xbd9d8795
 8006c60:	bde38e38 	.word	0xbde38e38
 8006c64:	be4ccccd 	.word	0xbe4ccccd
 8006c68:	401bffff 	.word	0x401bffff
 8006c6c:	080073d8 	.word	0x080073d8
 8006c70:	080073e8 	.word	0x080073e8

08006c74 <fabsf>:
 8006c74:	ee10 3a10 	vmov	r3, s0
 8006c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c7c:	ee00 3a10 	vmov	s0, r3
 8006c80:	4770      	bx	lr
	...

08006c84 <floorf>:
 8006c84:	ee10 3a10 	vmov	r3, s0
 8006c88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c8c:	0dca      	lsrs	r2, r1, #23
 8006c8e:	3a7f      	subs	r2, #127	; 0x7f
 8006c90:	2a16      	cmp	r2, #22
 8006c92:	dc2a      	bgt.n	8006cea <floorf+0x66>
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	da11      	bge.n	8006cbc <floorf+0x38>
 8006c98:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006cfc <floorf+0x78>
 8006c9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ca0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca8:	dd05      	ble.n	8006cb6 <floorf+0x32>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	da23      	bge.n	8006cf6 <floorf+0x72>
 8006cae:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <floorf+0x7c>)
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	bf18      	it	ne
 8006cb4:	4613      	movne	r3, r2
 8006cb6:	ee00 3a10 	vmov	s0, r3
 8006cba:	4770      	bx	lr
 8006cbc:	4911      	ldr	r1, [pc, #68]	; (8006d04 <floorf+0x80>)
 8006cbe:	4111      	asrs	r1, r2
 8006cc0:	420b      	tst	r3, r1
 8006cc2:	d0fa      	beq.n	8006cba <floorf+0x36>
 8006cc4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006cfc <floorf+0x78>
 8006cc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ccc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd4:	ddef      	ble.n	8006cb6 <floorf+0x32>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfbe      	ittt	lt
 8006cda:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006cde:	fa40 f202 	asrlt.w	r2, r0, r2
 8006ce2:	189b      	addlt	r3, r3, r2
 8006ce4:	ea23 0301 	bic.w	r3, r3, r1
 8006ce8:	e7e5      	b.n	8006cb6 <floorf+0x32>
 8006cea:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006cee:	d3e4      	bcc.n	8006cba <floorf+0x36>
 8006cf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006cf4:	4770      	bx	lr
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e7dd      	b.n	8006cb6 <floorf+0x32>
 8006cfa:	bf00      	nop
 8006cfc:	7149f2ca 	.word	0x7149f2ca
 8006d00:	bf800000 	.word	0xbf800000
 8006d04:	007fffff 	.word	0x007fffff

08006d08 <scalbnf>:
 8006d08:	b508      	push	{r3, lr}
 8006d0a:	ee10 2a10 	vmov	r2, s0
 8006d0e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8006d12:	ed2d 8b02 	vpush	{d8}
 8006d16:	eef0 0a40 	vmov.f32	s1, s0
 8006d1a:	d004      	beq.n	8006d26 <scalbnf+0x1e>
 8006d1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006d20:	d306      	bcc.n	8006d30 <scalbnf+0x28>
 8006d22:	ee70 0a00 	vadd.f32	s1, s0, s0
 8006d26:	ecbd 8b02 	vpop	{d8}
 8006d2a:	eeb0 0a60 	vmov.f32	s0, s1
 8006d2e:	bd08      	pop	{r3, pc}
 8006d30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d34:	d21c      	bcs.n	8006d70 <scalbnf+0x68>
 8006d36:	4b1f      	ldr	r3, [pc, #124]	; (8006db4 <scalbnf+0xac>)
 8006d38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006db8 <scalbnf+0xb0>
 8006d3c:	4298      	cmp	r0, r3
 8006d3e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8006d42:	db10      	blt.n	8006d66 <scalbnf+0x5e>
 8006d44:	ee10 2a90 	vmov	r2, s1
 8006d48:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8006d4c:	3b19      	subs	r3, #25
 8006d4e:	4403      	add	r3, r0
 8006d50:	2bfe      	cmp	r3, #254	; 0xfe
 8006d52:	dd0f      	ble.n	8006d74 <scalbnf+0x6c>
 8006d54:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8006dbc <scalbnf+0xb4>
 8006d58:	eeb0 0a48 	vmov.f32	s0, s16
 8006d5c:	f000 f843 	bl	8006de6 <copysignf>
 8006d60:	ee60 0a08 	vmul.f32	s1, s0, s16
 8006d64:	e7df      	b.n	8006d26 <scalbnf+0x1e>
 8006d66:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006dc0 <scalbnf+0xb8>
 8006d6a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006d6e:	e7da      	b.n	8006d26 <scalbnf+0x1e>
 8006d70:	0ddb      	lsrs	r3, r3, #23
 8006d72:	e7ec      	b.n	8006d4e <scalbnf+0x46>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dd06      	ble.n	8006d86 <scalbnf+0x7e>
 8006d78:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006d7c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006d80:	ee00 3a90 	vmov	s1, r3
 8006d84:	e7cf      	b.n	8006d26 <scalbnf+0x1e>
 8006d86:	f113 0f16 	cmn.w	r3, #22
 8006d8a:	da06      	bge.n	8006d9a <scalbnf+0x92>
 8006d8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006d90:	4298      	cmp	r0, r3
 8006d92:	dcdf      	bgt.n	8006d54 <scalbnf+0x4c>
 8006d94:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8006dc0 <scalbnf+0xb8>
 8006d98:	e7de      	b.n	8006d58 <scalbnf+0x50>
 8006d9a:	3319      	adds	r3, #25
 8006d9c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006da0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006da4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006dc4 <scalbnf+0xbc>
 8006da8:	ee07 3a10 	vmov	s14, r3
 8006dac:	ee67 0a27 	vmul.f32	s1, s14, s15
 8006db0:	e7b9      	b.n	8006d26 <scalbnf+0x1e>
 8006db2:	bf00      	nop
 8006db4:	ffff3cb0 	.word	0xffff3cb0
 8006db8:	4c000000 	.word	0x4c000000
 8006dbc:	7149f2ca 	.word	0x7149f2ca
 8006dc0:	0da24260 	.word	0x0da24260
 8006dc4:	33000000 	.word	0x33000000

08006dc8 <copysign>:
 8006dc8:	ec51 0b10 	vmov	r0, r1, d0
 8006dcc:	ee11 0a90 	vmov	r0, s3
 8006dd0:	ee10 2a10 	vmov	r2, s0
 8006dd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006ddc:	ea41 0300 	orr.w	r3, r1, r0
 8006de0:	ec43 2b10 	vmov	d0, r2, r3
 8006de4:	4770      	bx	lr

08006de6 <copysignf>:
 8006de6:	ee10 3a10 	vmov	r3, s0
 8006dea:	ee10 2a90 	vmov	r2, s1
 8006dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006df2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006df6:	4313      	orrs	r3, r2
 8006df8:	ee00 3a10 	vmov	s0, r3
 8006dfc:	4770      	bx	lr
	...

08006e00 <_init>:
 8006e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e02:	bf00      	nop
 8006e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e06:	bc08      	pop	{r3}
 8006e08:	469e      	mov	lr, r3
 8006e0a:	4770      	bx	lr

08006e0c <_fini>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr
